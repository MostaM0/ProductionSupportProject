[
    {
        "@timestamp": "2025-01-01 00:51:48.315",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:48.315Z",
            "@version": "1",
            "message": "Could not process the command with id 4451a976-d897-48e6-b029-021b69a8e27b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "d292f35bff6042b7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:48.315",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:48.315Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 3d7b1975-af05-4f76-9ffb-f9163b48ca70\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.05\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 22c37dca-7868-4670-bece-ea5414e5e40e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4451a976-d897-48e6-b029-021b69a8e27b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1719743212418168\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 3d7b1975-af05-4f76-9ffb-f9163b48ca70\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "d292f35bff6042b7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:48.311",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:48.311Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "d292f35bff6042b7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:48.304",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:48.304",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:48.303",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:48.303Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656347 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.746",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.745Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491a2fed6cd59bcc1eb9e261431e9",
            "spanId": "bcc1eb9e261431e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.301",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.301Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 3d7b1975-af05-4f76-9ffb-f9163b48ca70\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.05\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 22c37dca-7868-4670-bece-ea5414e5e40e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4451a976-d897-48e6-b029-021b69a8e27b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1719743212418168\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 3d7b1975-af05-4f76-9ffb-f9163b48ca70\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3905200f5bfb4062",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.301",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.301Z",
            "@version": "1",
            "message": "Could not process the command with id 4451a976-d897-48e6-b029-021b69a8e27b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3905200f5bfb4062",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.290",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.29Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3905200f5bfb4062",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.281",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.281Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656347 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.276",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.276Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ed709e48-80fc-4b9a-879c-5506470a3ef9\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.31\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ecf2e8c0-eb61-4bb9-b151-b8f5e26237df\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 71f8020c-8779-40a3-b3ca-82a63ddd0a2e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ed709e48-80fc-4b9a-879c-5506470a3ef9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "4d43879746957b6c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.276",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.276Z",
            "@version": "1",
            "message": "Could not process the command with id 71f8020c-8779-40a3-b3ca-82a63ddd0a2e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "4d43879746957b6c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.273",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.273Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "4d43879746957b6c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:46.266",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:46.266",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:46.265",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:46.265Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656346 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:37.774",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:37.774Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706705934324281, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774919910105767d0daecef8e33031d",
            "spanId": "d0daecef8e33031d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:37.127",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:37.127Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: [10653307-c115-4f6a-8f88-d969bf278192]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749199f1b0d85b1d6998752da97d22",
            "spanId": "1d6998752da97d22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:36.206",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:36.205Z",
            "@version": "1",
            "message": "Could not process the command with id 5b6967fb-07ff-48e1-947c-36283f767bd2, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3110c697a18643e3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:36.206",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:36.205Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e2d3eea2-e193-4f6a-b959-852125f056fe\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d19ad978-9f4a-4ecf-a90f-7bab82df9b6d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 5b6967fb-07ff-48e1-947c-36283f767bd2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1719156752918445\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e2d3eea2-e193-4f6a-b959-852125f056fe\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3110c697a18643e3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:36.202",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:36.202Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "3110c697a18643e3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:36.194",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:36.193Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656345 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:36.194",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:36.194",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:35.511",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:35.51Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1682776060313414, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749197de7fcca13587cf9ad85934d2",
            "spanId": "3587cf9ad85934d2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.192",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.191Z",
            "@version": "1",
            "message": "Could not process the command with id 5b6967fb-07ff-48e1-947c-36283f767bd2, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "67b28475f75283d9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.192",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.191Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e2d3eea2-e193-4f6a-b959-852125f056fe\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d19ad978-9f4a-4ecf-a90f-7bab82df9b6d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 5b6967fb-07ff-48e1-947c-36283f767bd2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1719156752918445\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e2d3eea2-e193-4f6a-b959-852125f056fe\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "67b28475f75283d9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.180",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.18Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "67b28475f75283d9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.167",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.167Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656345 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.161Z",
            "@version": "1",
            "message": "Could not process the command with id d7698359-a185-4a33-913c-eaa4d2f11e3e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "a8e9dfaf884acead",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.161Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 118b1ff5-4986-4f02-9073-5d51b13ae08a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 29.43\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 0e98eeef-01f2-4f61-910e-aa5f60d0924f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: d7698359-a185-4a33-913c-eaa4d2f11e3e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700142642931706\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 118b1ff5-4986-4f02-9073-5d51b13ae08a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "a8e9dfaf884acead",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.157",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.157Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "a8e9dfaf884acead",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:34.150",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:34.149",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:34.149",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:34.149Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656344 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:33.716",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:33.716Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1682776060313414, smeId: null, accountId: [15082bd2-9421-4bf1-944f-058842236026]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749195f597f1fa4554146f342328e9",
            "spanId": "4554146f342328e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:33.615",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:33.615Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1700615747876306, smeId: null, accountId: [eea557a0-2edf-490d-bc74-cc400443aa90]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491952b9b7bc2116b75c16265f6e9",
            "spanId": "116b75c16265f6e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:28.679",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:28.679Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1748736000000044, smeId: null, accountId: [87a6bad8-c99a-4c46-8eb0-1e2a831aa0b9]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491905fb11b1c5ad6b7a74270aa5d",
            "spanId": "5ad6b7a74270aa5d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.08Z",
            "@version": "1",
            "message": "Could not process the command with id 7c941244-0848-4ffb-ac3a-2a955811170e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "24269b97715bea8b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.08Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 5ae952b0-3ec1-4c21-8fb0-f6fe82fb89f6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 902fd9bb-656b-443a-8a0e-431c98974c9f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 7c941244-0848-4ffb-ac3a-2a955811170e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1676690644332922\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 5ae952b0-3ec1-4c21-8fb0-f6fe82fb89f6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "24269b97715bea8b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.069",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.068Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "24269b97715bea8b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.059",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.059Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656343 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.049",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.049Z",
            "@version": "1",
            "message": "Could not process the command with id c2e3bf68-01a8-41cb-be02-18a843e26828, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "6b759c3f7f444ac7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.049",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.049Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 09d3911f-fab5-422d-a538-107ea6923853\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 154.83\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 142b6f33-fdef-4c2d-9589-820bba384a27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c2e3bf68-01a8-41cb-be02-18a843e26828\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1676695366572501\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 09d3911f-fab5-422d-a538-107ea6923853\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "6b759c3f7f444ac7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.042",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.042Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f25b673d6ea0a2822722faef1",
            "spanId": "6b759c3f7f444ac7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:22.034",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:22.034",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:22.033",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:22.033Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656342 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:16.105",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:16.104Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706705934324281, smeId: null, accountId: [d3fa0b20-8651-49c2-951c-e97b1a9f9d0c]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749184abfd596b63dcc6f8ba567c17",
            "spanId": "63dcc6f8ba567c17",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:15.138",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:15.137Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725158279370370, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774918354346cb6c97bbd46cff68c2c",
            "spanId": "c97bbd46cff68c2c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:11.405",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:11.405Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1722257988389155, smeId: null, accountId: [8b3d0677-e99b-4af9-a0d1-022e18c44fc3]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774917f0740ba4a5d6e51a92576a51c",
            "spanId": "5d6e51a92576a51c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:09.477",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:09.477Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1712462676718071, smeId: null, accountId: [c894d67b-d029-45b3-b8ce-30e4e8329c7e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774917ddb3ae9ec066b6affd0ffb240",
            "spanId": "066b6affd0ffb240",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:09.318",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:09.317Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1712462676718071, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774917dd159cc7fb09a3279e4b1f2b8",
            "spanId": "b09a3279e4b1f2b8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:05.919",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:05.919Z",
            "@version": "1",
            "message": "Could not process the command with id 90b18f9e-cb41-4d5d-af7e-51e6a64f66b5, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "ddd835561d1ff749",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:05.919",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:05.919Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: cb5b85ef-0106-4a50-bd78-052dfb17898e\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 9.72\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e477ab27-bfca-4f25-a4ce-3b3ceec01c06\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 90b18f9e-cb41-4d5d-af7e-51e6a64f66b5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1692852471449945\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: cb5b85ef-0106-4a50-bd78-052dfb17898e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "ddd835561d1ff749",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:05.916",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:05.916Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "ddd835561d1ff749",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:05.909",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:05.909",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:51:05.909",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:05.908Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656340 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.907",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.907Z",
            "@version": "1",
            "message": "Could not process the command with id 90b18f9e-cb41-4d5d-af7e-51e6a64f66b5, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "8c9933310d728b7c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.907",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.907Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: cb5b85ef-0106-4a50-bd78-052dfb17898e\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 9.72\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e477ab27-bfca-4f25-a4ce-3b3ceec01c06\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 90b18f9e-cb41-4d5d-af7e-51e6a64f66b5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1692852471449945\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: cb5b85ef-0106-4a50-bd78-052dfb17898e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "8c9933310d728b7c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.895",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.895Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f18d5bc909ee0fa537231c829",
            "spanId": "8c9933310d728b7c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.883",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.883Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656340 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.878",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.878Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 22b1e659-12e5-43c3-9fd7-4b1b33397898\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.62\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: c17dde83-97f9-4931-ab7a-c166f3aff358\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f41ff45a-7f06-468a-9476-3551c60fee6f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1704752464739791\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 22b1e659-12e5-43c3-9fd7-4b1b33397898\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "07f2c5fd9cee3f5e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.878",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.878Z",
            "@version": "1",
            "message": "Could not process the command with id f41ff45a-7f06-468a-9476-3551c60fee6f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "07f2c5fd9cee3f5e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.874",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.874Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "07f2c5fd9cee3f5e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.866",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:51:03.866",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:51:03.865Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656339 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:51:03.866",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:47.757",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:47.757Z",
            "@version": "1",
            "message": "Could not process the command with id 816b42dd-014e-4cc0-8276-edd894114315, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "434504256a613720",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:47.757",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:47.757Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 19bb1e3c-97fd-48e1-bee2-518352e4182a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 92a9c468-cb25-448f-bf11-c45fba3570af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 816b42dd-014e-4cc0-8276-edd894114315\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 351218\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 19bb1e3c-97fd-48e1-bee2-518352e4182a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "434504256a613720",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:47.754",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:47.754Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "434504256a613720",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:47.747",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:47.747",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:47.746",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:47.746Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656337 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:46.202",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:46.201Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1700615747876306, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749166f87df8b630ed1c117f0141d3",
            "spanId": "30ed1c117f0141d3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.744",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.744Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 19bb1e3c-97fd-48e1-bee2-518352e4182a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 92a9c468-cb25-448f-bf11-c45fba3570af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 816b42dd-014e-4cc0-8276-edd894114315\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 351218\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 19bb1e3c-97fd-48e1-bee2-518352e4182a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "aabf3d810165bd45",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.744",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.744Z",
            "@version": "1",
            "message": "Could not process the command with id 816b42dd-014e-4cc0-8276-edd894114315, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "aabf3d810165bd45",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.733",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.733Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "aabf3d810165bd45",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.718",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.718Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656337 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.713",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.713Z",
            "@version": "1",
            "message": "Could not process the command with id 2042d9f8-04f2-4384-8791-e1b5527ef54b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fb8937de066957029eeb7c3ba",
            "spanId": "047e4f5c88ac2cde",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.713",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.713Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e31f377f-1b0b-467a-8e5d-102fb7218e65\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.01\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: bd1190b5-c70e-4b35-8db1-ba04b3f7d4dc\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 2042d9f8-04f2-4384-8791-e1b5527ef54b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700103077898888\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e31f377f-1b0b-467a-8e5d-102fb7218e65\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fb8937de066957029eeb7c3ba",
            "spanId": "047e4f5c88ac2cde",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.710",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.71Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fb8937de066957029eeb7c3ba",
            "spanId": "047e4f5c88ac2cde",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:45.700",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:45.699",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:45.699",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:45.699Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656336 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:35.250",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:35.249Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1688652402764752, smeId: null, accountId: [0732d398-4fc4-4112-8564-b4d371d09426]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774915b4291c4136f83b7eda0fa44c6",
            "spanId": "6f83b7eda0fa44c6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:29.586",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:29.585Z",
            "@version": "1",
            "message": "Could not process the command with id 9901b48a-3e83-4e98-a24f-c178e28a701b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "cd7667daee859cba",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:29.585",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:29.585Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: f51745ff-05bd-451f-82f5-e479def0563d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.02\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: b4862d4d-54c2-4d1e-a59a-c7d1cbcdf5da\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 9901b48a-3e83-4e98-a24f-c178e28a701b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1714727449446112\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: f51745ff-05bd-451f-82f5-e479def0563d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "cd7667daee859cba",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:29.582",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:29.582Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "cd7667daee859cba",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:29.572",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:29.572",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:29.571",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:29.571Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656334 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:29.271",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:29.27Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707364090881872, smeId: null, accountId: [9861feb9-de57-491b-9ed6-2413a790d711]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749155185ce7f08dbba5767cf71b2b",
            "spanId": "8dbba5767cf71b2b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:27.569",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:27.569Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: f51745ff-05bd-451f-82f5-e479def0563d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.02\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: b4862d4d-54c2-4d1e-a59a-c7d1cbcdf5da\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 9901b48a-3e83-4e98-a24f-c178e28a701b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1714727449446112\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: f51745ff-05bd-451f-82f5-e479def0563d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "4369a0d1731b55e5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:27.569",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:27.569Z",
            "@version": "1",
            "message": "Could not process the command with id 9901b48a-3e83-4e98-a24f-c178e28a701b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "4369a0d1731b55e5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:27.558",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:27.558Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "4369a0d1731b55e5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:27.547",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:27.547Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656334 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:26.609",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:26.608Z",
            "@version": "1",
            "message": "Could not process the command with id 62dbc223-b287-42ef-be78-3924c5f2c1bb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "6613b5291396f19f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:26.608",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:26.608Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fe39a812-51e8-4617-bf5a-715a7fe32cca\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.50\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ad4b39e6-1889-4b8a-bdbe-46dbd49e2d1c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 62dbc223-b287-42ef-be78-3924c5f2c1bb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fe39a812-51e8-4617-bf5a-715a7fe32cca\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "6613b5291396f19f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:26.605",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:26.605Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "6613b5291396f19f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:26.598",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:26.598",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:26.597",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:26.597Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656333 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:22.594",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:22.594Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fe39a812-51e8-4617-bf5a-715a7fe32cca\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.50\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ad4b39e6-1889-4b8a-bdbe-46dbd49e2d1c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 62dbc223-b287-42ef-be78-3924c5f2c1bb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fe39a812-51e8-4617-bf5a-715a7fe32cca\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "83867282f76fd708",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:22.594",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:22.594Z",
            "@version": "1",
            "message": "Could not process the command with id 62dbc223-b287-42ef-be78-3924c5f2c1bb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "83867282f76fd708",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:22.591",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:22.591Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "83867282f76fd708",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:22.582",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:22.582",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:22.581",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:22.581Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656333 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.579",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.579Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fe39a812-51e8-4617-bf5a-715a7fe32cca\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.50\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ad4b39e6-1889-4b8a-bdbe-46dbd49e2d1c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 62dbc223-b287-42ef-be78-3924c5f2c1bb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fe39a812-51e8-4617-bf5a-715a7fe32cca\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "3bb0729085d01722",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.579",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.579Z",
            "@version": "1",
            "message": "Could not process the command with id 62dbc223-b287-42ef-be78-3924c5f2c1bb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "3bb0729085d01722",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.569",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.569Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244ff079953ccade6d766a88e180",
            "spanId": "3bb0729085d01722",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.559",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.559Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656333 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.553",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.553Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9336786f-db41-4e47-9bb0-968c4bb7dd11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f7fdd996-ab23-44f1-ba17-2b41cd142500\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1725614875116264\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "88cfc7520d1f6934",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.553",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.553Z",
            "@version": "1",
            "message": "Could not process the command with id f7fdd996-ab23-44f1-ba17-2b41cd142500, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "88cfc7520d1f6934",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.548",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.548Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "88cfc7520d1f6934",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.540",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:20.539",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:20.538",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.538Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656332 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:20.393",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:20.392Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1700615747876306, smeId: null, accountId: [eea557a0-2edf-490d-bc74-cc400443aa90]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774914cffa5b3b81350a4c0505d81d8",
            "spanId": "1350a4c0505d81d8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:16.532",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:16.531Z",
            "@version": "1",
            "message": "Could not process the command with id f7fdd996-ab23-44f1-ba17-2b41cd142500, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d5f9c137155bc5e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:16.531",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:16.531Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9336786f-db41-4e47-9bb0-968c4bb7dd11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f7fdd996-ab23-44f1-ba17-2b41cd142500\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1725614875116264\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d5f9c137155bc5e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:16.528",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:16.528Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d5f9c137155bc5e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:16.521",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:16.521",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:16.520",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:16.52Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656332 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.519",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.518Z",
            "@version": "1",
            "message": "Could not process the command with id f7fdd996-ab23-44f1-ba17-2b41cd142500, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "1022671bd49a9d90",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.518",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.518Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9336786f-db41-4e47-9bb0-968c4bb7dd11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f7fdd996-ab23-44f1-ba17-2b41cd142500\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1725614875116264\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e98a9cd-1fdc-4724-9563-b138c912d55d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "1022671bd49a9d90",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.507",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.507Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "1022671bd49a9d90",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.498",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.497Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656332 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.492",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.492Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 52c4b0d2-422f-4893-8462-824c0ade82d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.41\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d152665b-cb0c-47e6-898c-3ae95b3bdadf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 51652da0-d5bd-45ea-8e68-92682250fad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 52c4b0d2-422f-4893-8462-824c0ade82d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "2eea8a08db6455d1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.492",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.492Z",
            "@version": "1",
            "message": "Could not process the command with id 51652da0-d5bd-45ea-8e68-92682250fad7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "2eea8a08db6455d1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.489",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.489Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "2eea8a08db6455d1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.482",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:14.482",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:14.482Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656331 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:14.482",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:12.468",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:12.468Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1712462676718071, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491447a4707696b59285081bbe147",
            "spanId": "6b59285081bbe147",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:11.674",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:11.674Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683703139974136, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749143192c91146b48dc582e843542",
            "spanId": "6b48dc582e843542",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:10.479",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:10.479Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 52c4b0d2-422f-4893-8462-824c0ade82d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.41\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d152665b-cb0c-47e6-898c-3ae95b3bdadf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 51652da0-d5bd-45ea-8e68-92682250fad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 52c4b0d2-422f-4893-8462-824c0ade82d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "b96bd9db20349625",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:10.479",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:10.479Z",
            "@version": "1",
            "message": "Could not process the command with id 51652da0-d5bd-45ea-8e68-92682250fad7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "b96bd9db20349625",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:10.473",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:10.473Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "b96bd9db20349625",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:10.463",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:10.462",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:10.462",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:10.461Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656331 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:10.232",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:10.232Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749142d7d0834d006a580cf4d1260e",
            "spanId": "006a580cf4d1260e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.460",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.46Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 52c4b0d2-422f-4893-8462-824c0ade82d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.41\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d152665b-cb0c-47e6-898c-3ae95b3bdadf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 51652da0-d5bd-45ea-8e68-92682250fad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 52c4b0d2-422f-4893-8462-824c0ade82d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "bd3a30379ee3e453",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.460",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.46Z",
            "@version": "1",
            "message": "Could not process the command with id 51652da0-d5bd-45ea-8e68-92682250fad7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "bd3a30379ee3e453",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.448",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.448Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "bd3a30379ee3e453",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.438",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.438Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656331 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.430",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.429Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b14732b3-4e2f-4715-af45-6960c4d23bf4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.20\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f60bbf1d-919d-4512-aeb2-fcc9f8163f94\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: df24392e-7571-4d40-a825-766d44c49228\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b14732b3-4e2f-4715-af45-6960c4d23bf4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "beb8da7707ffe15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.430",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.429Z",
            "@version": "1",
            "message": "Could not process the command with id df24392e-7571-4d40-a825-766d44c49228, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "beb8da7707ffe15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:08.425",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:08.424Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "beb8da7707ffe15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:07.507",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:07.506Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656330 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:07.507",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:07.507",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:06.951",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:06.951Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [1d1d9a19-45f4-49e9-9902-327b258236b0, 277ed0f0-4565-429a-a7a1-a1132d9a3ae3]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774913e05a5b87d7445930401a48664",
            "spanId": "7445930401a48664",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:06.086",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:06.086Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683703139974136, smeId: null, accountId: [c6afaf55-c7e4-41af-af94-6dfe28c72213]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774913e529ef4a17683836ef8c31b61",
            "spanId": "7683836ef8c31b61",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:05.373",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:05.373Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [a4673723-c6a5-4c6f-b3c6-38f4af79cb34]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774913d42394695d99b828bfc99345f",
            "spanId": "d99b828bfc99345f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:03.504",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:03.503Z",
            "@version": "1",
            "message": "Could not process the command with id df24392e-7571-4d40-a825-766d44c49228, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "5ad204987a8b8218",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:03.503",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:03.503Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b14732b3-4e2f-4715-af45-6960c4d23bf4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.20\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f60bbf1d-919d-4512-aeb2-fcc9f8163f94\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: df24392e-7571-4d40-a825-766d44c49228\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b14732b3-4e2f-4715-af45-6960c4d23bf4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "5ad204987a8b8218",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:03.501",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:03.5Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "5ad204987a8b8218",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:03.493",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:03.493",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:03.492",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:03.492Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656330 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:03.269",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:03.268Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1712462676718071, smeId: null, accountId: [c894d67b-d029-45b3-b8ce-30e4e8329c7e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774913bdbd272eeb53bde01c3ff32e8",
            "spanId": "b53bde01c3ff32e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.491",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.49Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b14732b3-4e2f-4715-af45-6960c4d23bf4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.20\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f60bbf1d-919d-4512-aeb2-fcc9f8163f94\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: df24392e-7571-4d40-a825-766d44c49228\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1712664424112826\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b14732b3-4e2f-4715-af45-6960c4d23bf4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "7a95685345597254",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.491",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.491Z",
            "@version": "1",
            "message": "Could not process the command with id df24392e-7571-4d40-a825-766d44c49228, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "7a95685345597254",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.480",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.48Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "7a95685345597254",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.464",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.464Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656330 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.458",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.458Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 397dda26-9f81-474d-8d49-b329eb79aba2\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 64.97\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6168d25f-36be-47b9-9a6f-3b0329eedc18\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: fce8f1c6-762d-4140-a250-cd1bea8d3e45\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700103077898888\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 397dda26-9f81-474d-8d49-b329eb79aba2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d0904d124df2ae7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.458",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.458Z",
            "@version": "1",
            "message": "Could not process the command with id fce8f1c6-762d-4140-a250-cd1bea8d3e45, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d0904d124df2ae7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.455",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.455Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "d0904d124df2ae7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:50:01.448",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:50:01.448",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:50:01.446",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:50:01.446Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656329 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:57.443",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:57.443Z",
            "@version": "1",
            "message": "Could not process the command with id fce8f1c6-762d-4140-a250-cd1bea8d3e45, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "eeaebab946efc2a8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:57.443",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:57.443Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 397dda26-9f81-474d-8d49-b329eb79aba2\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 64.97\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6168d25f-36be-47b9-9a6f-3b0329eedc18\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: fce8f1c6-762d-4140-a250-cd1bea8d3e45\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700103077898888\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 397dda26-9f81-474d-8d49-b329eb79aba2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "eeaebab946efc2a8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:57.440",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:57.44Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "eeaebab946efc2a8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:57.433",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:57.433",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:57.432",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:57.432Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656329 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.431",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.43Z",
            "@version": "1",
            "message": "Could not process the command with id fce8f1c6-762d-4140-a250-cd1bea8d3e45, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "28db7a94c828c853",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.431",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.43Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 397dda26-9f81-474d-8d49-b329eb79aba2\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 64.97\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6168d25f-36be-47b9-9a6f-3b0329eedc18\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: fce8f1c6-762d-4140-a250-cd1bea8d3e45\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700103077898888\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 397dda26-9f81-474d-8d49-b329eb79aba2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "28db7a94c828c853",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.419",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.419Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "28db7a94c828c853",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.408",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.408Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656329 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.403",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.403Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 25.93\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 81fda23a-d47e-4a26-89e4-035797749ed9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 94ae137e-80b1-4525-bce0-edff8c220d8c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1715055807526269\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "79034d51d5f77e48",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.403",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.403Z",
            "@version": "1",
            "message": "Could not process the command with id 94ae137e-80b1-4525-bce0-edff8c220d8c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "79034d51d5f77e48",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.400",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.399Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "79034d51d5f77e48",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.390",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:55.389Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656328 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:55.390",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:55.390",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:52.842",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:52.842Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725622128266106, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749130fe66f2f59807d69c06b60b39",
            "spanId": "9807d69c06b60b39",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:51.386",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:51.386Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 25.93\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 81fda23a-d47e-4a26-89e4-035797749ed9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 94ae137e-80b1-4525-bce0-edff8c220d8c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1715055807526269\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "a4715b08c6f8280d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:51.386",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:51.386Z",
            "@version": "1",
            "message": "Could not process the command with id 94ae137e-80b1-4525-bce0-edff8c220d8c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "a4715b08c6f8280d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:51.383",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:51.382Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "a4715b08c6f8280d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:51.375",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:51.374",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:51.374",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:51.374Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656328 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:51.026",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:51.026Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1695262090369562, smeId: null, accountId: [209ff84b-c04b-4f73-9559-1bccb9293827]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912fbf394761e06f970f81b0ae96",
            "spanId": "e06f970f81b0ae96",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.505",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.505Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715384671937562, smeId: null, accountId: [b6150d28-dfea-412d-b057-9436af4d95ad, cdad6bed-103c-4084-b704-f7d9bc8fa304, c3977f00-b683-409d-9bb3-7d022c352cbb, 5cfa4fdd-a086-4c38-be24-c71ca1709314, 4d5f1767-05e0-469b-adda-5a9ce7dbe1e8, 8a944a35-1914-4a8b-b6ec-3fb1d8052ec4, 6cbbcf6e-164b-4922-b14b-ac1bb2fd6f4c, 347bf050-f934-420b-9207-120e75b9a7bb, 37ca7667-0625-4fc3-8937-7d952241c7d0, dbf29460-c914-4b6d-af61-87770d486b07]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912d9da94380680e785f5ded8437",
            "spanId": "680e785f5ded8437",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.372",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.372Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 25.93\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 81fda23a-d47e-4a26-89e4-035797749ed9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 94ae137e-80b1-4525-bce0-edff8c220d8c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1715055807526269\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2d6f7dba-783c-4e4e-87ce-b80708a4899a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f24153cbc0ee329c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.372",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.372Z",
            "@version": "1",
            "message": "Could not process the command with id 94ae137e-80b1-4525-bce0-edff8c220d8c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f24153cbc0ee329c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.362",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.362Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f24153cbc0ee329c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.353",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.352Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656328 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.347",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.347Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ba54df82-ebe9-42fc-a012-98dbe8287360\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: fe810105-9451-4488-8ce6-e06091a4f156\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 8d8f1aa0-1780-4e00-8751-3b68ab76f628\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700097577295198\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ba54df82-ebe9-42fc-a012-98dbe8287360\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "052debd7d702dc5f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.347",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.347Z",
            "@version": "1",
            "message": "Could not process the command with id 8d8f1aa0-1780-4e00-8751-3b68ab76f628, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "052debd7d702dc5f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.343",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.343Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "052debd7d702dc5f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:49.336",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:49.336",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:49.335",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:49.335Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656327 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:48.132",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:48.132Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715384671937562, smeId: null, accountId: [b1198f94-9a51-4d1d-9f8a-f30d4e929be0]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912c2f4865b004e3bd621ea5be1a",
            "spanId": "04e3bd621ea5be1a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:47.503",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:47.503Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725229506143903, smeId: null, accountId: [efd74dab-b9de-4128-a61c-6801ef810c92]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912ba85e330d93faef31c2d90156",
            "spanId": "93faef31c2d90156",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:46.770",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:46.77Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1702445749935814, smeId: null, accountId: [8529f739-888f-4406-b0f7-c85d6ae9467b, b1b2820a-d7e1-4785-afbd-94a5d338c40e, 806ec599-26fa-4dd7-88b9-587e6bbfacfc, e9c57676-1ee7-4985-93ff-138cdb8de165, d1bd05dd-3016-4b15-8b80-7f8e68d8b4ff, 7db1206f-38df-4e3f-ba51-7d4f68746401, b5bc0fba-c09b-4fa3-9e2c-5392a0da002b, ca45bf06-d94a-400f-8ca7-1f0a0701d398, 84117cc1-fd67-42e5-9eca-f52770dff1d6, 3278ed92-8982-4f81-ab72-51c7f5ded79a]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912a308391659c1c99128b5f0bb7",
            "spanId": "9c1c99128b5f0bb7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:45.332",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:45.332Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ba54df82-ebe9-42fc-a012-98dbe8287360\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: fe810105-9451-4488-8ce6-e06091a4f156\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 8d8f1aa0-1780-4e00-8751-3b68ab76f628\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700097577295198\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ba54df82-ebe9-42fc-a012-98dbe8287360\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "3962aea96623ee56",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:45.332",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:45.332Z",
            "@version": "1",
            "message": "Could not process the command with id 8d8f1aa0-1780-4e00-8751-3b68ab76f628, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "3962aea96623ee56",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:45.329",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:45.329Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "3962aea96623ee56",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:45.322",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:45.322",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:45.321",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:45.321Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656327 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:45.052",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:45.052Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774912911dd1fe29d4d5b395f91f190",
            "spanId": "9d4d5b395f91f190",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:44.885",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:44.885Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1702445749935814, smeId: null, accountId: [e43fd1ff-1a09-4cfd-8065-6f3759c98a8c]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749128c86940ae45d2634ee38a7270",
            "spanId": "45d2634ee38a7270",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.319",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.319Z",
            "@version": "1",
            "message": "Could not process the command with id 8d8f1aa0-1780-4e00-8751-3b68ab76f628, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f5ed9a1e75bd6b08",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.319",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.319Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ba54df82-ebe9-42fc-a012-98dbe8287360\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: fe810105-9451-4488-8ce6-e06091a4f156\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 8d8f1aa0-1780-4e00-8751-3b68ab76f628\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700097577295198\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ba54df82-ebe9-42fc-a012-98dbe8287360\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f5ed9a1e75bd6b08",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.308",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.308Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f7e2193dfd3801f10c6b8dbd0",
            "spanId": "f5ed9a1e75bd6b08",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.298",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.297Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656327 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.292",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.292Z",
            "@version": "1",
            "message": "Could not process the command with id 4ce1be57-4a7f-449a-81d9-36e7f50525dc, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "73a372dccb3e07cf",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.292",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.292Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ed563c50-55f7-4285-a444-8fccfd5ab508\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df040e02-82da-44cf-a2b7-ab3dc6e752c9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4ce1be57-4a7f-449a-81d9-36e7f50525dc\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702602309291714\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ed563c50-55f7-4285-a444-8fccfd5ab508\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "73a372dccb3e07cf",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.289",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.289Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "73a372dccb3e07cf",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:43.281",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:43.280",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:43.279",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:43.279Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656326 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:41.566",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:41.565Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725622128266106, smeId: null, accountId: [8f4fff31-f13b-4d17-be82-057449287e1a]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749125126211702a65fc77cb0197b5",
            "spanId": "2a65fc77cb0197b5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:39.276",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:39.276Z",
            "@version": "1",
            "message": "Could not process the command with id 4ce1be57-4a7f-449a-81d9-36e7f50525dc, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "452e62af95d8909d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:39.276",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:39.276Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ed563c50-55f7-4285-a444-8fccfd5ab508\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df040e02-82da-44cf-a2b7-ab3dc6e752c9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4ce1be57-4a7f-449a-81d9-36e7f50525dc\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702602309291714\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ed563c50-55f7-4285-a444-8fccfd5ab508\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "452e62af95d8909d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:39.272",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:39.272Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "452e62af95d8909d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:39.264",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:39.264",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:39.264",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:39.263Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656326 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:39.173",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:39.172Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [1d1d9a19-45f4-49e9-9902-327b258236b0, 277ed0f0-4565-429a-a7a1-a1132d9a3ae3]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749123e122a6d801fdaea8c6ebe582",
            "spanId": "01fdaea8c6ebe582",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.872",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.872Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [a4673723-c6a5-4c6f-b3c6-38f4af79cb34]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749121be592a83993bda048a08534c",
            "spanId": "993bda048a08534c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.262",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.262Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ed563c50-55f7-4285-a444-8fccfd5ab508\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df040e02-82da-44cf-a2b7-ab3dc6e752c9\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4ce1be57-4a7f-449a-81d9-36e7f50525dc\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702602309291714\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ed563c50-55f7-4285-a444-8fccfd5ab508\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "751f9b12490bd95e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.262",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.262Z",
            "@version": "1",
            "message": "Could not process the command with id 4ce1be57-4a7f-449a-81d9-36e7f50525dc, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "751f9b12490bd95e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.251",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.251Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "751f9b12490bd95e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.241",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.241Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656326 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.236",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.235Z",
            "@version": "1",
            "message": "Could not process the command with id 4968af0b-f15f-4743-8ea1-d146a2d60562, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "1a5a09ee51c8ef80",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.236",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.235Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 4c533c09-3933-44ec-b726-5eba8c9c681a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 00ae385b-4d37-4ebb-ab69-2018ec3e2664\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4968af0b-f15f-4743-8ea1-d146a2d60562\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 4c533c09-3933-44ec-b726-5eba8c9c681a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "1a5a09ee51c8ef80",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.232",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.232Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "1a5a09ee51c8ef80",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:37.222",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:37.222",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:37.221",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:37.221Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656325 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:33.213",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:33.213Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 4c533c09-3933-44ec-b726-5eba8c9c681a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 00ae385b-4d37-4ebb-ab69-2018ec3e2664\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4968af0b-f15f-4743-8ea1-d146a2d60562\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 4c533c09-3933-44ec-b726-5eba8c9c681a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "a1bcae0c041ee7a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:33.213",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:33.213Z",
            "@version": "1",
            "message": "Could not process the command with id 4968af0b-f15f-4743-8ea1-d146a2d60562, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "a1bcae0c041ee7a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:33.211",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:33.21Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "a1bcae0c041ee7a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:33.203",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:33.203",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:33.203Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656325 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:33.203",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:31.201",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.201Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 4c533c09-3933-44ec-b726-5eba8c9c681a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 00ae385b-4d37-4ebb-ab69-2018ec3e2664\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4968af0b-f15f-4743-8ea1-d146a2d60562\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1686207616020409\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 4c533c09-3933-44ec-b726-5eba8c9c681a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "c473a6b86902e82f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.201",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.201Z",
            "@version": "1",
            "message": "Could not process the command with id 4968af0b-f15f-4743-8ea1-d146a2d60562, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "c473a6b86902e82f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.190",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.19Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "c473a6b86902e82f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.181",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.181Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656325 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.175",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.175Z",
            "@version": "1",
            "message": "Could not process the command with id 3218d1fd-4501-4762-874b-474340f27902, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "7d30298ab529d0ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.175",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.175Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e6188460-0e20-4421-839d-f9f2b62bab67\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 10.25\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 919d1bc7-0729-4e6a-9be0-493c809f3c65\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 3218d1fd-4501-4762-874b-474340f27902\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1723522396845278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e6188460-0e20-4421-839d-f9f2b62bab67\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "7d30298ab529d0ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.172",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.172Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "7d30298ab529d0ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:31.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:31.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:31.164",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:31.164Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656324 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:27.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:27.161Z",
            "@version": "1",
            "message": "Could not process the command with id 3218d1fd-4501-4762-874b-474340f27902, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "05cd77b583fd576c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:27.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:27.161Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e6188460-0e20-4421-839d-f9f2b62bab67\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 10.25\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 919d1bc7-0729-4e6a-9be0-493c809f3c65\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 3218d1fd-4501-4762-874b-474340f27902\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1723522396845278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e6188460-0e20-4421-839d-f9f2b62bab67\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "05cd77b583fd576c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:27.158",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:27.157Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "05cd77b583fd576c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:27.150",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:27.150",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:27.149",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:27.149Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656324 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.148",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.147Z",
            "@version": "1",
            "message": "Could not process the command with id 3218d1fd-4501-4762-874b-474340f27902, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "acbb71543774316d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.147",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.147Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: e6188460-0e20-4421-839d-f9f2b62bab67\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 10.25\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 919d1bc7-0729-4e6a-9be0-493c809f3c65\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 3218d1fd-4501-4762-874b-474340f27902\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1723522396845278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: e6188460-0e20-4421-839d-f9f2b62bab67\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "acbb71543774316d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.136",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.136Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "acbb71543774316d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.127",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.127Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656324 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.122",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.122Z",
            "@version": "1",
            "message": "Could not process the command with id b1239d4d-eac7-4411-b8fe-563dcdb7db46, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "648e6f1786146d86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.122",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.121Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 685461fa-aa68-47be-b599-7a782a55ce7f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9292a79-7689-4402-8bf2-d05257a57ec3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b1239d4d-eac7-4411-b8fe-563dcdb7db46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 685461fa-aa68-47be-b599-7a782a55ce7f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "648e6f1786146d86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.118",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.118Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "648e6f1786146d86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:25.111",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:25.111",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:25.110",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:25.11Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656323 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:21.107",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:21.107Z",
            "@version": "1",
            "message": "Could not process the command with id b1239d4d-eac7-4411-b8fe-563dcdb7db46, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "3ff7d58dbcbbca6a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:21.107",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:21.107Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 685461fa-aa68-47be-b599-7a782a55ce7f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9292a79-7689-4402-8bf2-d05257a57ec3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b1239d4d-eac7-4411-b8fe-563dcdb7db46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 685461fa-aa68-47be-b599-7a782a55ce7f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "3ff7d58dbcbbca6a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:21.104",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:21.104Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "3ff7d58dbcbbca6a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:21.097",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:21.096Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656323 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:21.097",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:21.097",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:19.735",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.735Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706705934324281, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774910f048558f31aa7df287b9a265f",
            "spanId": "1aa7df287b9a265f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.095",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.095Z",
            "@version": "1",
            "message": "Could not process the command with id b1239d4d-eac7-4411-b8fe-563dcdb7db46, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "34be9ac71095f583",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.095",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.095Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 685461fa-aa68-47be-b599-7a782a55ce7f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9292a79-7689-4402-8bf2-d05257a57ec3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b1239d4d-eac7-4411-b8fe-563dcdb7db46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 685461fa-aa68-47be-b599-7a782a55ce7f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "34be9ac71095f583",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.082",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.082Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "34be9ac71095f583",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.072",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.072Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656323 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.063",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.063Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 0cdd5571-6d5a-4696-89e8-73808efdb278\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 390faefc-6f4c-4360-844e-90de185cfc5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0c0e418a-1a26-481d-bef0-01d31895e165\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702348050390337\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 0cdd5571-6d5a-4696-89e8-73808efdb278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "6b3d8f39d4db7a50",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.063",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.063Z",
            "@version": "1",
            "message": "Could not process the command with id 0c0e418a-1a26-481d-bef0-01d31895e165, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "6b3d8f39d4db7a50",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.059",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.059Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "6b3d8f39d4db7a50",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:19.051",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:19.051",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:19.050",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:19.05Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656322 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:15.196",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:15.196Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: [10653307-c115-4f6a-8f88-d969bf278192]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774910b4d3f22da40743f91dd2cd7a2",
            "spanId": "40743f91dd2cd7a2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:15.045",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:15.044Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 0cdd5571-6d5a-4696-89e8-73808efdb278\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 390faefc-6f4c-4360-844e-90de185cfc5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0c0e418a-1a26-481d-bef0-01d31895e165\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702348050390337\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 0cdd5571-6d5a-4696-89e8-73808efdb278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "eb8c4f37b8127ae6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:15.045",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:15.045Z",
            "@version": "1",
            "message": "Could not process the command with id 0c0e418a-1a26-481d-bef0-01d31895e165, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "eb8c4f37b8127ae6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:15.042",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:15.042Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "eb8c4f37b8127ae6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:15.035",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:15.035",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:15.034",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:15.034Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656322 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.304",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.303Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1713454132695064, smeId: null, accountId: [f2d76fd7-30d1-424f-b1de-309bf3aa8c53, 1ee9d579-04c1-494a-8bf1-20e3313cd1b5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749109cf29c0ef88850f6e9d11c27f",
            "spanId": "88850f6e9d11c27f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.032",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.032Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 0cdd5571-6d5a-4696-89e8-73808efdb278\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 390faefc-6f4c-4360-844e-90de185cfc5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0c0e418a-1a26-481d-bef0-01d31895e165\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1702348050390337\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 0cdd5571-6d5a-4696-89e8-73808efdb278\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "de1e1942582ce525",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.032",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.032Z",
            "@version": "1",
            "message": "Could not process the command with id 0c0e418a-1a26-481d-bef0-01d31895e165, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "de1e1942582ce525",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.021",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.021Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "de1e1942582ce525",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.011",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.011Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656322 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.006",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.006Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.26\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 01eca88a-7eb7-4e91-97bf-9d490f3e8ad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684120347862252\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "d20203fa66544333",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.006",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.006Z",
            "@version": "1",
            "message": "Could not process the command with id efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "d20203fa66544333",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:13.001",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:13.001Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "d20203fa66544333",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:12.994",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:12.994",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:12.992",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:12.992Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656321 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:11.824",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:11.823Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: [10653307-c115-4f6a-8f88-d969bf278192]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491074f890cad1ca0ea8eeba9d6fb",
            "spanId": "1ca0ea8eeba9d6fb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:10.789",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:10.789Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706705934324281, smeId: null, accountId: [d3fa0b20-8651-49c2-951c-e97b1a9f9d0c]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677491061155984dbaeaed97fa941201",
            "spanId": "baeaed97fa941201",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:08.989",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:08.989Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.26\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 01eca88a-7eb7-4e91-97bf-9d490f3e8ad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684120347862252\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4a43903fa340b347",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:08.989",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:08.989Z",
            "@version": "1",
            "message": "Could not process the command with id efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4a43903fa340b347",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:08.985",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:08.985Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4a43903fa340b347",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:08.978",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:08.978",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:08.977",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:08.977Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656321 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:07.541",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:07.518Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707364090881872, smeId: null, accountId: [88db3353-91dc-4219-994e-5482c6413083, e15cb194-9241-4b03-a890-15510abab414, 443fc427-8b7c-4a73-ae0d-cfd14ea368ea]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749103efb9ca37f45ec7e98e1d9182",
            "spanId": "f45ec7e98e1d9182",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:07.158",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:07.157Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: [10653307-c115-4f6a-8f88-d969bf278192]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749103a6710067ad47be7e63e9b743",
            "spanId": "ad47be7e63e9b743",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.976",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.976Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.26\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 01eca88a-7eb7-4e91-97bf-9d490f3e8ad7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684120347862252\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: ab9cd8fd-a1cc-4519-9efd-3f82522aee27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4c7b9790ea3be8fb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.976",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.976Z",
            "@version": "1",
            "message": "Could not process the command with id efb9fcf2-c5bc-4147-9a52-fe94ff8fecf8, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4c7b9790ea3be8fb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.964",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.964Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fdc238cb9fd80102781064a23",
            "spanId": "4c7b9790ea3be8fb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.954",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.954Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656321 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.949",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.949Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: eaa1cb12-789a-4d3f-bf7e-7739a1d4e259\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 9c8052d7-c0ca-43e7-946a-aa5013eb17e1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 471196\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "c94f485cd27e59f6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.949",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.949Z",
            "@version": "1",
            "message": "Could not process the command with id 9c8052d7-c0ca-43e7-946a-aa5013eb17e1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "c94f485cd27e59f6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.945",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.945Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "c94f485cd27e59f6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.937",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:06.937Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656320 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:06.937",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:06.937",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:02.934",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:02.933Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: eaa1cb12-789a-4d3f-bf7e-7739a1d4e259\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 9c8052d7-c0ca-43e7-946a-aa5013eb17e1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 471196\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "e088f98c20f0943b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:02.934",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:02.934Z",
            "@version": "1",
            "message": "Could not process the command with id 9c8052d7-c0ca-43e7-946a-aa5013eb17e1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "e088f98c20f0943b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:02.931",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:02.931Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "e088f98c20f0943b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:02.924",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:02.924",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:02.923",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:02.923Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656320 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.921",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.921Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: eaa1cb12-789a-4d3f-bf7e-7739a1d4e259\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 9c8052d7-c0ca-43e7-946a-aa5013eb17e1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 471196\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: daa4c561-eff5-446c-b3d2-c8945ee9eb2d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "7bbae5e515372c14",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.921",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.921Z",
            "@version": "1",
            "message": "Could not process the command with id 9c8052d7-c0ca-43e7-946a-aa5013eb17e1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "7bbae5e515372c14",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.910",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.91Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "7bbae5e515372c14",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.858",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.858Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656320 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.853",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.853Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: a294dfb6-75eb-4dbd-8ab4-7545837b9612\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 72c56f43-2932-4bc8-b7b6-955ab562ab2c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694318317195492\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "a89d1f2fc63967fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.853",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.853Z",
            "@version": "1",
            "message": "Could not process the command with id 72c56f43-2932-4bc8-b7b6-955ab562ab2c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "a89d1f2fc63967fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.850",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.849Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "a89d1f2fc63967fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.842",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:49:00.842",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:49:00.841",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.841Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656319 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:49:00.158",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:49:00.158Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725421050301249, smeId: null, accountId: [f7b629c3-3398-4fec-a354-8eb90e1805e4]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490fccb0b1142e2effc5dd01e996d",
            "spanId": "e2effc5dd01e996d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:59.649",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:59.649Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1713454132695064, smeId: null, accountId: [ee0f4b8f-a5cb-43f8-842d-655be50b8f92]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490fb4b1e9c9657b56ae3b9f906d3",
            "spanId": "57b56ae3b9f906d3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:58.037",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:58.037Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707364090881872, smeId: null, accountId: [9861feb9-de57-491b-9ed6-2413a790d711]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490fa44f86835794b6c0c3766e26e",
            "spanId": "794b6c0c3766e26e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:56.838",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:56.838Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: a294dfb6-75eb-4dbd-8ab4-7545837b9612\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 72c56f43-2932-4bc8-b7b6-955ab562ab2c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694318317195492\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "8d41b3330b0ffb3c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:56.838",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:56.838Z",
            "@version": "1",
            "message": "Could not process the command with id 72c56f43-2932-4bc8-b7b6-955ab562ab2c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "8d41b3330b0ffb3c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:56.834",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:56.834Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "8d41b3330b0ffb3c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:56.826",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:56.826",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:56.825",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:56.825Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656319 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.823",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.823Z",
            "@version": "1",
            "message": "Could not process the command with id 72c56f43-2932-4bc8-b7b6-955ab562ab2c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "37d88b10abaaad6e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.823",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.823Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.11\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: a294dfb6-75eb-4dbd-8ab4-7545837b9612\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 72c56f43-2932-4bc8-b7b6-955ab562ab2c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694318317195492\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fd415e8a-5c67-4773-9a90-0f94c45cb9e5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "37d88b10abaaad6e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.812",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.812Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f0031c0a63ff2de9559ef3812",
            "spanId": "37d88b10abaaad6e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.803",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.803Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656319 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.798",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.798Z",
            "@version": "1",
            "message": "Could not process the command with id b9c97fe9-3407-4945-aa84-240c768e63d7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f762d729a886a93f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.798",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.798Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2d9df22-06f8-4bee-873d-eda9d76b8703\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df7dcdff-550a-4516-8c8d-d2b3a6501ff2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b9c97fe9-3407-4945-aa84-240c768e63d7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 399489\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2d9df22-06f8-4bee-873d-eda9d76b8703\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f762d729a886a93f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.793",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.793Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f762d729a886a93f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.786",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.785Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656318 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:54.786",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:54.786",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:54.755",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:54.755Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1695297202213147, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f62026becfb23e32edaf9fc2d7",
            "spanId": "b23e32edaf9fc2d7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:53.342",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:53.342Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [d614a8d3-a8e9-4858-b225-c493dd65042a, fd147f16-a856-43be-95bd-a4cefcfeeb97, 11c57a01-536c-4ae3-b85e-ee91bbbdc908]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f5d7278ec97a8f74dfdd3908f4",
            "spanId": "7a8f74dfdd3908f4",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.897",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.897Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1695297202213147, smeId: null, accountId: [f5057450-0354-4242-98cd-a79f190394d6]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f22a65bc126805ffa3c4c5fad4",
            "spanId": "6805ffa3c4c5fad4",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.783",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.782Z",
            "@version": "1",
            "message": "Could not process the command with id b9c97fe9-3407-4945-aa84-240c768e63d7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e36a4114c509151c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.782",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.782Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2d9df22-06f8-4bee-873d-eda9d76b8703\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df7dcdff-550a-4516-8c8d-d2b3a6501ff2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b9c97fe9-3407-4945-aa84-240c768e63d7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 399489\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2d9df22-06f8-4bee-873d-eda9d76b8703\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e36a4114c509151c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.778",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.778Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e36a4114c509151c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.771",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:50.771",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:50.770",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.77Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656318 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.062",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.062Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f2777f08f3b38336b3f64354ab",
            "spanId": "b38336b3f64354ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:50.031",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:50.031Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1748736000000034, smeId: null, accountId: [511a5bd3-16c6-48c1-b216-e10bf235b3ad]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f27322399627a8834e38116beb",
            "spanId": "27a8834e38116beb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:49.631",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:49.63Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [1d1d9a19-45f4-49e9-9902-327b258236b0, 277ed0f0-4565-429a-a7a1-a1132d9a3ae3]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490f10956c02008534f01af6dd19e",
            "spanId": "08534f01af6dd19e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.768",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.767Z",
            "@version": "1",
            "message": "Could not process the command with id b9c97fe9-3407-4945-aa84-240c768e63d7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "d1231b3e4767b1a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.768",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.767Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2d9df22-06f8-4bee-873d-eda9d76b8703\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: df7dcdff-550a-4516-8c8d-d2b3a6501ff2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b9c97fe9-3407-4945-aa84-240c768e63d7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 399489\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2d9df22-06f8-4bee-873d-eda9d76b8703\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "d1231b3e4767b1a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.756",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.756Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "d1231b3e4767b1a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.741",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.74Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656318 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.702",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.702Z",
            "@version": "1",
            "message": "Could not process the command with id 14ffb1d9-ac66-4439-9e44-be08883ffe4f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "87619e15274ebcc1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.702",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.702Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 9259c7c6-93a6-412e-9422-eab1646ade8d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ff942a7d-b77b-42f7-8bdb-663d03f52f52\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 14ffb1d9-ac66-4439-9e44-be08883ffe4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684062282120980\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 9259c7c6-93a6-412e-9422-eab1646ade8d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "87619e15274ebcc1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.699",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.699Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "87619e15274ebcc1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:48.692",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:48.692",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:48.691",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:48.691Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656317 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:47.366",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:47.366Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711889686855244, smeId: null, accountId: [a4673723-c6a5-4c6f-b3c6-38f4af79cb34]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490ef743c1376fa9ee896703e6fba",
            "spanId": "fa9ee896703e6fba",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:45.144",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:45.144Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715384671937562, smeId: null, accountId: [b6150d28-dfea-412d-b057-9436af4d95ad, cdad6bed-103c-4084-b704-f7d9bc8fa304, c3977f00-b683-409d-9bb3-7d022c352cbb, 5cfa4fdd-a086-4c38-be24-c71ca1709314, 4d5f1767-05e0-469b-adda-5a9ce7dbe1e8, 8a944a35-1914-4a8b-b6ec-3fb1d8052ec4, 6cbbcf6e-164b-4922-b14b-ac1bb2fd6f4c, 347bf050-f934-420b-9207-120e75b9a7bb, 37ca7667-0625-4fc3-8937-7d952241c7d0, dbf29460-c914-4b6d-af61-87770d486b07]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490ededd1b4019e3c14d7dc3da075",
            "spanId": "9e3c14d7dc3da075",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:44.688",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:44.688Z",
            "@version": "1",
            "message": "Could not process the command with id 14ffb1d9-ac66-4439-9e44-be08883ffe4f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "716b97aa7f83e2a1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:44.688",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:44.688Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 9259c7c6-93a6-412e-9422-eab1646ade8d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ff942a7d-b77b-42f7-8bdb-663d03f52f52\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 14ffb1d9-ac66-4439-9e44-be08883ffe4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684062282120980\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 9259c7c6-93a6-412e-9422-eab1646ade8d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "716b97aa7f83e2a1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:44.685",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:44.685Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "716b97aa7f83e2a1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:44.677",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:44.676Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656317 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:44.677",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:44.677",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:42.750",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.749Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715384671937562, smeId: null, accountId: [b1198f94-9a51-4d1d-9f8a-f30d4e929be0]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490eac5f3e4233398f9b1d7d36e91",
            "spanId": "3398f9b1d7d36e91",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.675",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.675Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 9259c7c6-93a6-412e-9422-eab1646ade8d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: ff942a7d-b77b-42f7-8bdb-663d03f52f52\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 14ffb1d9-ac66-4439-9e44-be08883ffe4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1684062282120980\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 9259c7c6-93a6-412e-9422-eab1646ade8d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "59a22b25c0f426c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.675",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.675Z",
            "@version": "1",
            "message": "Could not process the command with id 14ffb1d9-ac66-4439-9e44-be08883ffe4f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "59a22b25c0f426c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.664",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.664Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "59a22b25c0f426c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.651",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.651Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656317 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.646",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.645Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.83\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b0f3d0e-6c95-42e8-b9ab-3f9c94660e4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b8bcbcc7-a769-4549-ae08-cf18d8c7186b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "ce3d9585cce078e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.646",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.646Z",
            "@version": "1",
            "message": "Could not process the command with id b8bcbcc7-a769-4549-ae08-cf18d8c7186b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "ce3d9585cce078e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.643",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.643Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "ce3d9585cce078e9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:42.636",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:42.636",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:42.635",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:42.635Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656316 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:38.629Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "106a947cbb3b6d8f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:38.632Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.83\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b0f3d0e-6c95-42e8-b9ab-3f9c94660e4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b8bcbcc7-a769-4549-ae08-cf18d8c7186b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "106a947cbb3b6d8f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:38.632Z",
            "@version": "1",
            "message": "Could not process the command with id b8bcbcc7-a769-4549-ae08-cf18d8c7186b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "106a947cbb3b6d8f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:38.642",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:38.62Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656316 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.619",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.619Z",
            "@version": "1",
            "message": "Could not process the command with id b8bcbcc7-a769-4549-ae08-cf18d8c7186b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "df8eac59fe5a80c0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.619",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.619Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.83\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b0f3d0e-6c95-42e8-b9ab-3f9c94660e4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: b8bcbcc7-a769-4549-ae08-cf18d8c7186b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1680158723576800\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 210dcd9f-1a07-4f8a-b416-2718b93764ed\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "df8eac59fe5a80c0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.608",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.608Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "df8eac59fe5a80c0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.598",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.598Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656316 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.593",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.593Z",
            "@version": "1",
            "message": "Could not process the command with id a12e3aa5-49c0-49b8-b1b6-121a9886afb1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "a0a1db8bf1afd3d2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.593",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.593Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 12.13\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 51456ab0-db35-4dcb-8c99-10b18c389df3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a12e3aa5-49c0-49b8-b1b6-121a9886afb1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1720580747757414\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "a0a1db8bf1afd3d2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.590",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.589Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "a0a1db8bf1afd3d2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:36.583",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:36.583",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:36.581",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:36.581Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656315 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:34.301",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:34.301Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706876704356649, smeId: null, accountId: [33aae96d-037e-4e13-b2f0-7f51bd44de44, bcb0029b-5d32-4993-9b18-3db47a700b2b, c50f17a3-8180-4809-ad61-c71164780d02, bf55195c-eef5-4780-b7d0-1d49fcd559c7]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490e27fc3f4d149ac880255955d76",
            "spanId": "49ac880255955d76",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:33.827",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:33.827Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [a633babc-834f-427e-943f-1ad21e77b1d2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490e1aacc4065facfc5928bca5f0b",
            "spanId": "facfc5928bca5f0b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:32.578",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:32.578Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 12.13\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 51456ab0-db35-4dcb-8c99-10b18c389df3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a12e3aa5-49c0-49b8-b1b6-121a9886afb1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1720580747757414\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9d8c4273ff3a0e40",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:32.578",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:32.578Z",
            "@version": "1",
            "message": "Could not process the command with id a12e3aa5-49c0-49b8-b1b6-121a9886afb1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9d8c4273ff3a0e40",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:32.575",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:32.575Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9d8c4273ff3a0e40",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:32.567",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:32.567",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:32.566",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:32.566Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656315 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.565",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.565Z",
            "@version": "1",
            "message": "Could not process the command with id a12e3aa5-49c0-49b8-b1b6-121a9886afb1, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "99338447af0e215f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.565",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.564Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 12.13\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 51456ab0-db35-4dcb-8c99-10b18c389df3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a12e3aa5-49c0-49b8-b1b6-121a9886afb1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1720580747757414\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7078fb47-2370-423b-a8d5-94f48fa3bd9a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "99338447af0e215f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.553",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.553Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "99338447af0e215f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.544",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.543Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656315 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.538",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.538Z",
            "@version": "1",
            "message": "Could not process the command with id ef586f69-e787-44ce-b1ef-bbcb2abf6b73, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "844d56f933b6195f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.538",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.538Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 753c3403-b376-4005-b313-5052f459e8a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 28.56\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 2bb823b0-f188-4ae6-8755-2ed22b607081\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ef586f69-e787-44ce-b1ef-bbcb2abf6b73\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1718418696696866\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 753c3403-b376-4005-b313-5052f459e8a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "844d56f933b6195f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.534",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.534Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "844d56f933b6195f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:30.526",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:30.526",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:30.525",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:30.525Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656314 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:28.423",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:28.423Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1706876704356649, smeId: null, accountId: [d371fbab-076a-4308-8585-c8b856b05f3d]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490dc4649ac1c33a3d27bc0c49c20",
            "spanId": "33a3d27bc0c49c20",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:27.859",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:27.859Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1707888404041071, smeId: null, accountId: [10653307-c115-4f6a-8f88-d969bf278192]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490db8cee4126442b0f350d899a00",
            "spanId": "442b0f350d899a00",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:27.229",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:27.229Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [a633babc-834f-427e-943f-1ad21e77b1d2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490db157c5ea2a8a3608ba4dcd07d",
            "spanId": "a8a3608ba4dcd07d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:27.188",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:27.188Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [44e2cd50-c888-4748-bd89-e377d7be1e6f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490dbf730e707890f83820726b1c0",
            "spanId": "890f83820726b1c0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:27.067",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:27.067Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [d614a8d3-a8e9-4858-b225-c493dd65042a, fd147f16-a856-43be-95bd-a4cefcfeeb97, 11c57a01-536c-4ae3-b85e-ee91bbbdc908]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490db7bb3444a57c04e2b289065d0",
            "spanId": "57c04e2b289065d0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:26.522",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:26.522Z",
            "@version": "1",
            "message": "Could not process the command with id ef586f69-e787-44ce-b1ef-bbcb2abf6b73, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "b55c0845dbc78be1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:26.522",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:26.522Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 753c3403-b376-4005-b313-5052f459e8a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 28.56\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 2bb823b0-f188-4ae6-8755-2ed22b607081\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ef586f69-e787-44ce-b1ef-bbcb2abf6b73\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1718418696696866\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 753c3403-b376-4005-b313-5052f459e8a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "b55c0845dbc78be1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:26.519",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:26.518Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "b55c0845dbc78be1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:26.509",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:26.509",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:26.508",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:26.508Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656314 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.507",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.506Z",
            "@version": "1",
            "message": "Could not process the command with id ef586f69-e787-44ce-b1ef-bbcb2abf6b73, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "26e07656b364ae7e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.506",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.506Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 753c3403-b376-4005-b313-5052f459e8a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 28.56\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 2bb823b0-f188-4ae6-8755-2ed22b607081\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ef586f69-e787-44ce-b1ef-bbcb2abf6b73\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1718418696696866\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 753c3403-b376-4005-b313-5052f459e8a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "26e07656b364ae7e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.496",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.495Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fa2c878297df8ca5ba43cabb3",
            "spanId": "26e07656b364ae7e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.492",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.492Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [a633babc-834f-427e-943f-1ad21e77b1d2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d8f9791708ee781cd1ff2f73d3",
            "spanId": "ee781cd1ff2f73d3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.484",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.484Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656314 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.479",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.479Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 5ae49fff-152c-4b75-b729-3cfc81e762ab\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 5df46a0c-5e5d-4196-9186-8e5c9ba27fac\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707126376807007\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f733c3316304f15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.479",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.479Z",
            "@version": "1",
            "message": "Could not process the command with id 5df46a0c-5e5d-4196-9186-8e5c9ba27fac, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f733c3316304f15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.475",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.475Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "f733c3316304f15a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.467",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.466Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656313 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:24.467",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:24.467",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:24.450",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:24.45Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [44e2cd50-c888-4748-bd89-e377d7be1e6f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d856b9c72779392624b538c35e",
            "spanId": "79392624b538c35e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:23.850",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:23.85Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d7b6aa14a2896984df067bd5c3",
            "spanId": "896984df067bd5c3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:20.464",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:20.463Z",
            "@version": "1",
            "message": "Could not process the command with id 5df46a0c-5e5d-4196-9186-8e5c9ba27fac, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "bbd92667b5f0fd7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:20.463",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:20.463Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 5ae49fff-152c-4b75-b729-3cfc81e762ab\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 5df46a0c-5e5d-4196-9186-8e5c9ba27fac\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707126376807007\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "bbd92667b5f0fd7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:20.461",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:20.46Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "bbd92667b5f0fd7d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:20.454",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:20.454",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:20.453",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:20.453Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656313 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:20.296",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:20.296Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705159229247928, smeId: null, accountId: [e3142396-9c59-4d80-a2b3-ee9808415daa, b7be9465-c181-4dc6-ac3e-b4acae4d83b6]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d4d456b249e5dc395e2cf4bbf0",
            "spanId": "e5dc395e2cf4bbf0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.539",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.539Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [44e2cd50-c888-4748-bd89-e377d7be1e6f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d21bf7b1c120dfe4fb7b5922ea",
            "spanId": "20dfe4fb7b5922ea",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.516",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.516Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1748736000000034, smeId: null, accountId: [511a5bd3-16c6-48c1-b216-e10bf235b3ad]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d2a81d7c61f6cfaf8c45f1ffc5",
            "spanId": "f6cfaf8c45f1ffc5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.451",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.451Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 5ae49fff-152c-4b75-b729-3cfc81e762ab\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 5df46a0c-5e5d-4196-9186-8e5c9ba27fac\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707126376807007\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bf60b06e-7e01-47ef-92b3-3cd933b4e4d1\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "178b0bcf9e987971",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.451",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.451Z",
            "@version": "1",
            "message": "Could not process the command with id 5df46a0c-5e5d-4196-9186-8e5c9ba27fac, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "178b0bcf9e987971",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.435",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.435Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "178b0bcf9e987971",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.422",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.422Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656313 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.416",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.416Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: cc4f2018-6051-4580-9f44-296e78192783\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: c60d059b-d1be-475f-816d-f2f89d3fd1f5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 628c7f4b-2d5b-4b90-82e2-fba3781a54f7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1698822070397013\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: cc4f2018-6051-4580-9f44-296e78192783\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "64a79bcc89dfb276",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.416",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.416Z",
            "@version": "1",
            "message": "Could not process the command with id 628c7f4b-2d5b-4b90-82e2-fba3781a54f7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "64a79bcc89dfb276",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.413",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.413Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "64a79bcc89dfb276",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.406",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:18.406",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:18.405",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.405Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656312 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:18.297",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:18.297Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [a633babc-834f-427e-943f-1ad21e77b1d2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d27d0390831143397ce8a67dcc",
            "spanId": "1143397ce8a67dcc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:17.470",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:17.47Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705159229247928, smeId: null, accountId: [0575355a-0a87-4002-8ee5-5c6305f974cf]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490d19f4f29d6b39788a47b9a9bbe",
            "spanId": "b39788a47b9a9bbe",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:14.402",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:14.402Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: cc4f2018-6051-4580-9f44-296e78192783\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: c60d059b-d1be-475f-816d-f2f89d3fd1f5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 628c7f4b-2d5b-4b90-82e2-fba3781a54f7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1698822070397013\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: cc4f2018-6051-4580-9f44-296e78192783\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "4b66618261672be0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:14.402",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:14.402Z",
            "@version": "1",
            "message": "Could not process the command with id 628c7f4b-2d5b-4b90-82e2-fba3781a54f7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "4b66618261672be0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:14.398",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:14.398Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "4b66618261672be0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:14.391",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:14.390",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:14.390",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:14.39Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656312 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:14.116",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:14.116Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490cee5dac6f8895522ab08329ec7",
            "spanId": "895522ab08329ec7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:13.014",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:13.014Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [44e2cd50-c888-4748-bd89-e377d7be1e6f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490cd94cb8b0d8573105a51e64f21",
            "spanId": "8573105a51e64f21",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.388",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.388Z",
            "@version": "1",
            "message": "Could not process the command with id 628c7f4b-2d5b-4b90-82e2-fba3781a54f7, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9665aff5e8459331",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.388",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.388Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: cc4f2018-6051-4580-9f44-296e78192783\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: c60d059b-d1be-475f-816d-f2f89d3fd1f5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 628c7f4b-2d5b-4b90-82e2-fba3781a54f7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1698822070397013\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: cc4f2018-6051-4580-9f44-296e78192783\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9665aff5e8459331",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.376",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.376Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "9665aff5e8459331",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.342",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.342Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656312 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.337",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.336Z",
            "@version": "1",
            "message": "Could not process the command with id 174f89a7-fc02-44cc-a36b-7b21679aa914, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "53cda0625eaf8d17",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.336",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.336Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 39.37\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: cca2d97a-98d3-4e30-a72b-1d5424530a46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 174f89a7-fc02-44cc-a36b-7b21679aa914\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1693751875231828\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "53cda0625eaf8d17",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.333",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.333Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "53cda0625eaf8d17",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.326",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:12.325Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656311 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:12.326",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:12.326",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:08.322",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:08.322Z",
            "@version": "1",
            "message": "Could not process the command with id 174f89a7-fc02-44cc-a36b-7b21679aa914, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "bf1beec113593e22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:08.322",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:08.322Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 39.37\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: cca2d97a-98d3-4e30-a72b-1d5424530a46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 174f89a7-fc02-44cc-a36b-7b21679aa914\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1693751875231828\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "bf1beec113593e22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:08.318",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:08.317Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "bf1beec113593e22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:08.306",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:08.306",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:08.305",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:08.305Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656311 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:07.832",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:07.832Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490c7e02299dd80df9bafc2e0ce03",
            "spanId": "80df9bafc2e0ce03",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.304",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.303Z",
            "@version": "1",
            "message": "Could not process the command with id 174f89a7-fc02-44cc-a36b-7b21679aa914, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "2453959bc05d5bb7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.304",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.303Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 39.37\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: cca2d97a-98d3-4e30-a72b-1d5424530a46\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 174f89a7-fc02-44cc-a36b-7b21679aa914\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1693751875231828\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7fe0ac15-93d9-417d-a040-c8f7fdf9b84d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "2453959bc05d5bb7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.294",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.294Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "2453959bc05d5bb7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.284",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.284Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656311 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.279",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.278Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e134439e-da66-4047-a417-97da951eef81\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 956b7b6f-005a-4604-9cc9-d0e463e737ff\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703768778430408\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "1acc33c057319a00",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.279",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.279Z",
            "@version": "1",
            "message": "Could not process the command with id 956b7b6f-005a-4604-9cc9-d0e463e737ff, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "1acc33c057319a00",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.275",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.275Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "1acc33c057319a00",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:06.268",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:06.268",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:06.267",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:06.266Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656310 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:02.264",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:02.263Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e134439e-da66-4047-a417-97da951eef81\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 956b7b6f-005a-4604-9cc9-d0e463e737ff\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703768778430408\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "71496354e3058b9d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:02.264",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:02.263Z",
            "@version": "1",
            "message": "Could not process the command with id 956b7b6f-005a-4604-9cc9-d0e463e737ff, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "71496354e3058b9d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:02.260",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:02.26Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "71496354e3058b9d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:02.253",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:48:02.253",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:02.252Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656310 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:02.253",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:02.201",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:02.201Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681749327005081, smeId: null, accountId: [35276b5a-0747-4d4a-baad-1ff34c98a461]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490c243bfe96a6071ddcd13696874",
            "spanId": "6071ddcd13696874",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:01.718",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:01.718Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683790212924386, smeId: null, accountId: [a633babc-834f-427e-943f-1ad21e77b1d2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490c1b9a56b542b7a9af57ee9e2de",
            "spanId": "2b7a9af57ee9e2de",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.251",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.251Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e134439e-da66-4047-a417-97da951eef81\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 956b7b6f-005a-4604-9cc9-d0e463e737ff\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703768778430408\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 8c8e8881-b041-436b-b05c-7f3ffe5239a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e293e4dce47c994d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.251",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.251Z",
            "@version": "1",
            "message": "Could not process the command with id 956b7b6f-005a-4604-9cc9-d0e463e737ff, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e293e4dce47c994d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.179",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.179Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fed1335c66d365891f209c24e",
            "spanId": "e293e4dce47c994d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.170",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.17Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656310 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.164Z",
            "@version": "1",
            "message": "Could not process the command with id c7fb2bb5-17f4-4da1-9f10-fb1df20a368c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "637e04b2a9cdba8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.164Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7d61263c-6d73-4b1c-aa8c-fa3241883aad\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c7fb2bb5-17f4-4da1-9f10-fb1df20a368c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1681324420754597\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "637e04b2a9cdba8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.160",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.16Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "637e04b2a9cdba8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.152",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:48:00.152",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:48:00.151Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656309 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:48:00.152",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:58.748",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:58.747Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683294690515095, smeId: null, accountId: [b4005cc2-080d-40aa-9740-98f8204bfb60]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490bea673e3976e3ad9d80445c34f",
            "spanId": "6e3ad9d80445c34f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:56.148",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:56.148Z",
            "@version": "1",
            "message": "Could not process the command with id c7fb2bb5-17f4-4da1-9f10-fb1df20a368c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "e6a705c204796604",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:56.148",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:56.148Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7d61263c-6d73-4b1c-aa8c-fa3241883aad\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c7fb2bb5-17f4-4da1-9f10-fb1df20a368c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1681324420754597\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "e6a705c204796604",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:56.143",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:56.143Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "e6a705c204796604",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:56.135",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:56.134Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656309 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:56.135",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:56.135",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:55.550",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:55.55Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1704958354120632, smeId: null, accountId: [84656d52-ff5a-4bcf-81bb-81aa096dd099]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490bb6459d734e7a9b6c680d341ac",
            "spanId": "e7a9b6c680d341ac",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:55.334",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:55.334Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [d614a8d3-a8e9-4858-b225-c493dd65042a, fd147f16-a856-43be-95bd-a4cefcfeeb97, 11c57a01-536c-4ae3-b85e-ee91bbbdc908]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490bb27d37c7743282498b29669ed",
            "spanId": "43282498b29669ed",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.133",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.133Z",
            "@version": "1",
            "message": "Could not process the command with id c7fb2bb5-17f4-4da1-9f10-fb1df20a368c, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "b1475534171d59fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.133",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.133Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.08\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7d61263c-6d73-4b1c-aa8c-fa3241883aad\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c7fb2bb5-17f4-4da1-9f10-fb1df20a368c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1681324420754597\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bac600a2-b9b9-4bf5-a8fd-1ccccdee7a04\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "b1475534171d59fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.122",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.122Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "b1475534171d59fa",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.112",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.112Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656309 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.107",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.107Z",
            "@version": "1",
            "message": "Could not process the command with id ee0508e5-e18a-4ee4-adfd-e24c36445282, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "7a36356727f7a9f7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.107",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.107Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 73aa550e-0411-4b42-b9ef-1954babc2050\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ee0508e5-e18a-4ee4-adfd-e24c36445282\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716690027617638\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "7a36356727f7a9f7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.102",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.102Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "7a36356727f7a9f7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:54.094",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:54.094",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:54.093",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:54.093Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656308 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:52.993",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:52.993Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490b8aa52a02012d7f70c941438f4",
            "spanId": "12d7f70c941438f4",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:52.726",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:52.726Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1704958354120632, smeId: null, accountId: [a8500c74-5925-4991-b3fa-f11906632f40]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490b844306021e389e90ba6907235",
            "spanId": "e389e90ba6907235",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:50.614",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:50.614Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1678183341555560, smeId: null, accountId: [2f3242a4-d65d-4acf-a61f-24e132829839]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490b60e69df0297822e94e2032996",
            "spanId": "97822e94e2032996",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:50.090",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:50.09Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 73aa550e-0411-4b42-b9ef-1954babc2050\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ee0508e5-e18a-4ee4-adfd-e24c36445282\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716690027617638\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "4f6b14a035f74d1d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:50.090",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:50.09Z",
            "@version": "1",
            "message": "Could not process the command with id ee0508e5-e18a-4ee4-adfd-e24c36445282, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "4f6b14a035f74d1d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:50.087",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:50.087Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "4f6b14a035f74d1d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:50.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:50.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:50.079",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:50.079Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656308 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:49.813",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:49.813Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681749327005081, smeId: null, accountId: [35276b5a-0747-4d4a-baad-1ff34c98a461]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490b551c28e57a54db085811bb334",
            "spanId": "a54db085811bb334",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.078",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.077Z",
            "@version": "1",
            "message": "Could not process the command with id ee0508e5-e18a-4ee4-adfd-e24c36445282, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "c41d013e42c79a61",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.077",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.077Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 73aa550e-0411-4b42-b9ef-1954babc2050\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ee0508e5-e18a-4ee4-adfd-e24c36445282\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716690027617638\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b770f7e3-b9f7-4c69-b7fc-d904a4017acd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "c41d013e42c79a61",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.067",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.066Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "c41d013e42c79a61",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.057",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.057Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656308 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.052",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.052Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 667eb47c-8815-48c9-9130-b92cd3f2a3a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1724768351859865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "ebc2bcec5663fd4b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.052",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.052Z",
            "@version": "1",
            "message": "Could not process the command with id 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "ebc2bcec5663fd4b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.049",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.048Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "ebc2bcec5663fd4b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.041",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:48.04Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656307 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:48.041",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:48.041",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:44.126",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:44.126Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681749327005081, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490b0bcca5961739c9a8619654028",
            "spanId": "739c9a8619654028",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:44.037",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:44.037Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 667eb47c-8815-48c9-9130-b92cd3f2a3a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1724768351859865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "a53cc0614e44ca81",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:44.037",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:44.037Z",
            "@version": "1",
            "message": "Could not process the command with id 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "a53cc0614e44ca81",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:44.035",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:44.034Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "a53cc0614e44ca81",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:44.026",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:44.026",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:44.025",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:44.025Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656307 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:42.024",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:42.023Z",
            "@version": "1",
            "message": "Could not process the command with id 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "10a28e429e79bfbc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:42.023",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:42.023Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 667eb47c-8815-48c9-9130-b92cd3f2a3a6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1bcdc5e2-713b-4f10-91d9-e9962a3f4bcf\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1724768351859865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: fa5a69d2-d916-46af-85e8-33a3e1578fc7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "10a28e429e79bfbc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:42.013",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:42.013Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d86506b266ad702b05718b9",
            "spanId": "10a28e429e79bfbc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:42.003",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:42.003Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656307 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.998",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.998Z",
            "@version": "1",
            "message": "Could not process the command with id ab0b678a-c9e9-4573-8c39-d1ae55da182b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "85bd05126cdde542",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.998",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.998Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2ae3229-73e9-462f-86e5-791a0ff83b82\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 0d44726d-6001-440f-a2e7-e1512baa9d6a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ab0b678a-c9e9-4573-8c39-d1ae55da182b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694661476782564\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2ae3229-73e9-462f-86e5-791a0ff83b82\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "85bd05126cdde542",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.994",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.994Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "85bd05126cdde542",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.987",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:41.987",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:41.986",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.986Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656306 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.668",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.667Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1694159769549900, smeId: null, accountId: [a3cd5a76-5f1a-4b70-bed0-3c2ebadb869c]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490ad51750b8509382110ab7977e5",
            "spanId": "09382110ab7977e5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:41.356",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:41.356Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1714544876699470, smeId: null, accountId: [bb62b36c-acc7-43d0-a234-a189b43678e1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490add110462022f46712db95bb3b",
            "spanId": "22f46712db95bb3b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:40.102",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:40.102Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1677904075505952, smeId: null, accountId: [52b2dc11-a0a9-4102-9d5e-7263119c66d5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490acd0c246ca6c74956eb9bc2bd0",
            "spanId": "6c74956eb9bc2bd0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:39.784",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:39.784Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725421050301249, smeId: null, accountId: [cd717961-7371-4138-8729-151a9da90fa4]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490ab8f0d22eb9c719126d4f3b837",
            "spanId": "9c719126d4f3b837",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:38.964",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:38.964Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1686384647710155, smeId: null, accountId: [ff959277-37af-4984-8071-366b29d179d1]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490aade25f23774f7d9c88c3c480d",
            "spanId": "74f7d9c88c3c480d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:38.615",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:38.584Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1677904075505952, smeId: null, accountId: [f82cf643-3ad0-44ae-92bc-b243747c8e2a]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490aa9578e3740c83add62ceb470e",
            "spanId": "0c83add62ceb470e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:37.983",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:37.983Z",
            "@version": "1",
            "message": "Could not process the command with id ab0b678a-c9e9-4573-8c39-d1ae55da182b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "5603a7c82f0b18e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:37.983",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:37.983Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2ae3229-73e9-462f-86e5-791a0ff83b82\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 0d44726d-6001-440f-a2e7-e1512baa9d6a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ab0b678a-c9e9-4573-8c39-d1ae55da182b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694661476782564\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2ae3229-73e9-462f-86e5-791a0ff83b82\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "5603a7c82f0b18e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:37.979",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:37.979Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "5603a7c82f0b18e8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:37.972",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:37.972",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:37.971",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:37.971Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656306 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.970",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.97Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b2ae3229-73e9-462f-86e5-791a0ff83b82\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 0d44726d-6001-440f-a2e7-e1512baa9d6a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ab0b678a-c9e9-4573-8c39-d1ae55da182b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1694661476782564\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b2ae3229-73e9-462f-86e5-791a0ff83b82\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4ecc9981b9f738ae",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.970",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.97Z",
            "@version": "1",
            "message": "Could not process the command with id ab0b678a-c9e9-4573-8c39-d1ae55da182b, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4ecc9981b9f738ae",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.959",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.959Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4ecc9981b9f738ae",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.949",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.949Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656306 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.940",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.94Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 25d441ee-1f5c-4810-96c2-fa0373152c54\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 82435361-fbc7-4498-918c-a654b5a14d21\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1748736000000447\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 25d441ee-1f5c-4810-96c2-fa0373152c54\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4d615bc838ffbd9e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.940",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.94Z",
            "@version": "1",
            "message": "Could not process the command with id 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4d615bc838ffbd9e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.936",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.936Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "4d615bc838ffbd9e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:35.925",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:35.925",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:35.925",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:35.924Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656305 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:31.922",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:31.921Z",
            "@version": "1",
            "message": "Could not process the command with id 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "57f1eaa0e71f24d7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:31.921",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:31.921Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 25d441ee-1f5c-4810-96c2-fa0373152c54\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 82435361-fbc7-4498-918c-a654b5a14d21\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1748736000000447\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 25d441ee-1f5c-4810-96c2-fa0373152c54\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "57f1eaa0e71f24d7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:31.919",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:31.918Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "57f1eaa0e71f24d7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:31.911",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:31.911",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:31.910",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:31.91Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656305 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:31.606",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:31.606Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1678183341555560, smeId: null, accountId: [2f3242a4-d65d-4acf-a61f-24e132829839]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490a3872ec6c7cb93fc50297a8450",
            "spanId": "cb93fc50297a8450",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:30.738",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:30.738Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1677904075505952, smeId: null, accountId: [f82cf643-3ad0-44ae-92bc-b243747c8e2a]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490a2996dc5f9e3b8b200e0baef2f",
            "spanId": "e3b8b200e0baef2f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.909",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.908Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 25d441ee-1f5c-4810-96c2-fa0373152c54\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 82435361-fbc7-4498-918c-a654b5a14d21\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1748736000000447\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 25d441ee-1f5c-4810-96c2-fa0373152c54\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "d98271fc72c4dc59",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.909",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.908Z",
            "@version": "1",
            "message": "Could not process the command with id 56f2e05f-b7ab-4282-9d6b-ea1eeb0f6518, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "d98271fc72c4dc59",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.897",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.897Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "d98271fc72c4dc59",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.882",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.882Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656305 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.877",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.876Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.46\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7861bcd7-fbf8-48b6-baa6-7de6f9e7d9c5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1696115483886948\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9db778b76ce2da2d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.877",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.876Z",
            "@version": "1",
            "message": "Could not process the command with id 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9db778b76ce2da2d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.873",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.872Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9db778b76ce2da2d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:29.865",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:29.865",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:29.864",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:29.864Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656304 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.938",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.938Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1711768006815889, smeId: null, accountId: [8966a99c-3daa-4af5-a9aa-a903b1b3359c]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774909d982f3a0257fb691078ae82c4",
            "spanId": "57fb691078ae82c4",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.887",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.887Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681749327005081, smeId: null, accountId: [35276b5a-0747-4d4a-baad-1ff34c98a461]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774909dccb20da81898ff228a5b1afd",
            "spanId": "1898ff228a5b1afd",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.861",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.861Z",
            "@version": "1",
            "message": "Could not process the command with id 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "18b2310f856c86cc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.861",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.861Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.46\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7861bcd7-fbf8-48b6-baa6-7de6f9e7d9c5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1696115483886948\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "18b2310f856c86cc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.858",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.858Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "18b2310f856c86cc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:25.850",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:25.850",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:25.849",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:25.849Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656304 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.847",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.847Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.46\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 7861bcd7-fbf8-48b6-baa6-7de6f9e7d9c5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1696115483886948\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b8f6a72-da7f-47c9-a722-fa92bd10ced7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "dafc2f7c44ef333d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.847",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.847Z",
            "@version": "1",
            "message": "Could not process the command with id 1d0ab704-dda7-4fa2-9b98-fe4fa2c2872e, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "dafc2f7c44ef333d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.836",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.836Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "dafc2f7c44ef333d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.826",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.826Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656304 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.817",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.817Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 03729cac-d201-4413-a3cc-d4b6e55e4635\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 24b7010d-b452-48d4-b2d7-ba305fdb52af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c6898731-2929-4ed4-b849-736f536b4c29\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703148165037716\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 03729cac-d201-4413-a3cc-d4b6e55e4635\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "c14f06fc80b37c94",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.817",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.817Z",
            "@version": "1",
            "message": "Could not process the command with id c6898731-2929-4ed4-b849-736f536b4c29, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "c14f06fc80b37c94",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.813",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.813Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "c14f06fc80b37c94",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:23.808",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:23.808",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:23.806",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:23.806Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656303 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:21.450",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:21.449Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1686384647710155, smeId: null, accountId: [762bf943-865f-4f88-8b69-16edb51b8f41]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490991fce0b9d986a60b3e0c03a64",
            "spanId": "986a60b3e0c03a64",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:19.803",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:19.803Z",
            "@version": "1",
            "message": "Could not process the command with id c6898731-2929-4ed4-b849-736f536b4c29, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "56ef0f6d9a10934a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:19.803",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:19.803Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 03729cac-d201-4413-a3cc-d4b6e55e4635\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 24b7010d-b452-48d4-b2d7-ba305fdb52af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c6898731-2929-4ed4-b849-736f536b4c29\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703148165037716\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 03729cac-d201-4413-a3cc-d4b6e55e4635\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "56ef0f6d9a10934a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:19.800",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:19.799Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "56ef0f6d9a10934a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:19.792",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:19.792",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:19.791",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:19.791Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656303 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:18.793",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:18.793Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705371141127206, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774909634d2767eb53dde265a75b44f",
            "spanId": "b53dde265a75b44f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.875",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.874Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1703422253460397, smeId: null, accountId: [39e259d0-0d5f-43c5-8ad0-5e5ad9baa279, 149f6ec7-01f6-4157-b29d-e95729462caa, 66d67d8d-74aa-46eb-a86a-ada935a37911, d4daea11-a3b2-4b6f-8922-01a60e30b701]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490955854b6724b57127af4f1c8ce",
            "spanId": "4b57127af4f1c8ce",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.790",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.789Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 03729cac-d201-4413-a3cc-d4b6e55e4635\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 24b7010d-b452-48d4-b2d7-ba305fdb52af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c6898731-2929-4ed4-b849-736f536b4c29\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1703148165037716\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 03729cac-d201-4413-a3cc-d4b6e55e4635\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "5b7915943c6111f8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.790",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.79Z",
            "@version": "1",
            "message": "Could not process the command with id c6898731-2929-4ed4-b849-736f536b4c29, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "5b7915943c6111f8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.779",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.778Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c1a6d22e4e28a8366fa5fa1",
            "spanId": "5b7915943c6111f8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.768",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.768Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656303 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.759",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.759Z",
            "@version": "1",
            "message": "Could not process the command with id 0647a299-0cb0-403d-9daa-6d112b75981f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "b9f18d18c19a7087",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.759",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.759Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 324.18\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 175a221e-0fe1-44c9-aee4-046a67a57b7c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0647a299-0cb0-403d-9daa-6d112b75981f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1692190253534908\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "b9f18d18c19a7087",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.755",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.755Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "b9f18d18c19a7087",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.745",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:17.745",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:17.744",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.744Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656302 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:17.083",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:17.082Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725421050301249, smeId: null, accountId: [f7b629c3-3398-4fec-a354-8eb90e1805e4]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490953b1423b481e48692db6d71dc",
            "spanId": "81e48692db6d71dc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:16.673",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:16.673Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705371141127206, smeId: null, accountId: [3c8b49d0-3182-4b26-9c6e-4812571adb13]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490940cecaeb418474b782a081023",
            "spanId": "18474b782a081023",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:14.331",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:14.331Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1703422253460397, smeId: null, accountId: [cb09ed02-2f05-4adb-8e84-72942c78b3e5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749092565abc708eaaeaec681fb63b",
            "spanId": "8eaaeaec681fb63b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:13.741",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:13.741Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 324.18\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 175a221e-0fe1-44c9-aee4-046a67a57b7c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0647a299-0cb0-403d-9daa-6d112b75981f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1692190253534908\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9afa4f9b47d5a199",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:13.741",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:13.741Z",
            "@version": "1",
            "message": "Could not process the command with id 0647a299-0cb0-403d-9daa-6d112b75981f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9afa4f9b47d5a199",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:13.738",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:13.738Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "9afa4f9b47d5a199",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:13.730",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:13.730",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:13.729",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:13.729Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656302 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:13.371",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:13.371Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1708482677531952, smeId: null, accountId: [8482d72e-198a-4fc4-833e-e393d0082147]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490910409e104fd958fb91048ebe3",
            "spanId": "fd958fb91048ebe3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.727",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.727Z",
            "@version": "1",
            "message": "Could not process the command with id 0647a299-0cb0-403d-9daa-6d112b75981f, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "6b886faeeb1935fc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.727",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.727Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 324.18\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 175a221e-0fe1-44c9-aee4-046a67a57b7c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 0647a299-0cb0-403d-9daa-6d112b75981f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1692190253534908\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7f1ee4b6-c867-48a4-9464-5466a4b552c0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "6b886faeeb1935fc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.717",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.716Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f744c7db649304a78bf108dde",
            "spanId": "6b886faeeb1935fc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.707",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.707Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656302 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.702",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.702Z",
            "@version": "1",
            "message": "Could not process the command with id 61c825b4-385e-4827-bbeb-c77b486f4be2, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "6f50050a1b31f53b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.702",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.702Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 59372a77-6820-4d3b-b50d-3fb65db89048\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1d3738be-c8d1-466b-8503-65b564f2fec6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 61c825b4-385e-4827-bbeb-c77b486f4be2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1677857342048327\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 59372a77-6820-4d3b-b50d-3fb65db89048\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "6f50050a1b31f53b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.699",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.699Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "6f50050a1b31f53b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:11.691",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:11.690",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:11.689",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:11.689Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656301 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:07.686",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:07.686Z",
            "@version": "1",
            "message": "Could not process the command with id 61c825b4-385e-4827-bbeb-c77b486f4be2, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "017876e0bea4bb02",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:07.686",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:07.686Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 59372a77-6820-4d3b-b50d-3fb65db89048\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1d3738be-c8d1-466b-8503-65b564f2fec6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 61c825b4-385e-4827-bbeb-c77b486f4be2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1677857342048327\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 59372a77-6820-4d3b-b50d-3fb65db89048\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "017876e0bea4bb02",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:07.681",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:07.681Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "017876e0bea4bb02",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:07.674",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:07.674",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:07.673Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656301 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:07.674",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:05.672",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.672Z",
            "@version": "1",
            "message": "Could not process the command with id 61c825b4-385e-4827-bbeb-c77b486f4be2, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "a624f42048fc4bc0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.672",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.672Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 59372a77-6820-4d3b-b50d-3fb65db89048\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.04\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1d3738be-c8d1-466b-8503-65b564f2fec6\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 61c825b4-385e-4827-bbeb-c77b486f4be2\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1677857342048327\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 59372a77-6820-4d3b-b50d-3fb65db89048\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "a624f42048fc4bc0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.652",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.651Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "a624f42048fc4bc0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.641",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.641Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656301 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.636",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.636Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1266aa60-59e2-4fa7-838b-17f763d1e797\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.43\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e37621a9-d42d-4b2f-bc13-a724364d2cb0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e09812ba-b7d8-432d-996d-aed9b61ac7c3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1266aa60-59e2-4fa7-838b-17f763d1e797\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "140e2f613ccff5e7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.636",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.636Z",
            "@version": "1",
            "message": "Could not process the command with id e09812ba-b7d8-432d-996d-aed9b61ac7c3, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "140e2f613ccff5e7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.632",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.632Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "140e2f613ccff5e7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.625",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:05.624Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656300 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:05.625",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:05.625",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:04.577",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:04.577Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681749327005081, smeId: null, accountId: [35276b5a-0747-4d4a-baad-1ff34c98a461]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749088c5bc8419813751829f0c320f",
            "spanId": "813751829f0c320f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:02.235",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:02.235Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1684314534614984, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490869bbdeec0fa5aa1b3bb31cb67",
            "spanId": "fa5aa1b3bb31cb67",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:01.621",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:01.621Z",
            "@version": "1",
            "message": "Could not process the command with id e09812ba-b7d8-432d-996d-aed9b61ac7c3, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "4102ff7c49a3b67e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:01.621",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:01.621Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1266aa60-59e2-4fa7-838b-17f763d1e797\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.43\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e37621a9-d42d-4b2f-bc13-a724364d2cb0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e09812ba-b7d8-432d-996d-aed9b61ac7c3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1266aa60-59e2-4fa7-838b-17f763d1e797\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "4102ff7c49a3b67e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:01.618",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:01.618Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "4102ff7c49a3b67e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:01.611",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:47:01.611",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:47:01.610",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:01.61Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656300 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:47:01.220",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:47:01.22Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1684314534614984, smeId: null, accountId: [3b985254-ba58-405a-a02d-3ef855afc4a5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749085af19126d505809591e46bfab",
            "spanId": "505809591e46bfab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.606",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.606Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1266aa60-59e2-4fa7-838b-17f763d1e797\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.43\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: e37621a9-d42d-4b2f-bc13-a724364d2cb0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e09812ba-b7d8-432d-996d-aed9b61ac7c3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1266aa60-59e2-4fa7-838b-17f763d1e797\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "e12212e17b0f0d8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.606",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.606Z",
            "@version": "1",
            "message": "Could not process the command with id e09812ba-b7d8-432d-996d-aed9b61ac7c3, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "e12212e17b0f0d8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.595",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.595Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe1d9a52690686cd523bc7494",
            "spanId": "e12212e17b0f0d8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.582",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.582Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656300 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.577",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.577Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 33506f5d-3f52-445d-bb79-27229408b58c\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8fe7f237-73b5-4cf2-a99c-d9bf6d170af0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: bc175b22-0bb3-42a7-9767-0c4f68f7912a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 33506f5d-3f52-445d-bb79-27229408b58c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "3509325c8883e50f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.577",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.577Z",
            "@version": "1",
            "message": "Could not process the command with id bc175b22-0bb3-42a7-9767-0c4f68f7912a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "3509325c8883e50f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.572",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.572Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "3509325c8883e50f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:59.565",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:59.565",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:59.564",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:59.563Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656299 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:55.561",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:55.56Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 33506f5d-3f52-445d-bb79-27229408b58c\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8fe7f237-73b5-4cf2-a99c-d9bf6d170af0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: bc175b22-0bb3-42a7-9767-0c4f68f7912a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 33506f5d-3f52-445d-bb79-27229408b58c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "2186dc82f7eb4bbe",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:55.561",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:55.56Z",
            "@version": "1",
            "message": "Could not process the command with id bc175b22-0bb3-42a7-9767-0c4f68f7912a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "2186dc82f7eb4bbe",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:55.557",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:55.557Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "2186dc82f7eb4bbe",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:55.550",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:55.550",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:55.549",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:55.549Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656299 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.649",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.547Z",
            "@version": "1",
            "message": "Could not process the command with id bc175b22-0bb3-42a7-9767-0c4f68f7912a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "4e6202e8d546aef1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.649",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.534Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "4e6202e8d546aef1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.649",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.547Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 33506f5d-3f52-445d-bb79-27229408b58c\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.28\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8fe7f237-73b5-4cf2-a99c-d9bf6d170af0\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: bc175b22-0bb3-42a7-9767-0c4f68f7912a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 33506f5d-3f52-445d-bb79-27229408b58c\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc4e664828f963f3953e64f96",
            "spanId": "4e6202e8d546aef1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.649",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.522Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656299 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.520",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.517Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8eba88c0-4efa-4bab-9028-89a75d0d2d11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: edab8d20-a5dc-4a68-908b-d26c9047b1db\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1710306188844465\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "08dc4b388d17c60a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.520",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.512Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "08dc4b388d17c60a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.520",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.517Z",
            "@version": "1",
            "message": "Could not process the command with id edab8d20-a5dc-4a68-908b-d26c9047b1db, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "08dc4b388d17c60a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.505",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:53.505",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:53.504",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.504Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656298 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:53.157",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:53.157Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1685798522523607, smeId: null, accountId: [635d63d9-1fb5-474d-9783-57e2aa492c54]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774907d2b952a324e6be527f88131a7",
            "spanId": "4e6be527f88131a7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:52.299",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:52.298Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1728571071500199, smeId: null, accountId: [f79adbc0-09f5-4ecd-b93d-6de1e239efb2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774907cb77cf95451138d9b9d3e8e33",
            "spanId": "51138d9b9d3e8e33",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:49.501",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:49.501Z",
            "@version": "1",
            "message": "Could not process the command with id edab8d20-a5dc-4a68-908b-d26c9047b1db, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "ec1c99bf280890ef",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:49.501",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:49.501Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8eba88c0-4efa-4bab-9028-89a75d0d2d11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: edab8d20-a5dc-4a68-908b-d26c9047b1db\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1710306188844465\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "ec1c99bf280890ef",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:49.498",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:49.498Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "ec1c99bf280890ef",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:49.491",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:49.491",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:49.490",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:49.49Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656298 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:48.689",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:48.671Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1699509998156702, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749078ae7fe6385b1a55b81feaa9f5",
            "spanId": "5b1a55b81feaa9f5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:48.181",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:48.181Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1719882657765595, smeId: null, accountId: [0ca90cd8-e4e8-49c5-b7a1-ee2565936f20]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490785d3fbb19c27cc1d6f31131d2",
            "spanId": "c27cc1d6f31131d2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.489",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.488Z",
            "@version": "1",
            "message": "Could not process the command with id edab8d20-a5dc-4a68-908b-d26c9047b1db, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "c8e9912c487c9a4a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.488",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.488Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.06\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 8eba88c0-4efa-4bab-9028-89a75d0d2d11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: edab8d20-a5dc-4a68-908b-d26c9047b1db\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1710306188844465\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 055ddd7f-1de6-4ff7-a758-ed9922ca29cd\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "c8e9912c487c9a4a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.478",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.478Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4fe4da826961599fd6dce642",
            "spanId": "c8e9912c487c9a4a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.468",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.468Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656298 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.463",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.463Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c8c55317-e09c-4165-9712-b3008bd3c602\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 18dff363-d61b-43c7-a08c-4669330571de\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ebd79011-2b20-4d34-9e16-462ace84a2ee\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1690705119910886\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c8c55317-e09c-4165-9712-b3008bd3c602\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "abbcc965332da9a3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.463",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.463Z",
            "@version": "1",
            "message": "Could not process the command with id ebd79011-2b20-4d34-9e16-462ace84a2ee, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "abbcc965332da9a3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.459",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.459Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "abbcc965332da9a3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:47.452",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:47.452",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:47.451",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:47.451Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656297 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:45.515",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:45.515Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1699509998156702, smeId: null, accountId: [80db9ec1-1ef7-4e86-b403-a1207e065faa]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749075525de60ed8c6e031927404fd",
            "spanId": "d8c6e031927404fd",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:43.448",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:43.448Z",
            "@version": "1",
            "message": "Could not process the command with id ebd79011-2b20-4d34-9e16-462ace84a2ee, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "ee174c0f2c8dd32c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:43.448",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:43.448Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c8c55317-e09c-4165-9712-b3008bd3c602\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 18dff363-d61b-43c7-a08c-4669330571de\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ebd79011-2b20-4d34-9e16-462ace84a2ee\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1690705119910886\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c8c55317-e09c-4165-9712-b3008bd3c602\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "ee174c0f2c8dd32c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:43.445",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:43.445Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "ee174c0f2c8dd32c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:43.438",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:43.437Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656297 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:43.438",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:43.438",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:41.436",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.436Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c8c55317-e09c-4165-9712-b3008bd3c602\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 18dff363-d61b-43c7-a08c-4669330571de\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: ebd79011-2b20-4d34-9e16-462ace84a2ee\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1690705119910886\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c8c55317-e09c-4165-9712-b3008bd3c602\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "8118e319ff494416",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.436",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.436Z",
            "@version": "1",
            "message": "Could not process the command with id ebd79011-2b20-4d34-9e16-462ace84a2ee, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "8118e319ff494416",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.425",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.425Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f5ae3d578afcf4af6ff5ebe1c",
            "spanId": "8118e319ff494416",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.412",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.412Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656297 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.407",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.406Z",
            "@version": "1",
            "message": "Could not process the command with id e5f6dc7a-a572-4c35-8ae1-1ef08846d812, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "70c2568a605c28ec",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.407",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.406Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.69\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 94ec2efc-e53b-4788-bb3a-92f8789e48b7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e5f6dc7a-a572-4c35-8ae1-1ef08846d812\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1708171592043852\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "70c2568a605c28ec",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.403",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.403Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "70c2568a605c28ec",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:41.396",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:41.396",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:41.395",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:41.395Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656296 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:37.392",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:37.392Z",
            "@version": "1",
            "message": "Could not process the command with id e5f6dc7a-a572-4c35-8ae1-1ef08846d812, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f7ac9b1a7a32126b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:37.392",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:37.392Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.69\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 94ec2efc-e53b-4788-bb3a-92f8789e48b7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e5f6dc7a-a572-4c35-8ae1-1ef08846d812\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1708171592043852\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f7ac9b1a7a32126b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:37.389",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:37.389Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f7ac9b1a7a32126b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:37.382",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:37.382",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:37.381",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:37.381Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656296 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.379",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.379Z",
            "@version": "1",
            "message": "Could not process the command with id e5f6dc7a-a572-4c35-8ae1-1ef08846d812, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f50af5d441480267",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.379",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.379Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.69\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 94ec2efc-e53b-4788-bb3a-92f8789e48b7\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: e5f6dc7a-a572-4c35-8ae1-1ef08846d812\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1708171592043852\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: aee6aee1-c6ee-4d47-a1a0-c2d6db83ed88\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f50af5d441480267",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.369",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.368Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f8d2b0dfefc2b956752ba397c",
            "spanId": "f50af5d441480267",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.359",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.359Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656296 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.354",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.354Z",
            "@version": "1",
            "message": "Could not process the command with id a3978548-2400-49f7-9085-146357c312af, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "cdc734231ee68b15",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.354",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.354Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 20.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f79a935a-d262-4c2a-a19a-9a913d49687a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a3978548-2400-49f7-9085-146357c312af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "cdc734231ee68b15",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.350",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.349Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "cdc734231ee68b15",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:35.342",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:35.342",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:35.341",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:35.341Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656295 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:34.216",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:34.215Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1719901220982089, smeId: null, accountId: [9bbac11e-cbef-4db7-a134-0763c8977f0e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774906a517c854a2b07d47ea5444827",
            "spanId": "2b07d47ea5444827",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:31.338",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:31.338Z",
            "@version": "1",
            "message": "Could not process the command with id a3978548-2400-49f7-9085-146357c312af, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "ac6b5cd2c1297132",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:31.338",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:31.338Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 20.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f79a935a-d262-4c2a-a19a-9a913d49687a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a3978548-2400-49f7-9085-146357c312af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "ac6b5cd2c1297132",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:31.335",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:31.335Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "ac6b5cd2c1297132",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:31.327",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:31.327",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:31.326",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:31.326Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656295 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.784",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.784Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715751337653487, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490656352076bd9ce800dfb22ca87",
            "spanId": "d9ce800dfb22ca87",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.450",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.45Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705371141127206, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749065fcc6e6dbe8865295765d4201",
            "spanId": "e8865295765d4201",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.325",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.324Z",
            "@version": "1",
            "message": "Could not process the command with id a3978548-2400-49f7-9085-146357c312af, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "9ebb7a9a07a6a71b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.324",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.324Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 20.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: f79a935a-d262-4c2a-a19a-9a913d49687a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a3978548-2400-49f7-9085-146357c312af\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 07d8341d-f639-4457-a283-9b1ccabdfb4f\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "9ebb7a9a07a6a71b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.313",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.313Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fe84cc2fb99ce2bc1c227dd89",
            "spanId": "9ebb7a9a07a6a71b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.303",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.303Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656295 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.298",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.298Z",
            "@version": "1",
            "message": "Could not process the command with id 4613fe7b-b777-4cf4-ae30-dd32329ee715, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "366f39ae0c83e3c9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.298",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.298Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b4a6979-5153-40f4-bec5-71d88ae753a5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4613fe7b-b777-4cf4-ae30-dd32329ee715\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1683546095617859\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "366f39ae0c83e3c9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.295",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.295Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "366f39ae0c83e3c9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:29.288",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:29.288",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:29.287",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:29.287Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656294 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:26.314",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:26.314Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1715751337653487, smeId: null, accountId: [347e26ca-4bc9-4551-826e-f8a6e14d15f9]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774906278762eb7a1b23dab523588dc",
            "spanId": "a1b23dab523588dc",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:25.284",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:25.284Z",
            "@version": "1",
            "message": "Could not process the command with id 4613fe7b-b777-4cf4-ae30-dd32329ee715, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "d9204d2a7e9a227a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:25.284",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:25.284Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b4a6979-5153-40f4-bec5-71d88ae753a5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4613fe7b-b777-4cf4-ae30-dd32329ee715\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1683546095617859\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "d9204d2a7e9a227a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:25.281",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:25.281Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "d9204d2a7e9a227a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:25.274",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:25.274",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:25.273",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:25.273Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656294 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:24.813",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:24.813Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1717236241243720, smeId: null, accountId: [74ee135e-a8c0-4b2d-a001-074951712e0a]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774906020730bd232e9927af41cdf57",
            "spanId": "32e9927af41cdf57",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.683",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.683Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1694265901721793, smeId: null, accountId: [ab665d7a-e860-404e-8b92-18af9695b010]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774905faf547a94502d8c60d320b280",
            "spanId": "502d8c60d320b280",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.272",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.271Z",
            "@version": "1",
            "message": "Could not process the command with id 4613fe7b-b777-4cf4-ae30-dd32329ee715, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "c27fc4a95dbf9de3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.271",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.271Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 9b4a6979-5153-40f4-bec5-71d88ae753a5\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 4613fe7b-b777-4cf4-ae30-dd32329ee715\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1683546095617859\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: c691b17f-d3c8-4ef9-9ed7-9ebffbbbee11\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "c27fc4a95dbf9de3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.252",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.252Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "c27fc4a95dbf9de3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.237",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.236Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656294 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.231",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.231Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 29.29\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1c58ce3b-c5eb-4834-a10d-ccd00325cedb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f0e0dc0a-c9bd-474c-b00d-1aad9ced8389\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "a7044bef98bf5e07",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.231",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.231Z",
            "@version": "1",
            "message": "Could not process the command with id f0e0dc0a-c9bd-474c-b00d-1aad9ced8389, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "a7044bef98bf5e07",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.228",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.228Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "a7044bef98bf5e07",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:23.219",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:23.219",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:23.218",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:23.218Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656293 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:19.215",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:19.215Z",
            "@version": "1",
            "message": "Could not process the command with id f0e0dc0a-c9bd-474c-b00d-1aad9ced8389, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "b8210a0389bf57c6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:19.215",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:19.215Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 29.29\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1c58ce3b-c5eb-4834-a10d-ccd00325cedb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f0e0dc0a-c9bd-474c-b00d-1aad9ced8389\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "b8210a0389bf57c6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:19.212",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:19.212Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "b8210a0389bf57c6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:19.205",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:19.205",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:19.204",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:19.204Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656293 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:18.502",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:18.501Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1705371141127206, smeId: null, accountId: [3c8b49d0-3182-4b26-9c6e-4812571adb13]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774905a844899f9b3a7a612e82c0f86",
            "spanId": "b3a7a612e82c0f86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.571",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.571Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1728571071500199, smeId: null, accountId: [f79adbc0-09f5-4ecd-b93d-6de1e239efb2]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490598f385a598469f4ae0e126df4",
            "spanId": "8469f4ae0e126df4",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.202",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.202Z",
            "@version": "1",
            "message": "Could not process the command with id f0e0dc0a-c9bd-474c-b00d-1aad9ced8389, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "21e1f00627347a30",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.202",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.202Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 29.29\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 1c58ce3b-c5eb-4834-a10d-ccd00325cedb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: f0e0dc0a-c9bd-474c-b00d-1aad9ced8389\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1700967468265865\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1160fe9b-141a-43d3-b85c-a4458e4bda53\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "21e1f00627347a30",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.191",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.191Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f88264c0e72631758a1c45e43",
            "spanId": "21e1f00627347a30",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.182",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.181Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656293 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.176",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.176Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 6.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6a011774-54ef-4b7e-88ec-92e213e45e3b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 261ed954-c388-4e1f-8c83-7fff8de53f4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "7f24ac2a5f9b4d7f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.176",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.176Z",
            "@version": "1",
            "message": "Could not process the command with id 261ed954-c388-4e1f-8c83-7fff8de53f4d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "7f24ac2a5f9b4d7f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.173",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.172Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "7f24ac2a5f9b4d7f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:17.164Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656292 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:17.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:17.165",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:16.556",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:16.556Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1719901220982089, smeId: null, accountId: [9bbac11e-cbef-4db7-a134-0763c8977f0e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749058a2882f15a321d337f53a05eb",
            "spanId": "a321d337f53a05eb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:16.140",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:16.14Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1717236241243720, smeId: null, accountId: [24bf2294-0020-4481-acfc-3708f8019680]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490581d435cc53f5fd5bbb3126f4c",
            "spanId": "3f5fd5bbb3126f4c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:14.118",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:14.118Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1720698231010631, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749056c465e1d46fefc8e80c5c727f",
            "spanId": "6fefc8e80c5c727f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:13.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:13.161Z",
            "@version": "1",
            "message": "Could not process the command with id 261ed954-c388-4e1f-8c83-7fff8de53f4d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "90959f2f2c597b3b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:13.161",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:13.161Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 6.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6a011774-54ef-4b7e-88ec-92e213e45e3b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 261ed954-c388-4e1f-8c83-7fff8de53f4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "90959f2f2c597b3b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:13.158",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:13.158Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "90959f2f2c597b3b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:13.150",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:13.150",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:13.149",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:13.149Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656292 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.148",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.147Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 6.07\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 6a011774-54ef-4b7e-88ec-92e213e45e3b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 261ed954-c388-4e1f-8c83-7fff8de53f4d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: bd3d6bcd-88d3-4fc2-9556-de93e55b05fb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "35c5b9426bbfeaa3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.148",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.147Z",
            "@version": "1",
            "message": "Could not process the command with id 261ed954-c388-4e1f-8c83-7fff8de53f4d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "35c5b9426bbfeaa3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.136",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.136Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f6d67de6dfd0f41a7a7a7331e",
            "spanId": "35c5b9426bbfeaa3",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.096",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.096Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656292 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.091",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.091Z",
            "@version": "1",
            "message": "Could not process the command with id da803953-667c-4b33-a035-16e6e315fd3a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "23708300dbc58f86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.091",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.091Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e666634-83ea-491f-9329-edc8f7a8d741\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9c464a3-cb6e-45bd-91ea-47979d934039\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: da803953-667c-4b33-a035-16e6e315fd3a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e666634-83ea-491f-9329-edc8f7a8d741\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "23708300dbc58f86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.088",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.087Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "23708300dbc58f86",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:11.08Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656291 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:11.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": "InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:11.080",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:07.077",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:07.076Z",
            "@version": "1",
            "message": "Could not process the command with id da803953-667c-4b33-a035-16e6e315fd3a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "06c45cb6b961906e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:07.077",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:07.076Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e666634-83ea-491f-9329-edc8f7a8d741\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9c464a3-cb6e-45bd-91ea-47979d934039\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: da803953-667c-4b33-a035-16e6e315fd3a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e666634-83ea-491f-9329-edc8f7a8d741\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "06c45cb6b961906e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:07.072",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:07.072Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "06c45cb6b961906e",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:07.063",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:07.063Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656291 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:07.063",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:07.063",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:06.477",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:06.477Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1684314534614984, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904e1844ed1d13698b4d583edb06",
            "spanId": "13698b4d583edb06",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:06.227",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:06.227Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1691047542196395, smeId: null, accountId: [c6399206-177f-4d39-9e0d-927eb754cadd, 670f9b06-496e-4982-9c18-0659f45abcd5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904e052489bd0bec9ac958fd780a",
            "spanId": "0bec9ac958fd780a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.061",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.061Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 7e666634-83ea-491f-9329-edc8f7a8d741\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.35\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d9c464a3-cb6e-45bd-91ea-47979d934039\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: da803953-667c-4b33-a035-16e6e315fd3a\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 7e666634-83ea-491f-9329-edc8f7a8d741\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "4bbfa4346edf46be",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.061",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.061Z",
            "@version": "1",
            "message": "Could not process the command with id da803953-667c-4b33-a035-16e6e315fd3a, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "4bbfa4346edf46be",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.050",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.05Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f364cc9a3c52d3b353308c7bc",
            "spanId": "4bbfa4346edf46be",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.040",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.04Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656291 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.035",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.035Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: bbb07702-8173-4774-80aa-d857fd820529\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 730347bf-a088-4611-887f-ef19eefa4f5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707052337023347\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "3b53337a740e45b2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.035",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.035Z",
            "@version": "1",
            "message": "Could not process the command with id 730347bf-a088-4611-887f-ef19eefa4f5d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "3b53337a740e45b2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.031",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.031Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "3b53337a740e45b2",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.023",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:05.023",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:05.022",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.022Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656290 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:05.008",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:05.008Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1695441592426635, smeId: null, accountId: [8f060e28-93c1-43ac-859c-312bf967f19e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904d124a86df23c7fd746d152abf",
            "spanId": "23c7fd746d152abf",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:04.715",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:04.715Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1684314534614984, smeId: null, accountId: [3b985254-ba58-405a-a02d-3ef855afc4a5]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904cb76cddb14dd1cb8011d1ab27",
            "spanId": "4dd1cb8011d1ab27",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:03.991",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:03.991Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1691047542196395, smeId: null, accountId: [274796dc-fbe1-457a-842d-3fc6820de949]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904be61106f2fb3f6a2294b1b310",
            "spanId": "fb3f6a2294b1b310",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:03.886",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:03.886Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1720698231010631, smeId: null, accountId: [a640fae1-e918-473a-92eb-987cff9f3f7f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904b8eef6050258bd4ef79630aed",
            "spanId": "258bd4ef79630aed",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:02.074",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:02.074Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1694265901721793, smeId: null, accountId: [ab665d7a-e860-404e-8b92-18af9695b010]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904af5bf8687b7f411c0dc923427",
            "spanId": "b7f411c0dc923427",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:01.162",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:01.162Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1697766222809242, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490493c32f0a97005af587488f8a1",
            "spanId": "7005af587488f8a1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:01.019",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:01.019Z",
            "@version": "1",
            "message": "Could not process the command with id 730347bf-a088-4611-887f-ef19eefa4f5d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "15a9af5b31b2e645",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:01.019",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:01.019Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: bbb07702-8173-4774-80aa-d857fd820529\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 730347bf-a088-4611-887f-ef19eefa4f5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707052337023347\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "15a9af5b31b2e645",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:01.016",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:01.016Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "15a9af5b31b2e645",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:01.009",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:46:01.008",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:46:01.008",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:01.008Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656290 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:46:00.367",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:46:00.366Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681480146495666, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904878ea2d6e3c97edb3f9790eeb",
            "spanId": "3c97edb3f9790eeb",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:59.097",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:59.097Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1697766222809242, smeId: null, accountId: [bbacfcaf-2822-452c-b39c-ceade172a18f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490477a4a5d2bed96204cefe5562a",
            "spanId": "ed96204cefe5562a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:59.006",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:59.006Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 1.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: bbb07702-8173-4774-80aa-d857fd820529\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 730347bf-a088-4611-887f-ef19eefa4f5d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707052337023347\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 1e79f209-0a1e-4caa-ab87-9ac3e00d2740\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ec632d4ba9740578",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:59.006",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:59.006Z",
            "@version": "1",
            "message": "Could not process the command with id 730347bf-a088-4611-887f-ef19eefa4f5d, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ec632d4ba9740578",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.995",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.995Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ec632d4ba9740578",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.985",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.984Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656290 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.979",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.979Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: d40b413b-944b-4464-b8b9-4332a8072861\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 4.15\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 42ad56ba-84a7-4cdd-831d-6249caade67b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1f52040e-2e59-4962-be98-45d428e755e4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: d40b413b-944b-4464-b8b9-4332a8072861\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "132587502df25eac",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.979",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.979Z",
            "@version": "1",
            "message": "Could not process the command with id 1f52040e-2e59-4962-be98-45d428e755e4, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "132587502df25eac",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.976",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.976Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "132587502df25eac",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:58.969",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:58.969",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:58.968",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:58.968Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656289 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:56.882",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:56.882Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1719901220982089, smeId: null, accountId: [9bbac11e-cbef-4db7-a134-0763c8977f0e]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490445a26903edcc9dac356fb5175",
            "spanId": "dcc9dac356fb5175",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:54.965",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:54.965Z",
            "@version": "1",
            "message": "Could not process the command with id 1f52040e-2e59-4962-be98-45d428e755e4, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ff17238b29aa7b16",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:54.965",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:54.964Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: d40b413b-944b-4464-b8b9-4332a8072861\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 4.15\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 42ad56ba-84a7-4cdd-831d-6249caade67b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1f52040e-2e59-4962-be98-45d428e755e4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: d40b413b-944b-4464-b8b9-4332a8072861\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ff17238b29aa7b16",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:54.962",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:54.962Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "ff17238b29aa7b16",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:54.955",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:54.955",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:54.954",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:54.954Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656289 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:54.648",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:54.648Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1695820793797361, smeId: null, accountId: [d8691ac0-c7c2-48f4-b025-26f41d46bc0b]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749042a53215952f2e728efd37eb97",
            "spanId": "2f2e728efd37eb97",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.952",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.952Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: d40b413b-944b-4464-b8b9-4332a8072861\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 4.15\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 42ad56ba-84a7-4cdd-831d-6249caade67b\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 1f52040e-2e59-4962-be98-45d428e755e4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1707053796395990\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: d40b413b-944b-4464-b8b9-4332a8072861\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "4438e30b203064ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.952",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.952Z",
            "@version": "1",
            "message": "Could not process the command with id 1f52040e-2e59-4962-be98-45d428e755e4, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "4438e30b203064ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.941",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.941Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f3f58c4ce1b54015cd6d8744d",
            "spanId": "4438e30b203064ab",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.932",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.932Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656289 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.926",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.926Z",
            "@version": "1",
            "message": "Could not process the command with id a6a7c87c-8dd3-47cb-809a-6749e6f2aa92, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c71ae802baf6b431",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.926",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.926Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 301.80\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 3f0fbc71-c050-4e83-9c00-bb83b0324fa4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a6a7c87c-8dd3-47cb-809a-6749e6f2aa92\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c71ae802baf6b431",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.923",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.923Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c71ae802baf6b431",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.916",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:52.916",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:52.911",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.911Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656288 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:52.136",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:52.136Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1683336900204591, smeId: null, accountId: [279d5e5a-b8d4-4103-8eb2-485cf195072f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774904057133738dfd19022201a4774",
            "spanId": "dfd19022201a4774",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:51.163",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:51.163Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1681480146495666, smeId: null, accountId: [733c303f-ba67-4642-9071-e73c7f912c42]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774903f13c432430584cda5de1dd8d5",
            "spanId": "0584cda5de1dd8d5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:50.999",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:50.999Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1689406904902485, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774903e95196c6e83a4c0fcf863e99f",
            "spanId": "83a4c0fcf863e99f",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:49.757",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:49.757Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1689406904902485, smeId: null, accountId: [02a5b91f-466f-4192-8112-651b523cd9f3]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774903dc42a0146743d0589d38aab61",
            "spanId": "743d0589d38aab61",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:48.908",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:48.908Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 301.80\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 3f0fbc71-c050-4e83-9c00-bb83b0324fa4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a6a7c87c-8dd3-47cb-809a-6749e6f2aa92\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "5f8376ceb6c2ae22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:48.908",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:48.908Z",
            "@version": "1",
            "message": "Could not process the command with id a6a7c87c-8dd3-47cb-809a-6749e6f2aa92, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "5f8376ceb6c2ae22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:48.905",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:48.905Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "5f8376ceb6c2ae22",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:48.898",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:48.898",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:48.897",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:48.897Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656288 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:48.283",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:48.283Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1697766222809242, smeId: null, accountId: [bbacfcaf-2822-452c-b39c-ceade172a18f]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774903c3cef5a8676bb60bdb9f5332a",
            "spanId": "76bb60bdb9f5332a",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.896",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.895Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 301.80\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 3f0fbc71-c050-4e83-9c00-bb83b0324fa4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a6a7c87c-8dd3-47cb-809a-6749e6f2aa92\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 798d1237-ae09-4dff-952c-f3ed5c9a5cb4\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c013fa09d45c0afd",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.896",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.895Z",
            "@version": "1",
            "message": "Could not process the command with id a6a7c87c-8dd3-47cb-809a-6749e6f2aa92, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c013fa09d45c0afd",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.885",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.884Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244fc8c49f7eef8a7ee6440a3b67",
            "spanId": "c013fa09d45c0afd",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.874",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.873Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656288 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.869",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.868Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b335991-d464-45f8-9d0f-26c28a34ab27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 2.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 120ff7d1-ac8e-46d5-9d49-45e0e6914e90\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b335991-d464-45f8-9d0f-26c28a34ab27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "30e6386d0ff99f54",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.869",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.868Z",
            "@version": "1",
            "message": "Could not process the command with id c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "30e6386d0ff99f54",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.866",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.866Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "30e6386d0ff99f54",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:46.858",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:46.858",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:46.857",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:46.857Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656287 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:45.319",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:45.318Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725199361189062, smeId: null, accountId: []",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749039777e0dc232a8a56574d515c6",
            "spanId": "32a8a56574d515c6",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:43.157",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:43.156Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725199361189062, smeId: null, accountId: [7c5e9881-cd81-46c7-8d6c-ef0291b56cf4]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774903773fb6c0e58cb395cfdf854f9",
            "spanId": "58cb395cfdf854f9",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.854",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.853Z",
            "@version": "1",
            "message": "Could not process the command with id c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "ccd45de7191bca9b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.853",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.853Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b335991-d464-45f8-9d0f-26c28a34ab27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 2.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 120ff7d1-ac8e-46d5-9d49-45e0e6914e90\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b335991-d464-45f8-9d0f-26c28a34ab27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "ccd45de7191bca9b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.850",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.85Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "ccd45de7191bca9b",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.844",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:42.844",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:42.843",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.843Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656287 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.719",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.719Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1729659483717630, smeId: null, accountId: [9c233a9a-1943-43b8-b994-56534a485d12]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749036bea89ee0552eeb255b6c02d7",
            "spanId": "552eeb255b6c02d7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:42.260",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:42.26Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725085125115354, smeId: null, accountId: [97391536-12c1-448c-9b1c-4355a0ccb412]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "67749036f89236b25e60906d059a4ca7",
            "spanId": "5e60906d059a4ca7",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.841",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.841Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 2b335991-d464-45f8-9d0f-26c28a34ab27\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 2.32\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 120ff7d1-ac8e-46d5-9d49-45e0e6914e90\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1716694849718995\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 2b335991-d464-45f8-9d0f-26c28a34ab27\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "baf89d5daeae76c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.841",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.841Z",
            "@version": "1",
            "message": "Could not process the command with id c1ea6ba9-8b89-4462-b7d3-d7cc96a0c0cb, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "baf89d5daeae76c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.830",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.83Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f4d152d2d8905096e0eac00d4",
            "spanId": "baf89d5daeae76c8",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.821",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.82Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656287 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.815",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.815Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d2855a54-bba1-4702-9354-d68c2b4e2709\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1706668902065310\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "f91ab4307abea0b5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.815",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.815Z",
            "@version": "1",
            "message": "Could not process the command with id 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "f91ab4307abea0b5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.809",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.809Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "f91ab4307abea0b5",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:40.802",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:40.802",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:40.801",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:40.801Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656286 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:37.355",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:37.355Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1708482677531952, smeId: null, accountId: [8482d72e-198a-4fc4-833e-e393d0082147]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490315df00b05e4d9b1f69b739b8c",
            "spanId": "e4d9b1f69b739b8c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.983",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.983Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1694265901721793, smeId: null, accountId: [ab665d7a-e860-404e-8b92-18af9695b010]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490300645177b6425de6bd93113a0",
            "spanId": "6425de6bd93113a0",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.798",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.798Z",
            "@version": "1",
            "message": "Could not process the command with id 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "0ef0895c0ccc3a9c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.798",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.798Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d2855a54-bba1-4702-9354-d68c2b4e2709\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1706668902065310\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "0ef0895c0ccc3a9c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.795",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.795Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "0ef0895c0ccc3a9c",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.787",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:36.787",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:36.787",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.786Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656286 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:36.401",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:36.401Z",
            "@version": "1",
            "message": "Received getTransaction request for customerId: 1725199361189062, smeId: null, accountId: [7c5e9881-cd81-46c7-8d6c-ef0291b56cf4]",
            "logger_name": "com.arbm.digibank.controller.TransactionController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "677490304887db501a081731581b0b2d",
            "spanId": "1a081731581b0b2d",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.785",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.785Z",
            "@version": "1",
            "message": "Could not process the command with id 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "1005ccf58ddc69c1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.785",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.785Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 0.03\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: d2855a54-bba1-4702-9354-d68c2b4e2709\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: 6cc9565a-b53a-4a1a-a6cb-4a8a48f9bcfa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1706668902065310\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: b01bcf89-3c3c-4f34-ba7c-9941a43829fa\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "1005ccf58ddc69c1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.774",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.774Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "1005ccf58ddc69c1",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.763",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.763Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656286 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.758",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.758Z",
            "@version": "1",
            "message": "Could not process the command with id a8c8dfdc-a2c6-4905-8ea3-46606b9c6bd3, reason: org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "77628a711b774c18",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.758",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.758Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 327173a3-83f6-4f38-927a-08ae2910c287\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.75\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 438ea1ac-cd86-4b92-a913-32ce224e827d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a8c8dfdc-a2c6-4905-8ea3-46606b9c6bd3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1714449012374056\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 327173a3-83f6-4f38-927a-08ae2910c287\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "77628a711b774c18",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.755",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.754Z",
            "@version": "1",
            "message": "CreateTransactionCommand caught",
            "logger_name": "com.arbm.digibank.processor.TransactionCommandProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "77628a711b774c18",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:34.744",
        "kubernetes.container_name": "transaction-service",
        "logBody": "(InvocableHandlerMethod.java:169)\\n\\t\\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\\n\\t\\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\\n\\t\\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\\n\\t\\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\\n\\t\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\\n\\t\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\\n\\t\\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$dc6703a2.onMessage(<generated>)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\\n\\t\\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\\n\\t\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\t\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries \\n\\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1047)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)\\n\\tat io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)\\n\\tat io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:971)\\n\\tat io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:66)\\n\\tat io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:471)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)\\n\\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)\\n\\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)\\n\\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:605)\\n\\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\\n\\tat io.netty.resolver.dns.DnsQueryContext.trySuccess(DnsQueryContext.java:232)\\n\\tat io.netty.resolver.dns.DnsQueryContext.finish(DnsQueryContext.java:224)\\n\\tat io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler.channelRead(DnsNameResolver.java:1314)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.processPacket(EpollDatagramChannel.java:648)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.recvmsg(EpollDatagramChannel.java:683)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel.access$300(EpollDatagramChannel.java:55)\\n\\tat io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe.epollInReady(EpollDatagramChannel.java:522)\\n\\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"transaction-service\",\"bc\":\"shared\"}"
    },
    {
        "@timestamp": "2025-01-01 00:45:34.744",
        "kubernetes.container_name": "transaction-service",
        "logBody": ""
    },
    {
        "@timestamp": "2025-01-01 00:45:34.743",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:34.743Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-transaction_events-1, groupId=transaction_events] Seeking to offset 3656285 for partition pfm.transaction-service.create-transaction-command.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-service",
            "bc": "shared"
        }
    },
    {
        "@timestamp": "2025-01-01 00:45:30.740",
        "kubernetes.container_name": "transaction-service",
        "logBody": {
            "@timestamp": "2025-01-01T00:45:30.74Z",
            "@version": "1",
            "message": "Error response from MoneyThor syncbackendtransactions endpoint. Failed while sending transaction: class SynchronizeBackendTransactions {\n    mode: JsonNullable.undefined\n    source: class Source {\n        name: ARBMY\n    }\n    customer: JsonNullable.undefined\n    account: class SynchronizeAccount {\n        number: 327173a3-83f6-4f38-927a-08ae2910c287\n        name: JsonNullable.undefined\n        description: JsonNullable.undefined\n        currency: JsonNullable.undefined\n        type: JsonNullable.undefined\n        limit: JsonNullable.undefined\n        balance: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: JsonNullable.undefined\n    }\n    transactions: [class SynchronizeTransaction {\n        date: 2024-12-31\n        extraction: 2024-12-31T15:59:59.000+0000\n        type: JsonNullable.undefined\n        description: PROFIT\n        movement: credit\n        currency: MYR\n        amount: 5.75\n        balance: JsonNullable.undefined\n        authorization: JsonNullable.undefined\n        status: JsonNullable.undefined\n        customFields: [class CustomField {\n            name: transaction_id\n            value: 438ea1ac-cd86-4b92-a913-32ce224e827d\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: reference_id\n            value: a8c8dfdc-a2c6-4905-8ea3-46606b9c6bd3\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: status\n            value: COMMITTED\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: type\n            value: PROFIT\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_customer_id\n            value: 1714449012374056\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }, class CustomField {\n            name: dst_account_id\n            value: 327173a3-83f6-4f38-927a-08ae2910c287\n            immutable: JsonNullable.undefined\n            core: JsonNullable.undefined\n        }]\n        splitTransactions: JsonNullable.undefined\n    }]\n}, error: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ; nested exception is java.net.UnknownHostException: Failed to resolve 'fpm.moneythor-fpm.svc.cluster.local' after 2 queries ",
            "logger_name": "com.arbm.digibank.moneythor.service.TransactionService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-service",
            "traceId": "6774244f2c3fe6cb850de5e06463e13f",
            "spanId": "c393ef687df8dfcc",
            "bc": "shared"
        }
    }
]