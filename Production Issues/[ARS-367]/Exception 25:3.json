[
    {
        "@timestamp": "2025-03-25 06:33:32.448",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.448Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:32.344",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.344Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:32.344",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.344Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:32.344",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.344Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:32.254",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.253Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:32.049",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:32.048Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.945",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.944Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.945",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.944Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.945",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.944Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.893",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.893Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.688",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.688Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.583",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.583Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.583",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.583Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.583",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.582Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.533",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.532Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.328",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.328Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.224",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.224Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.224",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.224Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.224",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.223Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:31.158",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:31.158Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.953",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.953Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.850",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.849Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.850",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.849Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.849",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.849Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.801",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.8Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.595",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.595Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.491",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.491Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.491",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.491Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.491",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.491Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.429",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.429Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.224",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.224Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.121",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.12Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.120",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.12Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.120",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.12Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:30.072",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:30.072Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.867",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.867Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.763",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.763Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.763",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.763Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.763",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.763Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.713",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.713Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.508",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.508Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.404",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.404Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.404",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.404Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.404",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.404Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.351",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.351Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.146",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.146Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.042Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.042Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:29.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:29.042Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.986",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.986Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.781",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.781Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.677",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.676Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.677",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.676Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.677",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.676Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.623",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.622Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.418",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.418Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.314",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.314Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.314",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.314Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.314",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.313Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.235",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.235Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:28.030",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:28.03Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.926",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.925Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.925",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.925Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.925",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.925Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.856",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.856Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.722",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.651Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.645",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.547Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.645",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.547Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:27.645",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:27.547Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.468",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.468Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.364Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.364Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.364Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.316",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.316Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.111",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.111Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.008",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.007Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.007",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.007Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:22.007",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:22.007Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.958",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.958Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.753",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.753Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.649",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.648Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.649",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.648Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.648",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.648Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.590",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.59Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.385",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.384Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.281",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.28Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.281",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.28Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.281",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.28Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.221",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.22Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:21.015",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:21.015Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.912",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.911Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.912",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.911Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.912",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.911Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.861",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.861Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.656",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.656Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.552",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.552Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.552",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.552Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.552",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.552Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.497",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.496Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.292",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.291Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.188",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.188Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.188",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.188Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.188",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.187Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:20.136",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:20.136Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.931",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.931Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.827",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.827Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.827",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.827Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.827",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.826Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.778",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.778Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.573",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.573Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.469",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.469Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.469",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.469Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.469",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.469Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.401",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.4Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.196",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.196Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.092",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.092Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.092",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.092Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.092",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.092Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:19.036",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:19.036Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.832",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.831Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.728",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.728Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.728",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.728Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.728",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.727Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.670",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.67Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.465",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.465Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.361",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.361Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.361",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.361Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.361",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.361Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.286",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.286Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:18.063",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:18.063Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.959Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.958Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.958Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.852",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.852Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.660",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.647Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.647",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.543Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.647",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.543Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:33:17.647",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:33:17.543Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:57.335",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:57.335Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:57.231",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:57.231Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:57.231",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:57.231Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:57.231",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:57.231Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:57.167",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:57.167Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.960",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.959Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.856",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.855Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.856",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.855Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.856",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.855Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.807",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.807Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.602",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.602Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.498",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.497Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.497",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.497Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.497",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.497Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.447",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.447Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.243",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.242Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.138",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.137Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.138",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.137Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.137",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.137Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:56.080",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:56.08Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.875",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.875Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.771",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.771Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.771",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.771Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.771",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.771Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.711",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.711Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.532",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.531Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.532",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.531Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.531",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.531Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.506",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.506Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.481",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.481Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.402",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.402Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.402",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.402Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.402",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.402Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.351",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.35Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.276",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.276Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.172",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.172Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.172",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.172Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.172",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.172Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.146",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.145Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.122",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.122Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.041Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.041Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:55.042",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:55.041Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.992",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.992Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.917",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.917Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.812",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.812Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.812",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.812Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.812",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.811Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.787",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.787Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.752",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.752Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.683",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.682Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.683",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.683Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.683",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.683Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.629",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.629Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.544",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.544Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.440",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.44Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.440",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.44Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.440",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.44Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.424",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.424Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.392",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.392Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.320",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.32Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.320",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.32Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.320",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.32Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.270",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.269Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.187",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.187Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.083",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.083Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.083",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.083Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.083",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.083Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.065",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.064Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:54.034",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:54.034Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.960",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.959Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.959Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.959Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.903",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.902Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.829Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.726",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.725Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.725",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.725Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.725",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.725Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.698",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.698Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.673",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.673Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.594",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.593Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.594",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.594Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.594",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.594Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.545",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.544Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.468",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.468Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.364Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.364Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.364",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.363Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.340",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.339Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.311",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.31Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.236",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.235Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.236",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.235Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.236",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.236Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.185",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.185Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.106",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.106Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.002",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.002Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.002",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.002Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:53.002",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:53.002Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.981",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.98Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.935",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.935Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.877",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.876Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.877",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.877Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.877",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.877Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.821",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.821Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.730",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.73Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.651",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.616Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.625Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.625Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.625Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.560",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.56Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.353",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.353Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.248",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.248Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.248",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.248Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.248",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.248Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:52.193",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:52.193Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.984",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.984Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.880",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.88Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.880",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.88Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.880",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.88Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.829Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.625",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.625Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.521",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.521Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.521",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.521Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.521",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.52Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.467",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.467Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.262",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.262Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.158",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.158Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.158",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.158Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.158",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.158Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:51.107",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:51.107Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.902",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.902Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.857",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.799Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.857",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.799Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.857",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.799Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.857",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.741Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.540",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.537Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.432",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.432Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.432",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.432Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.432",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.432Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.382",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.382Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.177",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.177Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.073",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.073Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.073",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.073Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.073",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.072Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:50.022",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:50.021Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.817",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.817Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.712Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.712Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.712Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.653",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.652Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.447",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.447Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.344",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.343Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.343",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.343Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.343",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.343Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.295",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.295Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:49.090",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:49.09Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.986Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.986Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.986Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.937",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.937Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.733",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.732Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.629",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.628Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.629",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.628Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.628Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.579",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.579Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.374",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.374Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.270",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.27Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.270",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.27Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.270",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.27Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:48.195",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:48.195Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.989",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.989Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.885",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.885Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.885",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.885Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.885",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.885Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.830",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.83Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.625",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.625Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.522",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.521Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.522",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.522Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.522",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.522Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.463",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.463Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.258",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.258Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.155",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.154Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.155",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.155Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.155",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.155Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:47.104",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:47.104Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.899",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.899Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.796",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.795Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.796",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.795Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.795",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.795Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.748",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.747Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.543",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.543Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.439",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.439Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.439",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.439Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.439",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.439Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.376",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.376Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.171",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.171Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.067",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.067Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.067",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.067Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.067",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.067Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:46.001",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:46.001Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.915",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.796Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.901",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.636Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.901",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.692Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.901",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.692Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.901",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.692Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.431",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.431Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.328",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.327Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.328",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.328Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.328",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.328Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.275",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.275Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:45.070",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:45.07Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.966",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.966Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.966",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.966Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.966",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.966Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.916",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.915Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.710",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.71Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.606",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.606Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.606",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.606Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.606",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.606Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.541",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.541Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.336",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.336Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.232",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.232Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.232",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.232Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.232",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.232Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:44.175",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:44.175Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.970",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.97Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.866",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.866Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.866",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.866Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.866",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.866Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.810",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.81Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.605",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.605Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.502",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.501Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.502",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.501Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.501",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.501Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.433",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.433Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.228",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.228Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.124",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.123Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.124",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.123Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.123",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.123Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:43.074",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:43.074Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.869",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.869Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.766",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.765Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.765",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.765Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.765",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.765Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.704",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.703Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.499",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.498Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.394Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.394Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.394Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.347",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.347Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.142",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.142Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.038",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.037Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.038",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.038Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:42.038",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:42.038Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.976",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.975Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.770",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.77Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.666",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.666Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.666",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.666Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.666",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.666Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.617",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.617Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.412",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.412Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.308",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.307Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.308",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.308Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.308",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.308Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.249",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.249Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:41.044",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:41.044Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.940",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.939Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.940",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.939Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.940",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.94Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.886",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.885Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.682",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.681Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.577Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.577Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.633",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.577Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.516",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.516Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.308",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.308Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.205",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.204Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.205",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.205Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.205",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.205Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:40.149",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:40.148Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.944",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.944Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.840",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.84Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.840",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.84Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.840",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.84Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.787",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.787Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.581",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.581Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.478",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.477Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.478",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.477Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.478",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.477Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.413",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.412Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.208",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.208Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.105",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.104Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.105",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.104Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.104",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.104Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:39.054",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:39.054Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.849",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.849Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.746",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.745Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.746",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.745Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.745",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.745Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.690",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.69Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.485",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.484Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.381",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.381Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.381",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.381Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.381",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.381Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.328",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.328Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.122",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.122Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.019",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.018Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.019",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.018Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:38.018",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:38.018Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.949",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.949Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.744",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.744Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.640",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.64Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.640",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.64Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.640",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.64Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.580",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.58Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.493",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.493Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.376",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.376Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.288",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.288Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.272",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.272Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.272",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.272Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.272",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.272Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.221",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.221Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.184",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.183Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.184",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.184Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.184",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.184Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.130",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.13Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:37.017",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:37.016Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.925",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.925Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.913",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.913Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.913",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.913Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.913",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.913Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.852",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.852Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.821",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.821Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.821",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.821Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.821",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.821Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.771",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.771Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.648",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.647Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.566",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.566Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.544",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.543Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.544",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.543Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.543",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.543Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.491",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.491Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.462",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.462Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.462",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.462Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.462",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.462Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.410",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.41Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.287",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.286Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.205",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.205Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.183",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.182Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.183",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.183Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.183",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.183Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.113",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.113Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.101",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.101Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.101",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.101Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.101",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.101Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:36.051",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:36.051Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.908",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.908Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.847",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.846Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.813",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.751Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.813",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.804Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.813",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.804Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.813",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.804Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.742",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.742Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.742",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.742Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.742",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.742Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.692",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.692Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.654",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.546Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.475",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.475Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.437",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.437Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.437",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.437Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.437",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.437Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.383",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.383Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.371Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.371Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.371Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.317",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.317Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.178",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.178Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.112",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.112Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.074",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.074Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.074",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.074Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.074",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.073Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.022",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.022Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.008",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.007Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.008",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.007Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:35.008",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:35.007Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.944",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.943Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.817",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.816Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.738",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.738Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.712Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.712Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.711Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.662",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.661Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.634Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.634Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.634Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.572",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.572Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.457Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.367",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.367Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.354",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.353Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.354",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.353Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.353",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.353Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.294",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.294Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.264",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.263Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.264",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.263Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.263",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.263Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.203",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.203Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:34.089",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:34.089Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.998",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.997Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.985",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.985Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.985",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.985Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.985",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.985Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.935",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.935Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.893",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.893Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.893",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.893Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.893",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.893Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.843",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.843Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.730",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.73Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.638",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.638Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.626",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.626Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.626",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.626Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.626",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.626Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.576",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.576Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.534",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.534Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.534",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.534Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.534",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.534Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.463",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.463Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.371Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.267",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.267Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.267",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.267Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.267",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.267Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.215",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.214Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:33.010",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:33.01Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.906",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.906Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.906",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.906Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.906",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.906Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.855",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.855Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.650",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.65Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.547",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.546Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.547",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.546Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.546",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.546Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.496",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.496Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.290",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.29Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.186",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.186Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.186",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.186Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.186",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.185Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:32.132",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:32.132Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.928",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.928Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.824",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.824Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.824",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.824Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.824",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.824Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.771",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.771Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.566",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.566Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.463",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.462Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.463",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.462Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.462",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.462Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.404",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.404Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.199",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.199Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.095",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.095Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.095",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.095Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.095",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.095Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:31.036",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:31.036Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.832",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.831Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.726",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.725Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.726",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.725Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.726",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.725Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.670",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.659Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.454",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.454Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.350",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.35Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.350",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.35Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.350",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.35Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.296",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.295Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:30.091",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:30.091Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.987Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.987Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.987",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.987Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.937",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.936Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.732",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.732Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.627Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.628",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.627Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.627",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.627Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.553",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.553Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.348",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.348Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.245",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.244Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.244",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.244Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.244",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.244Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:29.194",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:29.194Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.989",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.989Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.886",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.886Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.886",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.886Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.886",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.885Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.829Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.624",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.624Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.520",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.52Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.520",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.52Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.520",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.52Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.471",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.471Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.266",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.265Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.162",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.161Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.162",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.161Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.162",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.161Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:28.112",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:28.112Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.907",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.907Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.804",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.803Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.804",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.803Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.804",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.803Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.747",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.746Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.541",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.541Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.436",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.436Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.436",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.436Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.436",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.436Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.385",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.385Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.180",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.18Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.075",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.075Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.075",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.075Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.075",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.075Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:27.014",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:27.014Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.809",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.809Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.705",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.705Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.705",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.705Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.705",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.705Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.651",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.651Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.447",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.446Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.342",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.342Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.342",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.342Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.342",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.342Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.288",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.288Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:26.084",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:26.084Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.980",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.979Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.980",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.979Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.979",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.979Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.920",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.92Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.716",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.715Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.667",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.611Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.667",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.611Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.667",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.611Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:25.667",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:25.559Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.457Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.457Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.457Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.407",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.407Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.202",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.202Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.098Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.098Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.098Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:22.049",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:22.049Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.844",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.844Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.740",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.74Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.740",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.74Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.740",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.74Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.691",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.69Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.486",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.486Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.382",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.382Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.382",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.382Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.382",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.382Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.303",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.303Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:21.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:21.098Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.994",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.994Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.994",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.994Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.994",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.994Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.939",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.939Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.734",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.734Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.630",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.63Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.630",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.63Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.630",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.63Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.577",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.577Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.481",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.481Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.481",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.481Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.481",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.481Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.431",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.431Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.372",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.372Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.269",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.268Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.269",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.268Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.268",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.268Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.226",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.226Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.217",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.217Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.123",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.122Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.123",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.122Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.123",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.122Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.068",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.068Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:20.012",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:20.012Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.908",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.908Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.908",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.908Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.908",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.908Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.863",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.863Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.841",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.841Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.759",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.759Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.759",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.759Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.759",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.759Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.681",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.681Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.636",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.636Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.532",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.532Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.532",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.532Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.532",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.532Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.478",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.478Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.475",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.475Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.37Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.371",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.37Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.370",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.37Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.320",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.32Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.273",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.273Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.169",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.169Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.169",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.169Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.169",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.169Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.119",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.119Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.116",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.116Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.012",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.012Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.012",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.012Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:19.012",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:19.012Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.959",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.958Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.914",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.914Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.810",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.81Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.810",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.81Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.810",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.81Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.765",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.765Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.754",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.754Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.650",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.649Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.650",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.649Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.649",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.649Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.598",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.598Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.560",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.56Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.456Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.457",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.456Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.456",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.456Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.406",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.406Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.393",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.393Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.290",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.289Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.290",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.289Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.290",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.289Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.240",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.239Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.200",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.2Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.096",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.096Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.096",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.096Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.096",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.096Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.036",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.036Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:18.035",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:18.034Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.931",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.931Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.931",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.931Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.931",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.931Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.856",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.856Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.831",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.831Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.727",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.727Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.727",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.727Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.727",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.727Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.717",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.667Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.651",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.651Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.548",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.547Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.547",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.547Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.547",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.547Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.494",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.494Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.462",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.462Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.358",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.358Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.358",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.358Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.358",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.358Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.304",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.304Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.289",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.289Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.186",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.185Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.186",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.185Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.185",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.185Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.138",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.137Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:17.099",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:17.099Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.995",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.995Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.995",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.995Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.995",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.995Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.942",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.942Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.933",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.932Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.829Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.829Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.829",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.829Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.779",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.779Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.738",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.738Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.633Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.633Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.634",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.634Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.574",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.574Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.533",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.532Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.470",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.47Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.470",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.47Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.470",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.47Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.414",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.414Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.327",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.327Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.223",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.223Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.223",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.223Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.223",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.223Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.209",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.209Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.166",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.166Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.105",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.104Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.105",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.104Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.104",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.104Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:16.050",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:16.05Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.958",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.957Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.854",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.853Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.854",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.853Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.854",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.854Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.845",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.845Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.782",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.782Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.782",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.742Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.782",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.742Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.782",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.741Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.782",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.678Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.577",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.577Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.473",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.473Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.473",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.473Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.473",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.473Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.473",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.473Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.407",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.407Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.369",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.369Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.369",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.369Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.369",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.369Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.313",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.313Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.202",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.202Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.108",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.108Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.098Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.098Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.098",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.098Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.036",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.036Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.004",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.004Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.004",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.004Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:15.004",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:15.004Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.952",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.952Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.831",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.831Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.747",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.747Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.727",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.726Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.727",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.726Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.726",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.726Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.664",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.664Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.644",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.643Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.644",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.643Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.644",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.643Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.547",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.547Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.459",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.459Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.355",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.355Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.355",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.355Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.355",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.355Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.342",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.342Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.302",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.301Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.238",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.238Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.238",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.238Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.238",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.238Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.183",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.183Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:14.097",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:14.096Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.992",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.991Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.992",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.992Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.992",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.992Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.977",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.977Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.925",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.925Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.873",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.873Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.873",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.873Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.873",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.873Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.818",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.818Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.721",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.72Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.616",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.615Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.616",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.616Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.616",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.616Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.614",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.613Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.561",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.561Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.509",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.509Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.509",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.509Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.509",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.509Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.442",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.441Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.356",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.356Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.252",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.252Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.252",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.252Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.252",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.252Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.237",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.237Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.199",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.199Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.133",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.133Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.133",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.132Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.133",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.133Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:13.067",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:13.067Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.994",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.994Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.890",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.89Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.890",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.89Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.890",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.89Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.861",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.861Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.835",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.757",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.757Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.757",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.757Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.757",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.757Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.703",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.703Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.650",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.63Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.527",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.526Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.527",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.526Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.527",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.526Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.499",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.499Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.475",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.474Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.395Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.395Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.395",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.395Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.336",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.336Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.267",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.267Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.163",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.163Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.163",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.163Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.163",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.163Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.128",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.128Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.103",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.102Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.024",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.024Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.024",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.024Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:12.024",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:12.024Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.972",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.972Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.898",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.897Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.793",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.792Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.793",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.792Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.793",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.792Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.767",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.767Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.735",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.735Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.663",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.663Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.663",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.663Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.663",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.663Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.611",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.61Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.530",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.53Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.426",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.426Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.426",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.426Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.426",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.426Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.406",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.406Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.376",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.376Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.302",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.302Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.302",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.302Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.302",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.302Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.242",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.242Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.171",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.171Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.066",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.066Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.066",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.066Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.066",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.066Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.037",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.037Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:11.011",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:11.011Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.933",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.933Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.933",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.933Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.933",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.933Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.883",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.877Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.806",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.806Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.673Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.569Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.712",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.569Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.711",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.569Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.702",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.702Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.702",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.702Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.702",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.702Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.650",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.65Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.515",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.515Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.445",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.445Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.341",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.341Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.341",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.341Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.341",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.341Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.310",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.31Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.275",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.274Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.203",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.203Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.203",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.203Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.203",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.203Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.150",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.15Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:10.069",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:10.069Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.965",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.965Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.965",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.965Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.965",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.965Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.946",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.946Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.912",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.912Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.842",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.841Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.841",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.841Z",
            "@version": "1",
            "message": "Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.841",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.841Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.791",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.79Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-v2-1, groupId=onboarding-service-v2] Seeking to offset 58148 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.707",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.707Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.602",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.602Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-onboarding-service-6, groupId=onboarding-service] Seeking to offset 58138 for partition payments.transfer.inbound.initial.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-03-25 06:32:09.602",
        "kubernetes.container_name": "onboarding-service",
        "logBody": {
            "@timestamp": "2025-03-25T06:32:09.602Z",
            "@version": "1",
            "message": "Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58138) should be recovererd, including in seeks",
            "logger_name": "org.springframework.kafka.listener.DefaultErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58138\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "onboarding-service",
            "bc": "customers"
        }
    }
]