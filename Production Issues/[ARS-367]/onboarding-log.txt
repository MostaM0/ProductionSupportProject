{"@timestamp":"2025-03-24T07:03:41.475Z","@version":"1","message":"Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148","logger_name":"org.springframework.kafka.listener.DeadLetterPublishingRecoverer","thread_name":"org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1","level":"ERROR","level_value":40000,"stack_trace":"com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Exception occurred while fetching or registering schema definition = {\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.arbm.digibank.producer.generated.avro.model\",\"fields\":[{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"lifecycleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAccountId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tmCreatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"otherSideFullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otherSideExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}, schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:99)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistrySerializationFacade.getOrRegisterSchemaVersion(GlueSchemaRegistrySerializationFacade.java:86)\n\tat com.amazonaws.services.schemaregistry.serializers.GlueSchemaRegistryKafkaSerializer.serialize(GlueSchemaRegistryKafkaSerializer.java:113)\n\tat org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)\n\tat org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:954)\n\tat org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:914)\n\tat brave.kafka.clients.TracingProducer.send(TracingProducer.java:129)\n\tat org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1087)\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:655)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Failed to get schemaVersionId by schema definition for schema name = payments.transfer.inbound.initial.v1.DLT \n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:148)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:110)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher$SchemaDefinitionToVersionCache.load(SchemaByDefinitionFetcher.java:106)\n\tat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3449)\n\tat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2198)\n\tat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2157)\n\tat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2047)\n\tat com.google.common.cache.LocalCache.get(LocalCache.java:3853)\n\tat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3876)\n\tat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4778)\n\tat com.amazonaws.services.schemaregistry.common.SchemaByDefinitionFetcher.getORRegisterSchemaVersionId(SchemaByDefinitionFetcher.java:74)\n\t... 31 common frames omitted\nCaused by: com.amazonaws.services.schemaregistry.exception.AWSSchemaRegistryException: Schema Found but status is FAILURE\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.returnSchemaVersionIdIfAvailable(AWSSchemaRegistryClient.java:195)\n\tat com.amazonaws.services.schemaregistry.common.AWSSchemaRegistryClient.getSchemaVersionIdByDefinition(AWSSchemaRegistryClient.java:145)\n\t... 41 common frames omitted\n","springAppName":"onboarding-service","bc":"customers"}
{"@timestamp":"2025-03-24T07:03:41.475Z","@version":"1","message":"Failed to determine if this record (payments.transfer.inbound.initial.v1-0@58148) should be recovererd, including in seeks","logger_name":"org.springframework.kafka.listener.DefaultErrorHandler","thread_name":"org.springframework.kafka.KafkaListenerEndpointContainer#6-0-C-1","level":"ERROR","level_value":40000,"stack_trace":"org.springframework.kafka.KafkaException: Dead-letter publication to payments.transfer.inbound.initial.v1.DLTfailed for: payments.transfer.inbound.initial.v1-0@58148\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.FailedRecordTracker.attemptRecovery(FailedRecordTracker.java:228)\n\tat org.springframework.kafka.listener.FailedRecordTracker.recovered(FailedRecordTracker.java:183)\n\tat org.springframework.kafka.listener.SeekUtils.lambda$doSeeks$5(SeekUtils.java:107)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.springframework.kafka.listener.SeekUtils.doSeeks(SeekUtils.java:104)\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:207)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\n","springAppName":"onboarding-service","bc":"customers"}