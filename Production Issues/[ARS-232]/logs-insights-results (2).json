[
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.563Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=3cd1522d-cfd1-46db-8b81-e8eb76128d94, createRequestId=O20250109RJHIMYKL010ORM91006802, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006802, postingInstructions=[PostingInstruction(id=02c3e611-5cae-4f52-8e5f-478e6c6b8137, clientTransactionId=63583620-1875-46c4-8dd2-f34ae030aeae, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006802, cdtracctTpPrtry=CCRD, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=5000, denomination=MYR, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=5000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=5000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006802}, valueTimestamp=2025-01-09T15:27:48.732867Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:27:48.732867Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.563Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=02c3e611-5cae-4f52-8e5f-478e6c6b8137, clientTransactionId=63583620-1875-46c4-8dd2-f34ae030aeae, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006802, cdtracctTpPrtry=CCRD, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=5000, denomination=MYR, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=5000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=5000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=3cd1522d-cfd1-46db-8b81-e8eb76128d94, createRequestId=O20250109RJHIMYKL010ORM91006802, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006802, postingInstructions=[PostingInstruction(id=02c3e611-5cae-4f52-8e5f-478e6c6b8137, clientTransactionId=63583620-1875-46c4-8dd2-f34ae030aeae, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006802, cdtracctTpPrtry=CCRD, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=5000, denomination=MYR, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=5000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=5000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9adbc3d3-11b0-4f86-a769-040f23488ac8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006802}, valueTimestamp=2025-01-09T15:27:48.732867Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:27:48.732867Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.563Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9adbc3d3-11b0-4f86-a769-040f23488ac8",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.567Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9adbc3d3-11b0-4f86-a769-040f23488ac8 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.569Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.569Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(63583620-1875-46c4-8dd2-f34ae030aeae) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.569Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.569Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1683695608192046, transactionId=63583620-1875-46c4-8dd2-f34ae030aeae, tmCreatedAt=2025-01-09T15:27:48.732867Z, amount=5000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(63583620-1875-46c4-8dd2-f34ae030aeae) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.569Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(63583620-1875-46c4-8dd2-f34ae030aeae) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:04:19.571",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:04:19.57Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=a9d208dc-5fcf-4cf8-a6bc-240273cfb01f)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0bbb266cd65ded79",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:33.443",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:33.443Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ce5ca6941b98de1524f5686101a",
            "spanId": "8de1524f5686101a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:26.909",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:26.909Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1706417063954276]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cde9b752a11a19f5599f2256177",
            "spanId": "a19f5599f2256177",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:26.906",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:26.905Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1706417063954276] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cde9b752a11a19f5599f2256177",
            "spanId": "a19f5599f2256177",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:23.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:23.124Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cdb48eec220baa02a273186894c",
            "spanId": "baa02a273186894c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.247",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.247Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725286108602699, transactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, tmCreatedAt=2025-01-09T15:19:10.295075Z, amount=600, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.247",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.247Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.247",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.247Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=31120035-5a79-4716-b627-153a9803e577)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.246",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.246Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.246",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.246Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.246",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.246Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.245",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.245Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b297831f-8e99-4f71-8696-36d9d58822d9 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.241",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.241Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.241",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.241Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.241",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.241Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b297831f-8e99-4f71-8696-36d9d58822d9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.041",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.04Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.040",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.039Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.040",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.039Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.040",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.04Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725286108602699, transactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, tmCreatedAt=2025-01-09T15:19:10.295075Z, amount=600, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.039",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.039Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.038",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.038Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b297831f-8e99-4f71-8696-36d9d58822d9 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.034",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.034Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.034",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.034Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:19.034",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:19.034Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b297831f-8e99-4f71-8696-36d9d58822d9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.978",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.978Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cd6e03aae60ba223741fd8db25a",
            "spanId": "ba223741fd8db25a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.933",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.933Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725286108602699, transactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, tmCreatedAt=2025-01-09T15:19:10.295075Z, amount=600, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.933",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.933Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.932",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.932Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.932",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.932Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(506b5b4b-b1d5-4c35-97a9-70da0958570e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.932",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.932Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.931",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.931Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b297831f-8e99-4f71-8696-36d9d58822d9 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.927",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.926Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.927",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.927Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=e29d670c-3257-4a06-84e1-29869edd155d, createRequestId=O20250109RJHIMYKL010ORM91006772, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006772, postingInstructions=[PostingInstruction(id=20e59291-84b3-4ad1-83ed-5f09ec724df2, clientTransactionId=506b5b4b-b1d5-4c35-97a9-70da0958570e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006772, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=600, denomination=MYR, accountId=b297831f-8e99-4f71-8696-36d9d58822d9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=600, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b297831f-8e99-4f71-8696-36d9d58822d9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006772}, valueTimestamp=2025-01-09T15:19:10.295075Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:19:10.295075Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.927",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.927Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b297831f-8e99-4f71-8696-36d9d58822d9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d431e1830770b823",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.926",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.926Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL040OQR91006751' and payload='{\"id\":\"31e1cbc4-4aba-409a-ab0d-1bef416429c1\",\"create_request_id\":\"O20250109RJHIMYKL040OQR91006751\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.926",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.926Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219835",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.926",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.926Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219835",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219835\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219835\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.926",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.926Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=c607e206-36ec-4c8a-9132-1eef7cb47f82, createRequestId=I20250109BIMBMYKL010ORM47224518, clientId=payments, clientBatchId=I20250109BIMBMYKL010ORM47224518, postingInstructions=[PostingInstruction(id=b676149d-a3d1-4225-8b8b-c9777eb44d7a, clientTransactionId=f18ffdc8-e540-4d9f-bc86-9ef7c8c75a17, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109BIMBMYKL01047224518, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=1, denomination=MYR, accountId=e2be094f-4a58-43b7-8df3-6e48d77a21ab, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e2be094f-4a58-43b7-8df3-6e48d77a21ab), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109BIMBMYKL010ORM47224518}, valueTimestamp=2025-01-09T15:18:29.781003Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:18:29.781003Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "ebca170142a92646",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:18.342",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:18.342Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cd69d1596e20b148dd9ede2cced",
            "spanId": "0b148dd9ede2cced",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:13.171",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:13.171Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cd1ba15147efbc7a1f2173ddf1c",
            "spanId": "fbc7a1f2173ddf1c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:03:07.154",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:03:07.154Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ccbbabeb8c8d6f947de8207cb8e",
            "spanId": "d6f947de8207cb8e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:59.183",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:59.183Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1706417063954276]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cc34ab5a38630007f3f5b95b1d8",
            "spanId": "30007f3f5b95b1d8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:59.180",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:59.18Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1706417063954276] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cc34ab5a38630007f3f5b95b1d8",
            "spanId": "30007f3f5b95b1d8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.534",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.533Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707127957137325, transactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, tmCreatedAt=2025-01-15T11:26:48.278625Z, amount=8000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.534",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.534Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.534",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.534Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=2a30b67e-7361-44a0-8457-de7c398e6a56)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.532",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.532Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.532",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.532Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.532",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.532Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.529",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.529Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/46d5baf3-3245-475b-8446-d3e6401edab9 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.525",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.524Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 46d5baf3-3245-475b-8446-d3e6401edab9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.524",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.524Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.524",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.524Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.324",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.323Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.323",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.323Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707127957137325, transactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, tmCreatedAt=2025-01-15T11:26:48.278625Z, amount=8000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.322",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.322Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.322",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.322Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.322",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.322Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.319",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.319Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/46d5baf3-3245-475b-8446-d3e6401edab9 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.315Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.315Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.315Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 46d5baf3-3245-475b-8446-d3e6401edab9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.214Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707127957137325, transactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, tmCreatedAt=2025-01-15T11:26:48.278625Z, amount=8000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.214Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.213Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.213Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(501e2153-a2eb-4901-9a82-8f968d4062f1) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.213Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.210",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.209Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/46d5baf3-3245-475b-8446-d3e6401edab9 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.204Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220097",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.205Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220097",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220097\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220097\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.205Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.205Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=112edf7d-e443-4e29-9b92-12a231fc9c25, createRequestId=O20250115RJHIMYKL010ORM91006224, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006224, postingInstructions=[PostingInstruction(id=607c6503-c231-485c-a80e-2b61c81fc7fa, clientTransactionId=501e2153-a2eb-4901-9a82-8f968d4062f1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006224, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=8000, denomination=MYR, accountId=46d5baf3-3245-475b-8446-d3e6401edab9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=46d5baf3-3245-475b-8446-d3e6401edab9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006224}, valueTimestamp=2025-01-15T11:26:48.278625Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:26:48.278625Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.205Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 46d5baf3-3245-475b-8446-d3e6401edab9",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "259d5ad3e60e3d71",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:54.204",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:54.204Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91006208' and payload='{\"id\":\"d43aff65-05fb-4319-85db-3e833c9c050c\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91006208\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:53.894",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:53.894Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1cbd5cfc0f4cbfee7e9c30f55561",
            "spanId": "bfee7e9c30f55561",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:31.649",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:31.589Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ca7848d08d47ab204eee2f0e926",
            "spanId": "7ab204eee2f0e926",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:23.091",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:23.091Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c9f1899e9da0f58523a33518c22",
            "spanId": "0f58523a33518c22",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.925",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.925Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688012714616603, transactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, tmCreatedAt=2025-01-09T15:15:29.989052Z, amount=230, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.925",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.925Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.925",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.925Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=6d6cbdbf-35fe-47a2-8dcd-4e1af44285f4)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.924",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.924Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.924",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.924Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.924",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.924Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.923",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.922Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/32c29481-53fd-48e4-ba76-f9bf5fb919d3 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.919",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.918Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.919",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.918Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 32c29481-53fd-48e4-ba76-f9bf5fb919d3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.918",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.918Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.718",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.718Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688012714616603, transactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, tmCreatedAt=2025-01-09T15:15:29.989052Z, amount=230, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.718",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.718Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.717",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.717Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.717",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.717Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.717",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.717Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.715",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.715Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/32c29481-53fd-48e4-ba76-f9bf5fb919d3 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.711",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.711Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.711",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.711Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.711",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.711Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 32c29481-53fd-48e4-ba76-f9bf5fb919d3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.610",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.61Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688012714616603, transactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, tmCreatedAt=2025-01-09T15:15:29.989052Z, amount=230, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.610",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.61Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.609",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.609Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.609",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.609Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c5aa1695-ce5a-4efa-80c7-0e257b675b9a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.609",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.609Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.608",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.607Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/32c29481-53fd-48e4-ba76-f9bf5fb919d3 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.604",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.604",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 32c29481-53fd-48e4-ba76-f9bf5fb919d3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.603",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=2ff84964-c873-42d5-8da3-c0a88248fcbe, createRequestId=O20250109RJHIMYKL040OQR91006694, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006694, postingInstructions=[PostingInstruction(id=23879a2a-5013-46fa-9339-1baeb1cf78ca, clientTransactionId=0a3cb596-1ff6-40f6-9cc3-949736ea7ab7, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006694, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[ContractViolation(accountId=62a8f61a-bba7-4ace-9c4a-3d99ed8b006c, type=CONTRACT_VIOLATION_BREACH_TERMS_AND_CONDITIONS, reason=Transaction amount -5 will result in balance fall below the minimum balance amount of 10)], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=5, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=62a8f61a-bba7-4ace-9c4a-3d99ed8b006c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006694}, valueTimestamp=2025-01-09T15:04:07.230372Z, status=POSTING_INSTRUCTION_BATCH_STATUS_REJECTED, error=null, insertionTimestamp=2025-01-09T15:04:07.230372Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "58e52343a50a2700",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.603",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=8aa13ee8-c8fa-4ae4-a728-ce888408bdb2, createRequestId=I20250109MBBEMYKL010ORM07732244, clientId=payments, clientBatchId=I20250109MBBEMYKL010ORM07732244, postingInstructions=[PostingInstruction(id=969dc80b-603f-4d1e-8ac1-b16c6c7f5563, clientTransactionId=86c4a657-4531-45cb-b67c-746a096c0b3a, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109MBBEMYKL01007732244, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=2200, denomination=MYR, accountId=b300468a-e4da-4964-b57d-66911177e6bc, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=2200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=2200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b300468a-e4da-4964-b57d-66911177e6bc), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109MBBEMYKL010ORM07732244}, valueTimestamp=2025-01-09T15:04:14.281338Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:04:14.281338Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "044959ca05ad0b4d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.603",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=3ee70ef7-042d-47b6-b79e-9608a73a0eb2, createRequestId=I20250109CIBBMYKL010ORM14265968, clientId=payments, clientBatchId=I20250109CIBBMYKL010ORM14265968, postingInstructions=[PostingInstruction(id=87001443-6b3b-4085-894c-4f89e51489b4, clientTransactionId=029282b2-df1d-459b-ab26-3b23abd557cb, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109CIBBMYKL01014265968, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=10000, denomination=MYR, accountId=5dbb0501-b6de-4e23-b80d-c1614e1e28ac, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=10000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=10000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=5dbb0501-b6de-4e23-b80d-c1614e1e28ac), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109CIBBMYKL010ORM14265968}, valueTimestamp=2025-01-09T15:06:35.793501Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:06:35.793501Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "04ce473397eb2f05",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.603",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=4767e585-0b84-4511-8d55-fea8cfb4c2db, createRequestId=I20250109TNGDMYNB010ORM51937589, clientId=payments, clientBatchId=I20250109TNGDMYNB010ORM51937589, postingInstructions=[PostingInstruction(id=7984cc49-9ab9-4193-97cc-67077679d7d8, clientTransactionId=e5b52d79-9b8d-4218-b2e5-88d8043a9ce9, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109TNGDMYNB01051937589, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=DFLT, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=55, denomination=MYR, accountId=9f3ee999-1d58-4c73-b4ff-a89d1a07feed, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=55, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=55, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9f3ee999-1d58-4c73-b4ff-a89d1a07feed), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109TNGDMYNB010ORM51937589}, valueTimestamp=2025-01-09T15:14:59.742285Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:14:59.742285Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "d57829b810bb8708",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.603",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.603Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=31e1cbc4-4aba-409a-ab0d-1bef416429c1, createRequestId=O20250109RJHIMYKL040OQR91006751, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006751, postingInstructions=[PostingInstruction(id=f4a187c0-e277-46cc-93a1-ee5b890ba5b4, clientTransactionId=c5aa1695-ce5a-4efa-80c7-0e257b675b9a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006751, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=230, denomination=MYR, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=230, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=230, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=32c29481-53fd-48e4-ba76-f9bf5fb919d3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006751}, valueTimestamp=2025-01-09T15:15:29.989052Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:15:29.989052Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6625e4394897dba8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.602",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.602Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006695' and payload='{\"id\":\"8e14e6f3-b469-4077-8c2d-a039872725ab\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006695\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.602",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.602Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219830",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:18.602",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:18.602Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219830",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219830\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219830\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:16.662",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:16.662Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1700733533696914]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c98771615d98873386378c6218e",
            "spanId": "8873386378c6218e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:16.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:16.659Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1700733533696914] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c98771615d98873386378c6218e",
            "spanId": "8873386378c6218e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:11.877",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:11.877Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c93f97a981838ba91153aca5f20",
            "spanId": "38ba91153aca5f20",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:11.423",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:11.423Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1695226826696284]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c93888c66bf71b7e8ceefb76ce4",
            "spanId": "71b7e8ceefb76ce4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:11.420",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:11.42Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1695226826696284] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c93888c66bf71b7e8ceefb76ce4",
            "spanId": "71b7e8ceefb76ce4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:06.331",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:06.331Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c8ecebbde679079755ea75c2dc0",
            "spanId": "9079755ea75c2dc0",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:02.399",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:02.398Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1709539227145819]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c8a549712752e423fa6ffd2f580",
            "spanId": "2e423fa6ffd2f580",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:02.396",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:02.396Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1709539227145819] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c8a549712752e423fa6ffd2f580",
            "spanId": "2e423fa6ffd2f580",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:01.754",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:01.754Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1681471168633912]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c899f4ce7c5b19b0990c9ddded4",
            "spanId": "b19b0990c9ddded4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:02:01.752",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:02:01.751Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1681471168633912] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c899f4ce7c5b19b0990c9ddded4",
            "spanId": "b19b0990c9ddded4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.204",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.204Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707662300416976, transactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, tmCreatedAt=2025-01-15T11:23:53.954107Z, amount=28, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.204",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.204Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.204",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.204Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=6e6c0cf3-1933-48ee-b625-4b8b7d690fcc)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.203",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.202Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.202",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.202Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.202",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.202Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.200",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.2Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b47e7ee4-6630-487d-967d-48e4f898feae with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.195",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.195Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.195",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.195Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:54.195",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:54.195Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b47e7ee4-6630-487d-967d-48e4f898feae",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.994Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707662300416976, transactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, tmCreatedAt=2025-01-15T11:23:53.954107Z, amount=28, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.994Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.993Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.993Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.993Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.990",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.99Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b47e7ee4-6630-487d-967d-48e4f898feae with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.986",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.986Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.986",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.986Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.986",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.986Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b47e7ee4-6630-487d-967d-48e4f898feae",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.885",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.885Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707662300416976, transactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, tmCreatedAt=2025-01-15T11:23:53.954107Z, amount=28, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.885",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.885Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.883Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.883Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.883Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.880",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.88Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/b47e7ee4-6630-487d-967d-48e4f898feae with method: GET succeeded with status code 200: OK in totalTime: 5 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.874Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.874Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d43aff65-05fb-4319-85db-3e833c9c050c, createRequestId=O20250115RJHIMYKL010ORM91006208, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006208, postingInstructions=[PostingInstruction(id=3526e3e8-5d37-4cd4-ac3f-91cd4d5cd8d8, clientTransactionId=1ec246cd-6ecd-46e2-8df0-f0ba9bb8d901, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006208, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=28, denomination=MYR, accountId=b47e7ee4-6630-487d-967d-48e4f898feae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=28, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=28, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=b47e7ee4-6630-487d-967d-48e4f898feae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006208}, valueTimestamp=2025-01-15T11:23:53.954107Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:23:53.954107Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.875Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: b47e7ee4-6630-487d-967d-48e4f898feae",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "5acc26b13725cc06",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.874",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.873Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220095",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220095\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220095\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.874",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.874Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=72d25f20-9eff-486f-ba3d-26313412c901, createRequestId=I20250115CIBBMYKL010ORM05594219, clientId=payments, clientBatchId=I20250115CIBBMYKL010ORM05594219, postingInstructions=[PostingInstruction(id=a45a1172-3ab3-40e0-bb7a-b8f7ca158724, clientTransactionId=afaf7b16-ec7f-4dda-9b79-30bb26acdfe1, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115CIBBMYKL01005594219, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=1000, denomination=MYR, accountId=cc2d68d3-459f-4986-8e96-f8934acc0fea, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cc2d68d3-459f-4986-8e96-f8934acc0fea), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115CIBBMYKL010ORM05594219}, valueTimestamp=2025-01-15T11:17:44.841237Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:44.841237Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "274c7e510cab73b5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.873",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.873Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91006176' and payload='{\"id\":\"9a60e552-ce7d-4738-8870-26b5b1615aac\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91006176\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:53.873",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:53.873Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220095",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:47.427",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:47.426Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c7be2e0b6505fba7bf8cc41b32e",
            "spanId": "5fba7bf8cc41b32e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:43.533",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:43.533Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1715691800923875]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c778df57af0fa95d04e5c27f879",
            "spanId": "fa95d04e5c27f879",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:43.531",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:43.531Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1715691800923875] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c778df57af0fa95d04e5c27f879",
            "spanId": "fa95d04e5c27f879",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:40.232",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:40.232Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c746cd8c43e256dc369750ae41b",
            "spanId": "256dc369750ae41b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:39.855",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:39.855Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c732e937c1c3eb1ae4ae8a4dbd7",
            "spanId": "3eb1ae4ae8a4dbd7",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:36.531",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:36.531Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1711981451797500]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c7005a72f65290ed747bcb01889",
            "spanId": "290ed747bcb01889",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:36.529",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:36.529Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1711981451797500] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c7005a72f65290ed747bcb01889",
            "spanId": "290ed747bcb01889",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:31.403",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:31.403Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1706417063954276]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c6b926b795cb9453fe172ebaafb",
            "spanId": "b9453fe172ebaafb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:31.401",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:31.4Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1706417063954276] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c6b926b795cb9453fe172ebaafb",
            "spanId": "b9453fe172ebaafb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.601",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.601Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1711679310574811, transactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, tmCreatedAt=2025-01-09T15:03:50.310726Z, amount=1328, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.601",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.601Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.601",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.601Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=16a240d0-e2d8-4194-b8ba-c3e5479a1e4b)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.600",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.6Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.600",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.6Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.600",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.6Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.598",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.598Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/22878758-a670-4cb5-927e-72c2d6476084 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.594Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.594Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.594Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 22878758-a670-4cb5-927e-72c2d6476084",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.393",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.392Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.393",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.392Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.393",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.393Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.393",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.393Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1711679310574811, transactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, tmCreatedAt=2025-01-09T15:03:50.310726Z, amount=1328, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.393",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.393Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.391",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.391Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/22878758-a670-4cb5-927e-72c2d6476084 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.387",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.387Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.387",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.387Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.387",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.387Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 22878758-a670-4cb5-927e-72c2d6476084",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.287",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.286Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1711679310574811, transactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, tmCreatedAt=2025-01-09T15:03:50.310726Z, amount=1328, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.287",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.286Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.286",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.286Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.286",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.286Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(12e0e852-c900-4c6c-8ddc-6d4d4ad012b0) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.286",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.286Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.284",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.284Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/22878758-a670-4cb5-927e-72c2d6476084 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.280",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.28Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=51c46457-e8b0-467f-85d7-bce304c2b870, createRequestId=I20250109ARBKMYKL010ORB77353591, clientId=payments, clientBatchId=I20250109ARBKMYKL010ORB77353591, postingInstructions=[PostingInstruction(id=4deb80d0-8460-4b47-a5e1-211aebf0a9d3, clientTransactionId=55aecee6-498c-4432-8d4c-bb7efd179582, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109ARBKMYKL01023267320, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=396.82, denomination=MYR, accountId=33fb1825-688f-4ece-b300-4cdb8a94ab95, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=396.82, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=396.82, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=33fb1825-688f-4ece-b300-4cdb8a94ab95), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109ARBKMYKL010ORB77353591}, valueTimestamp=2025-01-09T15:02:33.428821Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:02:33.428821Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "762435d62917dd39",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.280",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.28Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.280",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.28Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=8e14e6f3-b469-4077-8c2d-a039872725ab, createRequestId=O20250109RJHIMYKL010ORM91006695, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006695, postingInstructions=[PostingInstruction(id=b38b6a3e-92e0-42c6-8710-301cf6832756, clientTransactionId=12e0e852-c900-4c6c-8ddc-6d4d4ad012b0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006695, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1328, denomination=MYR, accountId=22878758-a670-4cb5-927e-72c2d6476084, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1328, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1328, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=22878758-a670-4cb5-927e-72c2d6476084), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006695}, valueTimestamp=2025-01-09T15:03:50.310726Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:03:50.310726Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.280",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.28Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 22878758-a670-4cb5-927e-72c2d6476084",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1c3302a30b48ec03",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.279",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.278Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006680' and payload='{\"id\":\"4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006680\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.279",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.279Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219827",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.279",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.279Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219827",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219827\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219827\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:01:18.279",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:01:18.279Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=17444da6-9e81-43a7-b428-d1643f25f2c9, createRequestId=I20250109MASBMYNB010ORM01286161, clientId=payments, clientBatchId=I20250109MASBMYNB010ORM01286161, postingInstructions=[PostingInstruction(id=5569af36-f6ed-4793-93d1-fab8f3fb6272, clientTransactionId=2d469e29-68e6-483c-841b-68e17ec19c0e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109MASBMYNB01001286161, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=1500, denomination=MYR, accountId=ec12acef-67e5-42e1-b858-2aeb341f381b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=1500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=1500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=ec12acef-67e5-42e1-b858-2aeb341f381b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109MASBMYNB010ORM01286161}, valueTimestamp=2025-01-09T15:00:28.459250Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T15:00:28.459250Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "ba8c5e63d0f7ee0c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:56.348",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:56.348Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c483b503d2719009aa655ba9edf",
            "spanId": "19009aa655ba9edf",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.872",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.871Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.872",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.871Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=4ce904e4-6c1f-45c0-b6b6-ae57d3242de8)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.871",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.871Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1687352255009165, transactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, tmCreatedAt=2025-01-15T11:17:23.244590Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.870",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.869Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.870",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.87Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.869",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.869Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.867",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.866Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.862",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.862Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.862",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.862Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.862",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.862Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.661",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.661Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1687352255009165, transactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, tmCreatedAt=2025-01-15T11:17:23.244590Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.661",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.661Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.658",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.658Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.658",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.658Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.658",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.658Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.656",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.656Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.652",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.651Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.652",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.651Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.651",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.651Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.554",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.55Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1687352255009165, transactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, tmCreatedAt=2025-01-15T11:17:23.244590Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 5 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.554",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.55Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.552",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.548Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.552",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.548Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(eb143f13-2858-4fb7-8318-62b02bdc7a19) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.552",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.549Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.545",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.545Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0 with method: GET succeeded with status code 200: OK in totalTime: 5 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.540",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.54Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.540",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.54Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a60e552-ce7d-4738-8870-26b5b1615aac, createRequestId=O20250115RJHIMYKL010ORM91006176, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006176, postingInstructions=[PostingInstruction(id=c77ab092-bbc0-41ff-8c78-eddc5038e522, clientTransactionId=eb143f13-2858-4fb7-8318-62b02bdc7a19, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006176, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006176}, valueTimestamp=2025-01-15T11:17:23.244590Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:17:23.244590Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.540",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.54Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 89dc6d1b-9d98-4aa7-aadb-736ce4fcd4f0",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c55c55f6ab583195",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.539",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.539Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a9e3722a-6b35-457d-98d9-62dc091a4ca8, createRequestId=I20250115MBBEMYKL010ORM05097532, clientId=payments, clientBatchId=I20250115MBBEMYKL010ORM05097532, postingInstructions=[PostingInstruction(id=3fc932ef-6998-443a-90cb-3504fde69e1b, clientTransactionId=d7b63152-edf9-454e-8dbf-fa826a8b7d08, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115MBBEMYKL01005097532, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=500, denomination=MYR, accountId=9d397694-c0a7-4964-a28b-35ede76b1680, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9d397694-c0a7-4964-a28b-35ede76b1680), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115MBBEMYKL010ORM05097532}, valueTimestamp=2025-01-15T11:14:18.260639Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:14:18.260639Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c478d7b2398972ef",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.539",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.539Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=c520f944-5ec5-43ca-8a80-e2422cd8f699, createRequestId=I20250115PBBEMYKL010ORM19120773, clientId=payments, clientBatchId=I20250115PBBEMYKL010ORM19120773, postingInstructions=[PostingInstruction(id=ae1b80a1-52f0-4dce-90f8-3b531c49bde9, clientTransactionId=35060795-17f1-4856-89dc-682503c7ac5d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115PBBEMYKL01019120773, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=800, denomination=MYR, accountId=d7966ac1-fa21-45dc-834f-3339736780b7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=800, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=800, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d7966ac1-fa21-45dc-834f-3339736780b7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115PBBEMYKL010ORM19120773}, valueTimestamp=2025-01-15T11:15:34.185572Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:15:34.185572Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "4ec2d9c07ca53715",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.538Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL040OQR91006140' and payload='{\"id\":\"2da1db36-3ee9-4181-ae30-84b917a1a656\",\"create_request_id\":\"O20250115RJHIMYKL040OQR91006140\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.538Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220092",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:53.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:53.538Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220092",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220092\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220092\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:52.638",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:52.638Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1697163247607123]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c44b7e866495be198ab259208ec",
            "spanId": "5be198ab259208ec",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:52.635",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:52.635Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1697163247607123] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c44b7e866495be198ab259208ec",
            "spanId": "5be198ab259208ec",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:44.718",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:44.698Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1748736000000312] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c3c7538b340a4ee760550b49308",
            "spanId": "a4ee760550b49308",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:44.718",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:44.701Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1748736000000312]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c3c7538b340a4ee760550b49308",
            "spanId": "a4ee760550b49308",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:39.943",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:39.942Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c378b9ed2f085ecafcbea6d0ea3",
            "spanId": "85ecafcbea6d0ea3",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:36.079",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:36.079Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1711981451797500]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c3407dd7dd8741630f8b63f49b6",
            "spanId": "741630f8b63f49b6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:36.076",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:36.076Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1711981451797500] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c3407dd7dd8741630f8b63f49b6",
            "spanId": "741630f8b63f49b6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:35.867",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:35.867Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c33bbc31d2bbe3494ff10647467",
            "spanId": "be3494ff10647467",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:29.614",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:29.539Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c2d053b91317f0f25b504212a75",
            "spanId": "7f0f25b504212a75",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:26.255",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:26.255Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c2ad3741aa39efa54128331ead0",
            "spanId": "9efa54128331ead0",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:21.412",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:21.412Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1680765143524821]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c256359374356f2ca35e865396a",
            "spanId": "56f2ca35e865396a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:21.409",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:21.409Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1680765143524821] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c256359374356f2ca35e865396a",
            "spanId": "56f2ca35e865396a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:21.010",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:21.01Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c25a0148932d5411fbcd22b3037",
            "spanId": "d5411fbcd22b3037",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.278",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.278Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1705147802007890, transactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, tmCreatedAt=2025-01-09T14:59:22.107386Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.278",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.278Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.278",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.278Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=690d9b0e-3ff6-4dcd-b052-d8f694240b00)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.277",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.277Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.277",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.277Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.277",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.277Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.276",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.275Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.272",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.271Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.272",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.271Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.272",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.271Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.071",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.071Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1705147802007890, transactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, tmCreatedAt=2025-01-09T14:59:22.107386Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.071",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.071Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.070",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.07Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.070",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.07Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.070",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.07Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.069",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.068Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.064",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.064Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.064",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.064Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:18.064",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:18.064Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.964",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.963Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.963",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.962Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.963",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.962Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.963",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.963Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1705147802007890, transactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, tmCreatedAt=2025-01-09T14:59:22.107386Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(d09f4b74-aeb0-4ac8-aae1-e27245860aba) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.962",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.962Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.961",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.96Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.955Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219824",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219824\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219824\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.956Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=72dc8cb0-45d9-4904-9ccd-926c5fecbbc7, createRequestId=I20250109TNGDMYNB010ORM51000872, clientId=payments, clientBatchId=I20250109TNGDMYNB010ORM51000872, postingInstructions=[PostingInstruction(id=c482052a-757c-4667-bcf6-2ddbac5126cc, clientTransactionId=09888d66-b232-45f2-98f5-5dd5cfae961c, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109TNGDMYNB01051000872, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=DFLT, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=184.99, denomination=MYR, accountId=312693ed-c05a-4bac-8fc8-ab84ae0b6fbb, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=184.99, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=184.99, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=312693ed-c05a-4bac-8fc8-ab84ae0b6fbb), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109TNGDMYNB010ORM51000872}, valueTimestamp=2025-01-09T14:56:25.692118Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:56:25.692118Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "974ac56b38fa1a26",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.956Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a5214d80-302e-4cad-84d7-a79c83c0f34f, createRequestId=I20250109CIBBMYKL010ORB37818779, clientId=payments, clientBatchId=I20250109CIBBMYKL010ORB37818779, postingInstructions=[PostingInstruction(id=8c75ef10-c53d-418b-be32-a2226a90f799, clientTransactionId=88983914-6114-454f-a016-89e508b8c77b, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109CIBBMYKL01037818779, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=2000, denomination=MYR, accountId=4790edf3-9b1a-47cd-9437-6ba8c3a44ee9, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=4790edf3-9b1a-47cd-9437-6ba8c3a44ee9), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109CIBBMYKL010ORB37818779}, valueTimestamp=2025-01-09T14:58:42.104277Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:58:42.104277Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "5773eb6b36cf627a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.956Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.956Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=4c5b9ba6-0afa-44b4-9e05-5ace662a5b9f, createRequestId=O20250109RJHIMYKL010ORM91006680, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006680, postingInstructions=[PostingInstruction(id=ad78bf6b-c40a-48e4-92ea-b197a65d5703, clientTransactionId=d09f4b74-aeb0-4ac8-aae1-e27245860aba, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006680, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006680}, valueTimestamp=2025-01-09T14:59:22.107386Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:59:22.107386Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.956",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.956Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: bcaf4aa3-e2d6-42e4-a7a6-2b9ae118e54e",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "b4a008d50282fcd2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.955",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.955Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL110ORM91006645' and payload='{\"id\":\"6fbe02f1-e624-4cdc-8f24-a1d25e053e2c\",\"create_request_id\":\"O20250109RJHIMYKL110ORM91006645\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.955",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.955Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219824",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.737",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.737Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21cde1b362a08fb37cee151411",
            "spanId": "a08fb37cee151411",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.365",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.364Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /customer-accounts/1695265981606325/limits with method: PUT succeeded with status code 202: ACCEPTED in totalTime: 131 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21423b58e34f06926dd1ac16c4",
            "spanId": "4f06926dd1ac16c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.365",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.365Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1695265981606325]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21423b58e34f06926dd1ac16c4",
            "spanId": "4f06926dd1ac16c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.233",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.233Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1695265981606325]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21423b58e34f06926dd1ac16c4",
            "spanId": "4f06926dd1ac16c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.233",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.233Z",
            "@version": "1",
            "message": "[388060ce-dcc1-44dc-8187-05d100177a13] Sending update transaction limits request to deposit-account-service for customer: [1695265981606325]",
            "logger_name": "com.arbm.digibank.service.client.CustomerAccountLimitsService",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21423b58e34f06926dd1ac16c4",
            "spanId": "4f06926dd1ac16c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:17.232",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:17.231Z",
            "@version": "1",
            "message": "Received request to update transaction limits for customer [1695265981606325] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c21423b58e34f06926dd1ac16c4",
            "spanId": "4f06926dd1ac16c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:09.445",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:09.445Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c193ee44018e79b0470683d1bfc",
            "spanId": "e79b0470683d1bfc",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:06.252",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:06.252Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c16ebbfe476808d801f07b7ac41",
            "spanId": "808d801f07b7ac41",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:05.024",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:05.024Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1688697189612555]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c1546ad2f6b3c1151ad23b649d8",
            "spanId": "3c1151ad23b649d8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 09:00:05.022",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T09:00:05.022Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1688697189612555] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c1546ad2f6b3c1151ad23b649d8",
            "spanId": "3c1151ad23b649d8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:57.271",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:57.271Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1723017282388096]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c0d8beb75d16a4d1ca4fd4e8d87",
            "spanId": "6a4d1ca4fd4e8d87",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:57.269",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:57.269Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1723017282388096] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c0d8beb75d16a4d1ca4fd4e8d87",
            "spanId": "6a4d1ca4fd4e8d87",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.537Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1678262651133300, transactionId=6602878a-bf9d-4983-a338-267f2bc793ef, tmCreatedAt=2025-01-15T11:09:28.377152Z, amount=200, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.537Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.537Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=7b26a347-eb5e-4a6a-818f-8d9a971e15df)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.535",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.535Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.535",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.535Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.535",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.535Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.532",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.532Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/895e2942-1723-4bc7-b7af-2f9ba89ea2d5 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.528",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.527Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.528",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.527Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.528",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.528Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 895e2942-1723-4bc7-b7af-2f9ba89ea2d5",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.327Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1678262651133300, transactionId=6602878a-bf9d-4983-a338-267f2bc793ef, tmCreatedAt=2025-01-15T11:09:28.377152Z, amount=200, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.327Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.325",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.325Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.325",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.325Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.325",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.325Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.323",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.323Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/895e2942-1723-4bc7-b7af-2f9ba89ea2d5 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.319",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.318Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.319",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.318Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.319",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.319Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 895e2942-1723-4bc7-b7af-2f9ba89ea2d5",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.218",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.218Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1678262651133300, transactionId=6602878a-bf9d-4983-a338-267f2bc793ef, tmCreatedAt=2025-01-15T11:09:28.377152Z, amount=200, limitType=DUITNOW_QR)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.218",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.218Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.216Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.216Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6602878a-bf9d-4983-a338-267f2bc793ef) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.216Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.213Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/895e2942-1723-4bc7-b7af-2f9ba89ea2d5 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.208Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.209Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=2da1db36-3ee9-4181-ae30-84b917a1a656, createRequestId=O20250115RJHIMYKL040OQR91006140, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91006140, postingInstructions=[PostingInstruction(id=aa835234-cd8e-4643-a953-84a820cfd936, clientTransactionId=6602878a-bf9d-4983-a338-267f2bc793ef, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091006140, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=895e2942-1723-4bc7-b7af-2f9ba89ea2d5), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91006140}, valueTimestamp=2025-01-15T11:09:28.377152Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:09:28.377152Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.209Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 895e2942-1723-4bc7-b7af-2f9ba89ea2d5",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "3b411d1d2eaa08a2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.208",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.207Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220090",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.208",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.208Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220090",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220090\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220090\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.208",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.208Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=70bac2ca-ce83-4785-952c-b962643a7482, createRequestId=I20250115BOBEMYK2010ORM87319272, clientId=payments, clientBatchId=I20250115BOBEMYK2010ORM87319272, postingInstructions=[PostingInstruction(id=b0756ae0-8589-4430-ab21-e41cb4040b77, clientTransactionId=0b77ffa0-3908-491a-b57a-d75b6c393068, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115BOBEMYK201087319272, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=30000, denomination=MYR, accountId=5c21606b-93d4-4d61-a0dc-100ff6ca1436, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=30000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=30000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=5c21606b-93d4-4d61-a0dc-100ff6ca1436), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115BOBEMYK2010ORM87319272}, valueTimestamp=2025-01-15T11:08:27.750392Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:08:27.750392Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "2034e14c947fc155",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:53.207",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:53.207Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91006114' and payload='{\"id\":\"fcd54549-84ea-4499-b11d-3126522ffa38\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91006114\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:49.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:49.212Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1695265981606325]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c0523f9a1b87985372f058c7399",
            "spanId": "7985372f058c7399",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:49.210",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:49.21Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1695265981606325] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1c0523f9a1b87985372f058c7399",
            "spanId": "7985372f058c7399",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:30.709",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:30.708Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bf2335eac2f4b1871fa47277106",
            "spanId": "4b1871fa47277106",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:26.949",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:26.949Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1beeb61e7e77f7048fac9107eea3",
            "spanId": "f7048fac9107eea3",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:22.481",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:22.481Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1688697189612555]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1beaeb6170eda2b784615ea654a0",
            "spanId": "a2b784615ea654a0",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:22.478",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:22.478Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1688697189612555] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1beaeb6170eda2b784615ea654a0",
            "spanId": "a2b784615ea654a0",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.955",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.954Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.955",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.955Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=8f46f17c-5695-4e23-899f-7bb25bcd6a7e)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.954",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.953Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.954",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.953Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.954",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.954Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1685506644932403, transactionId=c11a078d-76e2-412f-894c-8471973a6093, tmCreatedAt=2025-01-09T14:52:28.671298Z, amount=480, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.953",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.953Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.952",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.952Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/414b16f2-0300-4019-b3e9-f98c344bb2f8 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.949",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.948Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 414b16f2-0300-4019-b3e9-f98c344bb2f8",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.948",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.948Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.948",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.948Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.748",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.748Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.748",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.747Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1685506644932403, transactionId=c11a078d-76e2-412f-894c-8471973a6093, tmCreatedAt=2025-01-09T14:52:28.671298Z, amount=480, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.746",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.746Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.746",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.746Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.746",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.745Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.744",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.744Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/414b16f2-0300-4019-b3e9-f98c344bb2f8 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.740",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.74Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 414b16f2-0300-4019-b3e9-f98c344bb2f8",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.740",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.74Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.740",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.74Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.646",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.639Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.646",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.639Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1685506644932403, transactionId=c11a078d-76e2-412f-894c-8471973a6093, tmCreatedAt=2025-01-09T14:52:28.671298Z, amount=480, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.638",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.637Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.638",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.637Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(c11a078d-76e2-412f-894c-8471973a6093) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.638",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.637Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.636",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.635Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/414b16f2-0300-4019-b3e9-f98c344bb2f8 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.632",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 414b16f2-0300-4019-b3e9-f98c344bb2f8",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.632",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.632",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=6fbe02f1-e624-4cdc-8f24-a1d25e053e2c, createRequestId=O20250109RJHIMYKL110ORM91006645, clientId=payments, clientBatchId=O20250109RJHIMYKL110ORM91006645, postingInstructions=[PostingInstruction(id=5eea0b7a-17b7-4146-82fe-654fb1e1bc06, clientTransactionId=c11a078d-76e2-412f-894c-8471973a6093, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250109RJHIMYKL11091006645, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_PROXY, transferType=4}, committedPostings=[Posting(credit=false, amount=480, denomination=MYR, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=480, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=480, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=414b16f2-0300-4019-b3e9-f98c344bb2f8), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL110ORM91006645}, valueTimestamp=2025-01-09T14:52:28.671298Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:52:28.671298Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "28efc27f6f9f09fb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.631",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219823",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219823\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219823\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.631",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219823",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:17.631",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:17.631Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL040OQR91006632' and payload='{\"id\":\"f1b2849c-5bb5-44cc-a588-ca17deaaff43\",\"create_request_id\":\"O20250109RJHIMYKL040OQR91006632\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:15.166",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:15.166Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1be3c42534eec70d2f6c22822312",
            "spanId": "c70d2f6c22822312",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:04.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:04.893Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1748736000000312]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd8866f56fcd13ef9f42b966ba5",
            "spanId": "d13ef9f42b966ba5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:04.890",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:04.89Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1748736000000312] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd8866f56fcd13ef9f42b966ba5",
            "spanId": "d13ef9f42b966ba5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:59:02.344",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:59:02.344Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd60ee8d98b90cb1d9c8b78fbca",
            "spanId": "90cb1d9c8b78fbca",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:58.356",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:58.356Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1715339640303184]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd2037115b6a4aae53e15e2137f",
            "spanId": "a4aae53e15e2137f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:58.354",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:58.354Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1715339640303184] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd2037115b6a4aae53e15e2137f",
            "spanId": "a4aae53e15e2137f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:56.548",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:56.548Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bd09f11e7686bf211412bec1381",
            "spanId": "6bf211412bec1381",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:55.816",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:55.815Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1691047542196395]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bcf78f7f1849e82a98ccf64f7fa",
            "spanId": "9e82a98ccf64f7fa",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:55.813",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:55.813Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1691047542196395] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bcf78f7f1849e82a98ccf64f7fa",
            "spanId": "9e82a98ccf64f7fa",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.207",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.206Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=21fa7a35-91fe-4e88-9a1c-69a983aca190)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.206",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.206Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.206",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.206Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1692170103942779, transactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, tmCreatedAt=2025-01-15T11:04:12.135246Z, amount=200, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.205Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.205Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.205Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.202",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.202Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/8272134e-8996-4fb4-8a06-dbacac2ee0c1 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.198",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.198Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 8272134e-8996-4fb4-8a06-dbacac2ee0c1",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.198",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.198Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:53.198",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:53.198Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.997",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.997Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.997",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.997Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1692170103942779, transactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, tmCreatedAt=2025-01-15T11:04:12.135246Z, amount=200, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.996",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.996Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.996",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.996Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.996",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.996Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.993Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/8272134e-8996-4fb4-8a06-dbacac2ee0c1 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.989",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.989Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 8272134e-8996-4fb4-8a06-dbacac2ee0c1",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.989",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.989Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.989",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.989Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.888",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.888Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.888",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.888Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1692170103942779, transactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, tmCreatedAt=2025-01-15T11:04:12.135246Z, amount=200, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.887",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.887Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.887",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.886Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(96d9042a-b247-4f69-8541-d7336fd0caf2) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.887",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.886Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.883Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/8272134e-8996-4fb4-8a06-dbacac2ee0c1 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.879",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.879Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 8272134e-8996-4fb4-8a06-dbacac2ee0c1",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.879",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.879Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.879",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.879Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fcd54549-84ea-4499-b11d-3126522ffa38, createRequestId=O20250115RJHIMYKL010ORM91006114, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006114, postingInstructions=[PostingInstruction(id=3edb422e-374a-45d7-becb-3d70bc473225, clientTransactionId=96d9042a-b247-4f69-8541-d7336fd0caf2, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006114, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=200, denomination=MYR, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=200, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=200, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8272134e-8996-4fb4-8a06-dbacac2ee0c1), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006114}, valueTimestamp=2025-01-15T11:04:12.135246Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T11:04:12.135246Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "6d67189bff8d1e4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.879",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.879Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a51b5476-8713-4e19-9be6-a8fb749920bf, createRequestId=I20250115PBBEMYKL010ORM18548729, clientId=payments, clientBatchId=I20250115PBBEMYKL010ORM18548729, postingInstructions=[PostingInstruction(id=d4baa1a4-c43a-4a03-ad3d-83a6a846d142, clientTransactionId=616cfdd5-445d-4d92-a67d-d43d536d3344, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115PBBEMYKL01018548729, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=1000, denomination=MYR, accountId=fd9c4831-edea-4265-9b9a-26443c4c4d68, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=fd9c4831-edea-4265-9b9a-26443c4c4d68), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115PBBEMYKL010ORM18548729}, valueTimestamp=2025-01-15T10:56:42.469771Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:56:42.469771Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "c07e9238ac2366f1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.878",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.878Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220088",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220088\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220088\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.878",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.878Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220088",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:52.878",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:52.878Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91006042' and payload='{\"id\":\"bb40efff-7320-4bcf-9938-8e410fc3d884\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91006042\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:45.810",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:45.809Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bc529be5fc0918dd44cf654320c",
            "spanId": "918dd44cf654320c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:38.077",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:38.077Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1721905971883669]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bbe9d34fffb3781777b770ce83e",
            "spanId": "3781777b770ce83e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:38.074",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:38.074Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1721905971883669] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bbe9d34fffb3781777b770ce83e",
            "spanId": "3781777b770ce83e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.158",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.158Z",
            "@version": "1",
            "message": "Published AuthorizationRequestTopic with referenceId: {\"requestId\": \"9cc7ba96-1f87-4e68-a013-cdb44131f7a7\", \"customerId\": \"1711949863562173\", \"transactions\": [{\"transactionType\": \"PAY_TO_QR\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}]}for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173",
            "logger_name": "com.arbm.digibank.producer.customerAuthorizationRequestProducer",
            "thread_name": "kafka-producer-network-thread | producer-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "3cc02a836adbe1f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.155",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.155Z",
            "@version": "1",
            "message": "publish event for limits: [DUITNOW_QR] on topic (customer.authorization.change.request.v1)for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.154",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.154Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: SystemParameterEntity com.arbm.digibank.repository.systemparameter.SystemParameterRepository.findSystemParameterByName(String)\n parameters: [COOLING_OFF_PERIOD_PAY_TO_QR_LIMIT_INCREASE]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.151",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.151Z",
            "@version": "1",
            "message": "trying to publish Increased Limits Events for durations > 0for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.143",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.143Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1711949863562173, duitnowAccOrProxy=20000.00, duitnowQr=1500.00, duitnowAccIntrabank=500.00)]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.143",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.143Z",
            "@version": "1",
            "message": "Saving response under id 9cc7ba96-1f87-4e68-a013-cdb44131f7a7",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.14Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1711949863562173]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.14Z",
            "@version": "1",
            "message": "for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173currentLimits: CustomerLimitsEntity(customerId=1711949863562173, duitnowAccOrProxy=20000.00, duitnowQr=1000.00, duitnowAccIntrabank=500.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.14Z",
            "@version": "1",
            "message": "for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=20000.00, duitnowQr=1500.00, duitnowAccIntrabank=500.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.14Z",
            "@version": "1",
            "message": "DUITNOW_QR limits increased for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.14Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1711949863562173]\n totalTime: 0 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.139",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.138Z",
            "@version": "1",
            "message": "[9cc7ba96-1f87-4e68-a013-cdb44131f7a7] Received CustomerAccountLimitsUpdatedEvent' for customer [1711949863562173] with status [SUCCESS]event: {\"requestId\": \"9cc7ba96-1f87-4e68-a013-cdb44131f7a7\", \"customerId\": \"1711949863562173\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"500.00\", \"duitnow_qr\": \"1500.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"20000.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:24.139",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:24.138Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: 9cc7ba96-1f87-4e68-a013-cdb44131f7a7and customer id: 1711949863562173SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=9cc7ba96-1f87-4e68-a013-cdb44131f7a7, customerId=1711949863562173, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=20000.00, duitnowQr=1500.00, duitnowAccIntrabank=500.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1bb0a8430252d7fa60ab5dab4bdc",
            "spanId": "c4da48f8ef597dce",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.629",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.629Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=cd1b55ec-08cd-48e9-9149-1eba8e13306b)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.629",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.629Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.629",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.629Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1700008475658134, transactionId=f938baf7-6303-4a87-b146-599fe6fdf228, tmCreatedAt=2025-01-09T14:50:20.109777Z, amount=50, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.628",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.628Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.628",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.628Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.628",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.628Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.627",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.627Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/2a2e37ab-85c3-44c5-bc3d-65d1366b607b with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.623",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.623Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 2a2e37ab-85c3-44c5-bc3d-65d1366b607b",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.623",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.623Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.623",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.623Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.422",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.422Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.422",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.422Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1700008475658134, transactionId=f938baf7-6303-4a87-b146-599fe6fdf228, tmCreatedAt=2025-01-09T14:50:20.109777Z, amount=50, limitType=DUITNOW_QR)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.421",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.421Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.421",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.421Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.421",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.421Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.420",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.42Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/2a2e37ab-85c3-44c5-bc3d-65d1366b607b with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.416",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.416Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 2a2e37ab-85c3-44c5-bc3d-65d1366b607b",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.416",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.416Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.416",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.416Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.316",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.316Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.316",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.315Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1700008475658134, transactionId=f938baf7-6303-4a87-b146-599fe6fdf228, tmCreatedAt=2025-01-09T14:50:20.109777Z, amount=50, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.315Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.315Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f938baf7-6303-4a87-b146-599fe6fdf228) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.315",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.315Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.313",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.313Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/2a2e37ab-85c3-44c5-bc3d-65d1366b607b with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.309Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 2a2e37ab-85c3-44c5-bc3d-65d1366b607b",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.309Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.309Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f1b2849c-5bb5-44cc-a588-ca17deaaff43, createRequestId=O20250109RJHIMYKL040OQR91006632, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006632, postingInstructions=[PostingInstruction(id=c96665a1-cd64-46aa-975c-26a8190edf70, clientTransactionId=f938baf7-6303-4a87-b146-599fe6fdf228, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006632, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=50, denomination=MYR, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=50, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=50, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2a2e37ab-85c3-44c5-bc3d-65d1366b607b), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006632}, valueTimestamp=2025-01-09T14:50:20.109777Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:50:20.109777Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6d4018f2eb8f6864",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.309Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=dff41c15-ff6f-406f-97e9-72dc1848e28b, createRequestId=I20250109ARBKMYKL010ORM77336182, clientId=payments, clientBatchId=I20250109ARBKMYKL010ORM77336182, postingInstructions=[PostingInstruction(id=67f00e1a-683c-49b0-8f4f-b80a337de0b8, clientTransactionId=932a63ab-6d70-438c-baad-ed9181b4bc2e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109ARBKMYKL01023264849, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=10.76, denomination=MYR, accountId=8e5952c1-4757-4b76-a899-ffeabc0bb0aa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=10.76, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=10.76, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=8e5952c1-4757-4b76-a899-ffeabc0bb0aa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109ARBKMYKL010ORM77336182}, valueTimestamp=2025-01-09T14:49:46.223987Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:49:46.223987Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "6b093e24ae31472b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.309Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219821",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219821\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219821\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.309",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.308Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219821",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:17.308",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:17.308Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006600' and payload='{\"id\":\"651f8fc0-0098-4555-9391-b9f9f3099b1e\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006600\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:13.117",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:13.117Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ba5f56c4dab19367e4f156d67e2",
            "spanId": "19367e4f156d67e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:08.004",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:08.004Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ba0a85d4c61888e63b53f2210a8",
            "spanId": "888e63b53f2210a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:03.710",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:03.71Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1748736000000571]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b9bb46145c010543322dcdef3b1",
            "spanId": "10543322dcdef3b1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:58:03.707",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:58:03.707Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1748736000000571] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b9bb46145c010543322dcdef3b1",
            "spanId": "10543322dcdef3b1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.877",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.876Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.877",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.877Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=8d9e1a56-1de3-436a-a9ea-8f1d392e0b3a)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.876",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.876Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693706475048656, transactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, tmCreatedAt=2025-01-15T10:50:08.867089Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.875Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.875Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.875",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.875Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.872",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.872Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/7fb99d8c-c6e1-45ba-b301-a91da1041442 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.868",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.868Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.868",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.868Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.868",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.868Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 7fb99d8c-c6e1-45ba-b301-a91da1041442",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.667",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.667Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693706475048656, transactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, tmCreatedAt=2025-01-15T10:50:08.867089Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.667",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.667Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.666Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.666Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.666Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.663",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.663Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/7fb99d8c-c6e1-45ba-b301-a91da1041442 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.659",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.659Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.659",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.659Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.659",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.659Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 7fb99d8c-c6e1-45ba-b301-a91da1041442",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.558",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.558Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693706475048656, transactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, tmCreatedAt=2025-01-15T10:50:08.867089Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.558",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.558Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.557",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.557Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.557",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.557Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6f547e5b-0ff8-4b5a-9692-a66c43aed242) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.557",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.557Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.553",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.553Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/7fb99d8c-c6e1-45ba-b301-a91da1041442 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.548Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f891bc34-26a7-444d-bace-c70b714b4e01, createRequestId=I20250115MBBEMYKL010ORM04955446, clientId=payments, clientBatchId=I20250115MBBEMYKL010ORM04955446, postingInstructions=[PostingInstruction(id=27963b73-e28c-4fd3-8976-1ca0bd14af07, clientTransactionId=c6867f70-cbee-40ca-b375-30d627cfffb0, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115MBBEMYKL01004955446, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=400, denomination=MYR, accountId=9064ccae-5225-4202-95a8-bdb7e9652bbd, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=400, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=400, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9064ccae-5225-4202-95a8-bdb7e9652bbd), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115MBBEMYKL010ORM04955446}, valueTimestamp=2025-01-15T10:46:58.320574Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:46:58.320574Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "71f7227feddf869c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.549Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.549Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=bb40efff-7320-4bcf-9938-8e410fc3d884, createRequestId=O20250115RJHIMYKL010ORM91006042, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91006042, postingInstructions=[PostingInstruction(id=14592aac-0a17-4142-b036-71cfd81d7444, clientTransactionId=6f547e5b-0ff8-4b5a-9692-a66c43aed242, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091006042, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=7fb99d8c-c6e1-45ba-b301-a91da1041442), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91006042}, valueTimestamp=2025-01-15T10:50:08.867089Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:50:08.867089Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.549Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 7fb99d8c-c6e1-45ba-b301-a91da1041442",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "927cf983f5a3e305",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.548",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.548Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=5d0bdd3a-c2f1-4fdc-8b0c-00f633d68885, createRequestId=I20250115BOSTMYNB040OQR05061997, clientId=payments, clientBatchId=I20250115BOSTMYNB040OQR05061997, postingInstructions=[PostingInstruction(id=a95db79a-07f4-4c76-9679-b06492be3cf2, clientTransactionId=abb5a0b9-7983-4009-b109-70333fcf93b8, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115BOSTMYNB04005062066, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=WALL, paymentType=DUITNOW_QR_P2P, transferType=7}, committedPostings=[Posting(credit=true, amount=1000, denomination=MYR, accountId=f5e45dea-b739-4840-9c3e-2ca4280f6a6e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f5e45dea-b739-4840-9c3e-2ca4280f6a6e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115BOSTMYNB040OQR05061997}, valueTimestamp=2025-01-15T10:41:40.796307Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:41:40.796307Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "d67df719b9a87814",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.548",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.548Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=95636425-59fd-4ace-8859-cfa297c78654, createRequestId=O20250115RJHIMYKL110ORM91005985_REV, clientId=payments, clientBatchId=O20250115RJHIMYKL110ORM91005985_REV, postingInstructions=[PostingInstruction(id=12c693eb-f5e3-443b-bee5-51b31ce6f0e2, clientTransactionId=cf063587-1c4d-4cb4-b907-f470b25712b9, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_proxy, busMsgId=20250115RJHIMYKL11091005985_REV, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=DFLT, paymentType=DUITNOW_PROXY, transferType=5}, committedPostings=[Posting(credit=true, amount=150, denomination=MYR, accountId=4bcb8752-f82f-4c67-87ac-cca29e34e582, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=150, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=150, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=4bcb8752-f82f-4c67-87ac-cca29e34e582), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL110ORM91005985_REV}, valueTimestamp=2025-01-15T10:42:24.199098Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:42:24.199098Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "d31db57d08654556",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.547",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.547Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL040OQR91005970' and payload='{\"id\":\"44244404-9a2c-4690-96dc-e204e936b0b7\",\"create_request_id\":\"O20250115RJHIMYKL040OQR91005970\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.547",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.547Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220084",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:52.547",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:52.547Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220084",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220084\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220084\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.234",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.234Z",
            "@version": "1",
            "message": "Saving response under id 40a6c458-6d7b-434e-8d0f-d416fbdd73da",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.234",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.234Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.233",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.233Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.232",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.232Z",
            "@version": "1",
            "message": "for request id: 40a6c458-6d7b-434e-8d0f-d416fbdd73daand customer id: 1686046002063098updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.232",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.232Z",
            "@version": "1",
            "message": "for request id: 40a6c458-6d7b-434e-8d0f-d416fbdd73daand customer id: 1686046002063098currentLimits: CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.232",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.232Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.231",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.231Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: 40a6c458-6d7b-434e-8d0f-d416fbdd73daand customer id: 1686046002063098SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=40a6c458-6d7b-434e-8d0f-d416fbdd73da, customerId=1686046002063098, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.231",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.231Z",
            "@version": "1",
            "message": "[40a6c458-6d7b-434e-8d0f-d416fbdd73da] Received CustomerAccountLimitsUpdatedEvent' for customer [1686046002063098] with status [SUCCESS]event: {\"requestId\": \"40a6c458-6d7b-434e-8d0f-d416fbdd73da\", \"customerId\": \"1686046002063098\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"2000.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74fe79bbb6d603d6a6642e59cc",
            "spanId": "f2026c389de230d6",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.145",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.145Z",
            "@version": "1",
            "message": "Published AuthorizationRequestTopic with referenceId: {\"requestId\": \"a3029072-5549-447a-a54e-71d010b00303\", \"customerId\": \"1686046002063098\", \"transactions\": [{\"transactionType\": \"PAY_TO_ACCOUNT\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}, {\"transactionType\": \"PAY_TO_PROXY\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}]}for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.producer.customerAuthorizationRequestProducer",
            "thread_name": "kafka-producer-network-thread | producer-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "983ec926f6aed67a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.141",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.141Z",
            "@version": "1",
            "message": "publish event for limits: [DUITNOW_ACC_OR_PROXY] on topic (customer.authorization.change.request.v1)for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.140",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.14Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: SystemParameterEntity com.arbm.digibank.repository.systemparameter.SystemParameterRepository.findSystemParameterByName(String)\n parameters: [COOLING_OFF_PERIOD_PAY_TO_PROXY_LIMIT_INCREASE]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.138",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.138Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: SystemParameterEntity com.arbm.digibank.repository.systemparameter.SystemParameterRepository.findSystemParameterByName(String)\n parameters: [COOLING_OFF_PERIOD_PAY_TO_ACCOUNT_LIMIT_INCREASE]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.134",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.134Z",
            "@version": "1",
            "message": "trying to publish Increased Limits Events for durations > 0for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.127",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.127Z",
            "@version": "1",
            "message": "Saving response under id a3029072-5549-447a-a54e-71d010b00303",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.127",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.127Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.124Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.123Z",
            "@version": "1",
            "message": "DUITNOW_ACC_OR_PROXY limits increased for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.123Z",
            "@version": "1",
            "message": "for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.123Z",
            "@version": "1",
            "message": "for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098currentLimits: CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.124",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.123Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.122",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.122Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: a3029072-5549-447a-a54e-71d010b00303and customer id: 1686046002063098SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=a3029072-5549-447a-a54e-71d010b00303, customerId=1686046002063098, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=2000.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:24.122",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:24.121Z",
            "@version": "1",
            "message": "[a3029072-5549-447a-a54e-71d010b00303] Received CustomerAccountLimitsUpdatedEvent' for customer [1686046002063098] with status [SUCCESS]event: {\"requestId\": \"a3029072-5549-447a-a54e-71d010b00303\", \"customerId\": \"1686046002063098\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"2000.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b74eee426f1cb287796cdd623b9",
            "spanId": "791d854053e0ca4f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:19.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:19.209Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1748736000000312]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b6faf994651a454a4d9fb97f563",
            "spanId": "a454a4d9fb97f563",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:19.206",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:19.206Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1748736000000312] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b6faf994651a454a4d9fb97f563",
            "spanId": "a454a4d9fb97f563",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:18.952",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:18.952Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b6e51c67203236c53800cba6fc2",
            "spanId": "236c53800cba6fc2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.307",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.307Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=cbd668ca-f4f1-446c-8613-7ab5edb5e95e)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.307",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.307Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.307",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.307Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693477306867068, transactionId=90004fa2-2e92-4668-9385-b0df17ebd833, tmCreatedAt=2025-01-09T14:43:24.017006Z, amount=500, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.306",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.306Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.306",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.306Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.306",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.306Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.305",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.305Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/3e22f91a-0cfa-4439-820b-bf6d6880d336 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.301",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.301Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 3e22f91a-0cfa-4439-820b-bf6d6880d336",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.301",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.301Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.301",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.301Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.101",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.101Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.101",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.1Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693477306867068, transactionId=90004fa2-2e92-4668-9385-b0df17ebd833, tmCreatedAt=2025-01-09T14:43:24.017006Z, amount=500, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.100",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.1Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.100",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.1Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.100",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.1Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.098",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.098Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/3e22f91a-0cfa-4439-820b-bf6d6880d336 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.094",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.094Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 3e22f91a-0cfa-4439-820b-bf6d6880d336",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.094",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.094Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:17.094",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:17.094Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.993Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.993Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1693477306867068, transactionId=90004fa2-2e92-4668-9385-b0df17ebd833, tmCreatedAt=2025-01-09T14:43:24.017006Z, amount=500, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.993Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.993Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(90004fa2-2e92-4668-9385-b0df17ebd833) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.993Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.991",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.991Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/3e22f91a-0cfa-4439-820b-bf6d6880d336 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.987",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.987Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 3e22f91a-0cfa-4439-820b-bf6d6880d336",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.987",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.987Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.987",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.987Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=651f8fc0-0098-4555-9391-b9f9f3099b1e, createRequestId=O20250109RJHIMYKL010ORM91006600, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006600, postingInstructions=[PostingInstruction(id=adf197bf-18a2-4536-bf51-2cb54d52dde5, clientTransactionId=90004fa2-2e92-4668-9385-b0df17ebd833, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006600, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=3e22f91a-0cfa-4439-820b-bf6d6880d336), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006600}, valueTimestamp=2025-01-09T14:43:24.017006Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:43:24.017006Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "64901355c72f3a1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.987",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.987Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219820",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219820\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219820\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.986",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.986Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219820",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:16.986",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:16.986Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006596' and payload='{\"id\":\"a9ce9c6e-462c-4910-9fe8-219eca46e867\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006596\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:10.037",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:10.037Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1725344192710330]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b66b745ea4578890da6602b0cdf",
            "spanId": "78890da6602b0cdf",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:57:10.034",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:57:10.034Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1725344192710330] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b66b745ea4578890da6602b0cdf",
            "spanId": "78890da6602b0cdf",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:59.744",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:59.744Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b5be4096bff640f8f963552477b",
            "spanId": "640f8f963552477b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:53.425",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:53.425Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b55cf5b3ee68b56887b14715c93",
            "spanId": "8b56887b14715c93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.545",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.545Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1729131432226901, transactionId=6a012296-66da-4646-aeef-2a242914b192, tmCreatedAt=2025-01-15T10:40:48.473315Z, amount=11.4, limitType=DUITNOW_QR)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.545",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.545Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.545",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.545Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=88ba7c46-4f39-47cd-a71f-d0e152055347)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.544",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.543Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.543",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.543Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.543",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.543Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.541",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.541Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/cf7de0d6-4a65-48b8-916e-682bc2a9eda3 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.536Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.537Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.537",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.537Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: cf7de0d6-4a65-48b8-916e-682bc2a9eda3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.431",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.431Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1707446554714232]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b54ec994ba37e198ae56eda85a7",
            "spanId": "7e198ae56eda85a7",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.428",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.428Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1707446554714232] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b54ec994ba37e198ae56eda85a7",
            "spanId": "7e198ae56eda85a7",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.335Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1729131432226901, transactionId=6a012296-66da-4646-aeef-2a242914b192, tmCreatedAt=2025-01-15T10:40:48.473315Z, amount=11.4, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.336Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.334Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.334Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.334Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.331",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.331Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/cf7de0d6-4a65-48b8-916e-682bc2a9eda3 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.328",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.327Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: cf7de0d6-4a65-48b8-916e-682bc2a9eda3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.327Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.327Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.227",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.226Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1729131432226901, transactionId=6a012296-66da-4646-aeef-2a242914b192, tmCreatedAt=2025-01-15T10:40:48.473315Z, amount=11.4, limitType=DUITNOW_QR)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.227",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.226Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.225",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.225Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.225",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.225Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(6a012296-66da-4646-aeef-2a242914b192) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.225",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.225Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.221",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.221Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/cf7de0d6-4a65-48b8-916e-682bc2a9eda3 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.217",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.217Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.217",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.217Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=44244404-9a2c-4690-96dc-e204e936b0b7, createRequestId=O20250115RJHIMYKL040OQR91005970, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005970, postingInstructions=[PostingInstruction(id=a3f43a45-24de-4678-910f-a27d585a8e08, clientTransactionId=6a012296-66da-4646-aeef-2a242914b192, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005970, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=11.4, denomination=MYR, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=11.4, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=11.4, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=cf7de0d6-4a65-48b8-916e-682bc2a9eda3), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005970}, valueTimestamp=2025-01-15T10:40:48.473315Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:40:48.473315Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.217",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.217Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: cf7de0d6-4a65-48b8-916e-682bc2a9eda3",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "edcc31747cca30a8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.215Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91005939' and payload='{\"id\":\"1829a1ac-deae-471e-9478-adbc1f645a7c\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91005939\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.216Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220083",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:52.216",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:52.216Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220083",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220083\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220083\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:50.638",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:50.638Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b52b5ac2b4f26ffc60a2e00cc67",
            "spanId": "26ffc60a2e00cc67",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:44.056",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:44.056Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1725350724036095]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b4c24b4794e45c024798006ad41",
            "spanId": "45c024798006ad41",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:44.053",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:44.053Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1725350724036095] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b4c24b4794e45c024798006ad41",
            "spanId": "45c024798006ad41",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.082",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.081Z",
            "@version": "1",
            "message": "Saving response under id a2ced578-d600-45ba-bb07-18da4efb1f43",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.081",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.081Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.078",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.078Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.077",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.077Z",
            "@version": "1",
            "message": "for request id: a2ced578-d600-45ba-bb07-18da4efb1f43and customer id: 1686046002063098updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.077",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.077Z",
            "@version": "1",
            "message": "for request id: a2ced578-d600-45ba-bb07-18da4efb1f43and customer id: 1686046002063098currentLimits: CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1501.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.077",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.077Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.076",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.075Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: a2ced578-d600-45ba-bb07-18da4efb1f43and customer id: 1686046002063098SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=a2ced578-d600-45ba-bb07-18da4efb1f43, customerId=1686046002063098, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:24.076",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:24.075Z",
            "@version": "1",
            "message": "[a2ced578-d600-45ba-bb07-18da4efb1f43] Received CustomerAccountLimitsUpdatedEvent' for customer [1686046002063098] with status [SUCCESS]event: {\"requestId\": \"a2ced578-d600-45ba-bb07-18da4efb1f43\", \"customerId\": \"1686046002063098\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"1500.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b38ed2fd7c8129d2ad30eece9c9",
            "spanId": "cde08a6b3f8e53c4",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.985",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.985Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1722819284215485, transactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, tmCreatedAt=2025-01-09T14:41:12.988361Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.985",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.985Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.985",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.985Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=cabbcfd6-0208-4ad9-8fe7-26626d380c33)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.984",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.984Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.984",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.984Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.984",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.984Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.983",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.982Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4104952-7888-4250-9d46-703d92dd9469 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.979",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.979Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.979",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.979Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.979",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.979Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4104952-7888-4250-9d46-703d92dd9469",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.778",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.778Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1722819284215485, transactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, tmCreatedAt=2025-01-09T14:41:12.988361Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.778",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.778Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.777",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.777Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.777",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.777Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.777",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.777Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.775",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.775Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4104952-7888-4250-9d46-703d92dd9469 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.772",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.771Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.772",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.771Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.772",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.771Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4104952-7888-4250-9d46-703d92dd9469",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.671",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.67Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1722819284215485, transactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, tmCreatedAt=2025-01-09T14:41:12.988361Z, amount=1000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.671",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.671Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.670",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.669Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.670",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.669Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(acb414c2-1bc6-4bc6-8e95-e2a14820277d) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.670",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.67Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.668",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.668Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4104952-7888-4250-9d46-703d92dd9469 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.664",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.664",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4104952-7888-4250-9d46-703d92dd9469",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.663",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL040OQR91006584' and payload='{\"id\":\"eac43586-c5be-4c1f-a3fe-607320b0ab36\",\"create_request_id\":\"O20250109RJHIMYKL040OQR91006584\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.663",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219819",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.663",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219819",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219819\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219819\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:16.663",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:16.663Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a9ce9c6e-462c-4910-9fe8-219eca46e867, createRequestId=O20250109RJHIMYKL010ORM91006596, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006596, postingInstructions=[PostingInstruction(id=5eb73475-1677-4065-a99b-8921a08fa1b7, clientTransactionId=acb414c2-1bc6-4bc6-8e95-e2a14820277d, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006596, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1000, denomination=MYR, accountId=e4104952-7888-4250-9d46-703d92dd9469, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4104952-7888-4250-9d46-703d92dd9469), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006596}, valueTimestamp=2025-01-09T14:41:12.988361Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:41:12.988361Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "1fc6570e9abc3590",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:15.847",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:15.847Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b2f0bdc1f2a6e4caabda7011f8b",
            "spanId": "6e4caabda7011f8b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:06.512",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:06.512Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1702620082506113]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b2652165acb5f3c0d15be7a6fe1",
            "spanId": "5f3c0d15be7a6fe1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:56:06.510",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:56:06.509Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1702620082506113] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b2652165acb5f3c0d15be7a6fe1",
            "spanId": "5f3c0d15be7a6fe1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.214Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1670702393918769, transactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, tmCreatedAt=2025-01-15T10:36:13.786233Z, amount=1, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.214Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.214Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=cea22a83-55b4-4ac6-9056-e9170cbf9620)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.212Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.212Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.212Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.210",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.21Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.205Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.205Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.205Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.138",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.137Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b1835fa67c7a7bd5d2a9f6adadc",
            "spanId": "a7bd5d2a9f6adadc",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.004",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.004Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1670702393918769, transactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, tmCreatedAt=2025-01-15T10:36:13.786233Z, amount=1, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.004",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.004Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.003",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.003Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.003",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.003Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.003",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52.003Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:52.000",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:52Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.996",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.995Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.995",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.995Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.995",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.995Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.895",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.894Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1670702393918769, transactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, tmCreatedAt=2025-01-15T10:36:13.786233Z, amount=1, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.895",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.894Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.893Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.893Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(40849dd6-03b3-4ada-99e8-3b430e02c661) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.893Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.890",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.89Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.886",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.885Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.886",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.886Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=1829a1ac-deae-471e-9478-adbc1f645a7c, createRequestId=O20250115RJHIMYKL010ORM91005939, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005939, postingInstructions=[PostingInstruction(id=c7f251a4-b039-4925-8215-016ddef5a580, clientTransactionId=40849dd6-03b3-4ada-99e8-3b430e02c661, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005939, cdtracctTpPrtry=CACC, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=1, denomination=MYR, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=1, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=1, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005939}, valueTimestamp=2025-01-15T10:36:13.786233Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:36:13.786233Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.886",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.886Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: f2ca6654-1109-4c03-a3c3-1da4b4e3bb6c",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "42def6066c21d05f",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.885",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.884Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220082",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.885",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.885Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220082",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220082\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220082\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.884",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.884Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL030OQR91005881' and payload='{\"id\":\"d9d7f443-cbf0-4c29-b952-dda03dc606b2\",\"create_request_id\":\"O20250115RJHIMYKL030OQR91005881\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:51.456",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:51.456Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b17998a87803b5132f646e00a04",
            "spanId": "3b5132f646e00a04",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:41.023",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:41.023Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1685538559152684]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b0d41b4e2cf7bad1b83e8dba98d",
            "spanId": "7bad1b83e8dba98d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:41.021",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:41.02Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1685538559152684] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b0d41b4e2cf7bad1b83e8dba98d",
            "spanId": "7bad1b83e8dba98d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:37.739",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:37.739Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1748736000000022]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b092cc2cb63da76c7025912f57a",
            "spanId": "da76c7025912f57a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:37.737",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:37.737Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1748736000000022] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1b092cc2cb63da76c7025912f57a",
            "spanId": "da76c7025912f57a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.935",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.935Z",
            "@version": "1",
            "message": "Published AuthorizationRequestTopic with referenceId: {\"requestId\": \"9c25858e-e1a4-4793-9b90-a36939138112\", \"customerId\": \"1686046002063098\", \"transactions\": [{\"transactionType\": \"PAY_TO_ACCOUNT\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}, {\"transactionType\": \"PAY_TO_PROXY\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}]}for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.producer.customerAuthorizationRequestProducer",
            "thread_name": "kafka-producer-network-thread | producer-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "072ad50cd6397a2b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.931",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.931Z",
            "@version": "1",
            "message": "publish event for limits: [DUITNOW_ACC_OR_PROXY] on topic (customer.authorization.change.request.v1)for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.930",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.929Z",
            "@version": "1",
            "message": "trying to publish Increased Limits Events for durations > 0for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.922",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.922Z",
            "@version": "1",
            "message": "Saving response under id 9c25858e-e1a4-4793-9b90-a36939138112",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.922",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.922Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1501.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.919",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.919Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.919",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.918Z",
            "@version": "1",
            "message": "DUITNOW_ACC_OR_PROXY limits increased for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.919",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.918Z",
            "@version": "1",
            "message": "for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=1501.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.918",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.918Z",
            "@version": "1",
            "message": "for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098currentLimits: CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.918",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.918Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.917",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.917Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: 9c25858e-e1a4-4793-9b90-a36939138112and customer id: 1686046002063098SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=9c25858e-e1a4-4793-9b90-a36939138112, customerId=1686046002063098, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=1501.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:23.917",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:23.917Z",
            "@version": "1",
            "message": "[9c25858e-e1a4-4793-9b90-a36939138112] Received CustomerAccountLimitsUpdatedEvent' for customer [1686046002063098] with status [SUCCESS]event: {\"requestId\": \"9c25858e-e1a4-4793-9b90-a36939138112\", \"customerId\": \"1686046002063098\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"1501.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1afb2e651843c100abe53e8af15d",
            "spanId": "83d9b5428d16972c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.662",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.662Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=93f3df71-7c56-4320-aa22-bf6375be9260)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.662",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.661Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.662",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.661Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1715663362750719, transactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, tmCreatedAt=2025-01-09T14:36:10.639051Z, amount=61.08, limitType=DUITNOW_QR)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.66Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.66Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.66Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.659",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.659Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/260c1a4c-fcf0-4815-abf2-fc4fe9270afa with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.655",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.655Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 260c1a4c-fcf0-4815-abf2-fc4fe9270afa",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.655",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.655Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.655",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.655Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.454",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.454Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.454",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.454Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1715663362750719, transactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, tmCreatedAt=2025-01-09T14:36:10.639051Z, amount=61.08, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.453",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.453Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.453",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.453Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.453",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.453Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.452",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.451Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/260c1a4c-fcf0-4815-abf2-fc4fe9270afa with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.447",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.447Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 260c1a4c-fcf0-4815-abf2-fc4fe9270afa",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.447",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.447Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.444",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.443Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.343",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.343Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.343",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.343Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1715663362750719, transactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, tmCreatedAt=2025-01-09T14:36:10.639051Z, amount=61.08, limitType=DUITNOW_QR)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.342",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.342Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.342",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.342Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(ba0c98e0-7292-438e-b84b-dc6feb95235a) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.342",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.342Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.341",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.34Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/260c1a4c-fcf0-4815-abf2-fc4fe9270afa with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.337",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.337Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 260c1a4c-fcf0-4815-abf2-fc4fe9270afa",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.337",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.337Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.337",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.336Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=eac43586-c5be-4c1f-a3fe-607320b0ab36, createRequestId=O20250109RJHIMYKL040OQR91006584, clientId=payments, clientBatchId=O20250109RJHIMYKL040OQR91006584, postingInstructions=[PostingInstruction(id=acf44822-4a20-496d-9cfd-b69634548333, clientTransactionId=ba0c98e0-7292-438e-b84b-dc6feb95235a, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250109RJHIMYKL04091006584, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=61.08, denomination=MYR, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=61.08, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=61.08, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=260c1a4c-fcf0-4815-abf2-fc4fe9270afa), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL040OQR91006584}, valueTimestamp=2025-01-09T14:36:10.639051Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:10.639051Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "aa79d3e78b3a07e2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.336Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=8ed316a1-2429-45f3-8a65-e988d71b34a5, createRequestId=I20250109MBBEMYKL010ORM07642783, clientId=payments, clientBatchId=I20250109MBBEMYKL010ORM07642783, postingInstructions=[PostingInstruction(id=47ec87b4-3a81-4fff-aaa7-dae2f927bb44, clientTransactionId=1a1bc731-f4d3-4955-ba7b-37b2f68dfcad, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109MBBEMYKL01007642783, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=37.05, denomination=MYR, accountId=2b9ffef0-ed9f-4e01-aed8-a7ff2b3200c2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=37.05, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=37.05, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2b9ffef0-ed9f-4e01-aed8-a7ff2b3200c2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109MBBEMYKL010ORM07642783}, valueTimestamp=2025-01-09T14:36:06.633112Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:36:06.633112Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "49e89d5cc2c1e7bf",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.336Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219817",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219817\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219817\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.336Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219817",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:55:16.336",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:55:16.335Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006583' and payload='{\"id\":\"fc9161c4-3355-4be8-b5ab-f20dd3638389\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006583\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.882",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.882Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=6a61e2d7-23f9-4b63-9c9e-91762e578430)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.882",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.882Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.882",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.882Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1709285140844645, transactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, tmCreatedAt=2025-01-15T10:31:18.697117Z, amount=10, limitType=DUITNOW_QR)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.881Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.881Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.881Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.878",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.878Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4b99eec-a93b-4417-8c81-f0e32d0be7c7 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.874",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.874Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4b99eec-a93b-4417-8c81-f0e32d0be7c7",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.874",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.874Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.874",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.874Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.673Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.673Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1709285140844645, transactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, tmCreatedAt=2025-01-15T10:31:18.697117Z, amount=10, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.671Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.671Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.671Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.669Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4b99eec-a93b-4417-8c81-f0e32d0be7c7 with method: GET succeeded with status code 200: OK in totalTime: 9 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.66Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4b99eec-a93b-4417-8c81-f0e32d0be7c7",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.66Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.666",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.66Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.628",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.559Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.628",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.559Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1709285140844645, transactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, tmCreatedAt=2025-01-15T10:31:18.697117Z, amount=10, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.558Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.557Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(843a6215-ef13-42b0-82ba-b8c35b6593ca) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.557Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.554Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/e4b99eec-a93b-4417-8c81-f0e32d0be7c7 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.549Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: e4b99eec-a93b-4417-8c81-f0e32d0be7c7",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.549Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.549Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d9d7f443-cbf0-4c29-b952-dda03dc606b2, createRequestId=O20250115RJHIMYKL030OQR91005881, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005881, postingInstructions=[PostingInstruction(id=ff539cf6-a782-47ee-9c64-655234da9fcc, clientTransactionId=843a6215-ef13-42b0-82ba-b8c35b6593ca, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005881, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=10, denomination=MYR, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=10, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=10, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=e4b99eec-a93b-4417-8c81-f0e32d0be7c7), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005881}, valueTimestamp=2025-01-15T10:31:18.697117Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:31:18.697117Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "62f844bc7ce7bd93",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.549Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=3ce6738c-329c-4405-95e8-116b42616e9f, createRequestId=I20250115MBBEMYKL010ORM04860304, clientId=payments, clientBatchId=I20250115MBBEMYKL010ORM04860304, postingInstructions=[PostingInstruction(id=52abb8d6-05fa-45f1-973f-681df84327e1, clientTransactionId=9878cbc4-8fe4-4719-a617-b0e36695ddcf, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115MBBEMYKL01004860304, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=4180, denomination=MYR, accountId=4bb4001a-fadd-4a8e-b173-e7ff65f464ce, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=4180, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=4180, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=4bb4001a-fadd-4a8e-b173-e7ff65f464ce), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115MBBEMYKL010ORM04860304}, valueTimestamp=2025-01-15T10:29:19.822307Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:29:19.822307Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "16fb845ef1e45466",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.548Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220080",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220080\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220080\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.548Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220080",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.548Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91005799' and payload='{\"id\":\"284df371-7c53-4685-8b4b-a8e7634c7a55\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91005799\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:51.338",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:51.337Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1adba763f60058780e0ef7d98626",
            "spanId": "58780e0ef7d98626",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:44.996",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:44.995Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ad4ca3b07e6014114c8c97bafa8",
            "spanId": "014114c8c97bafa8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:40.674",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:40.674Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1725866550674931]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ad0ca8adb3b33308825d657925c",
            "spanId": "33308825d657925c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:40.672",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:40.672Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1725866550674931] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ad0ca8adb3b33308825d657925c",
            "spanId": "33308825d657925c",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:32.215",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:32.215Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1724572518672389]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ac8e07db78b658f13cb22d00446",
            "spanId": "658f13cb22d00446",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:32.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:32.212Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1724572518672389] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ac8e07db78b658f13cb22d00446",
            "spanId": "658f13cb22d00446",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:28.891",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:28.891Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ac4d0cde449eada6b2306267dbe",
            "spanId": "eada6b2306267dbe",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.923",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.923Z",
            "@version": "1",
            "message": "Published AuthorizationRequestTopic with referenceId: {\"requestId\": \"46dc75ed-0d58-4321-981c-5a9ffee2e4b1\", \"customerId\": \"1686046002063098\", \"transactions\": [{\"transactionType\": \"PAY_TO_ACCOUNT\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}, {\"transactionType\": \"PAY_TO_PROXY\", \"action\": \"BLOCK\", \"duration\": 12.0, \"reason\": \"LIMIT_INCREASE\"}]}for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.producer.customerAuthorizationRequestProducer",
            "thread_name": "kafka-producer-network-thread | producer-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "7f966709d07dad60",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.915",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.915Z",
            "@version": "1",
            "message": "publish event for limits: [DUITNOW_ACC_OR_PROXY] on topic (customer.authorization.change.request.v1)for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.914",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.914Z",
            "@version": "1",
            "message": "trying to publish Increased Limits Events for durations > 0for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.906",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.905Z",
            "@version": "1",
            "message": "Saving response under id 46dc75ed-0d58-4321-981c-5a9ffee2e4b1",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.906",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.905Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 4 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.901",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.901Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.899",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.899Z",
            "@version": "1",
            "message": "DUITNOW_ACC_OR_PROXY limits increased for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.899",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.899Z",
            "@version": "1",
            "message": "for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.899",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.899Z",
            "@version": "1",
            "message": "for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098currentLimits: CustomerLimitsEntity(customerId=1686046002063098, duitnowAccOrProxy=1.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.899",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.899Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1686046002063098]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.898",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.897Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: 46dc75ed-0d58-4321-981c-5a9ffee2e4b1and customer id: 1686046002063098SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=46dc75ed-0d58-4321-981c-5a9ffee2e4b1, customerId=1686046002063098, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=1500.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:23.898",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:23.897Z",
            "@version": "1",
            "message": "[46dc75ed-0d58-4321-981c-5a9ffee2e4b1] Received CustomerAccountLimitsUpdatedEvent' for customer [1686046002063098] with status [SUCCESS]event: {\"requestId\": \"46dc75ed-0d58-4321-981c-5a9ffee2e4b1\", \"customerId\": \"1686046002063098\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"1500.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abfea751abcdb4aa52b35d1adb5",
            "spanId": "530be89bd18eedeb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:20.890",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:20.89Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1714656412157668]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abca2c07a12398bc0658998d57a",
            "spanId": "398bc0658998d57a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:20.888",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:20.888Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1714656412157668] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abca2c07a12398bc0658998d57a",
            "spanId": "398bc0658998d57a",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:19.461",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:19.461Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1abb4ec4cf67616b3ab2aa8e930b",
            "spanId": "616b3ab2aa8e930b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.335",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.335Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000227, transactionId=867d5324-4d81-4024-b69b-57343011a757, tmCreatedAt=2025-01-09T14:35:54.587276Z, amount=670, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.335",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.335Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.335",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.335Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=5d69c5fd-a795-43db-ac2f-c5b46fd293ed)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.334Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.334Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.334Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.333",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.332Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/0ca30afa-5d33-406f-baa0-76770630ead6 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.329",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.329Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.329",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.329Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.329",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.329Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 0ca30afa-5d33-406f-baa0-76770630ead6",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.128",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.128Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000227, transactionId=867d5324-4d81-4024-b69b-57343011a757, tmCreatedAt=2025-01-09T14:35:54.587276Z, amount=670, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.128",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.128Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.127",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.127Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.127",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.127Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.127",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.127Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.126",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.126Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/0ca30afa-5d33-406f-baa0-76770630ead6 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.122",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.122Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.122",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.122Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.122",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.122Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 0ca30afa-5d33-406f-baa0-76770630ead6",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.021",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.021Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000227, transactionId=867d5324-4d81-4024-b69b-57343011a757, tmCreatedAt=2025-01-09T14:35:54.587276Z, amount=670, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.021",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.021Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.020",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.02Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.020",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.02Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(867d5324-4d81-4024-b69b-57343011a757) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.020",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.02Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.019",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.019Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/0ca30afa-5d33-406f-baa0-76770630ead6 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.015",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.015",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 0ca30afa-5d33-406f-baa0-76770630ead6",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.014",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006570' and payload='{\"id\":\"b58589c5-d397-431a-a0c5-e8d2a6fee249\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006570\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.014",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219816",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.014",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219816",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219816\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219816\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:16.014",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:16.014Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=fc9161c4-3355-4be8-b5ab-f20dd3638389, createRequestId=O20250109RJHIMYKL010ORM91006583, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006583, postingInstructions=[PostingInstruction(id=90676c1b-db75-4d9c-9b34-89c89d30d1aa, clientTransactionId=867d5324-4d81-4024-b69b-57343011a757, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006583, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=670, denomination=MYR, accountId=0ca30afa-5d33-406f-baa0-76770630ead6, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=670, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=670, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=0ca30afa-5d33-406f-baa0-76770630ead6), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006583}, valueTimestamp=2025-01-09T14:35:54.587276Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:35:54.587276Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "529a264983c4ddcb",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:13.668",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:13.668Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1698766755093982]\n totalTime: 2 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ab5ee41245ea4a976a21499395e",
            "spanId": "a4a976a21499395e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:13.664",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:13.664Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1698766755093982] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ab5ee41245ea4a976a21499395e",
            "spanId": "a4a976a21499395e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:11.853",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:11.853Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1ab305c6e8ef9ac615b5c893f904",
            "spanId": "9ac615b5c893f904",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:02.739",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:02.739Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1705067430572410]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1aaab2c5578bc471285090340677",
            "spanId": "c471285090340677",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:54:02.735",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:54:02.734Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1705067430572410] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1aaab2c5578bc471285090340677",
            "spanId": "c471285090340677",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.626",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.546Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=184e909a-553e-40d9-b14b-f4aaf743d8e8)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.542Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/d9d7a214-3139-4a68-9bf2-75ead205b363 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.545Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.545Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.545Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.546Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688396702602347, transactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, tmCreatedAt=2025-01-15T10:18:15.550529Z, amount=300, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.546Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.538Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: d9d7a214-3139-4a68-9bf2-75ead205b363",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.538Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.538",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.537Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.337",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.337Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.337",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.337Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688396702602347, transactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, tmCreatedAt=2025-01-15T10:18:15.550529Z, amount=300, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.334Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.334Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.334",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.334Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.331",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.331Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/d9d7a214-3139-4a68-9bf2-75ead205b363 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.327Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: d9d7a214-3139-4a68-9bf2-75ead205b363",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.327Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.327",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.327Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.226",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.226Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.226",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.226Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1688396702602347, transactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, tmCreatedAt=2025-01-15T10:18:15.550529Z, amount=300, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 7 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.224",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.224Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.224",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.224Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(f764dfd6-f387-4a18-8e8a-b1359dcc0284) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.224",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.224Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.218",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.218Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/d9d7a214-3139-4a68-9bf2-75ead205b363 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.214Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: d9d7a214-3139-4a68-9bf2-75ead205b363",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.214",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.213Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.213Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=284df371-7c53-4685-8b4b-a8e7634c7a55, createRequestId=O20250115RJHIMYKL010ORM91005799, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005799, postingInstructions=[PostingInstruction(id=175baa2e-de98-4ed8-9671-396f7a7c1f26, clientTransactionId=f764dfd6-f387-4a18-8e8a-b1359dcc0284, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005799, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=300, denomination=MYR, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=d9d7a214-3139-4a68-9bf2-75ead205b363), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005799}, valueTimestamp=2025-01-15T10:18:15.550529Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:18:15.550529Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1e5aadb9f14e5920",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.213Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=d0e569c2-33f8-4842-922b-3436640ccafc, createRequestId=I20250115MBBEMYKL040OQR88404947, clientId=payments, clientBatchId=I20250115MBBEMYKL040OQR88404947, postingInstructions=[PostingInstruction(id=0703364a-7b7a-4d46-b116-662446371f3f, clientTransactionId=fdfc581d-2428-4601-ab9d-2c23d3cc9423, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115MBBEMYKL04088404947, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=7}, committedPostings=[Posting(credit=true, amount=300, denomination=MYR, accountId=2d53b2d8-7591-45ab-ba2c-d5b7c608da4a, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=300, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=300, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=2d53b2d8-7591-45ab-ba2c-d5b7c608da4a), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250115MBBEMYKL040OQR88404947}, valueTimestamp=2025-01-15T10:10:46.282547Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:46.282547Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "e381e8d95e878444",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.213",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.213Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=25372053-debf-4cc1-80b6-77c7ffc8f43d, createRequestId=O20250115RJHIMYKL030OQR91005755_REV, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755_REV, postingInstructions=[PostingInstruction(id=e23f3d2d-7ec1-4edd-9786-74e01fe4cb1f, clientTransactionId=78763084-5da2-4c31-b22e-49e40f532732, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755_REV, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=DFLT, paymentType=DUITNOW_QR_CTM, transferType=7}, committedPostings=[Posting(credit=true, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755_REV}, valueTimestamp=2025-01-15T10:10:25.005792Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:25.005792Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "1c8fee100ab0de42",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.212Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220077",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220077\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220077\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.212Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220077",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:51.212",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:51.212Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL030OQR91005755' and payload='{\"id\":\"de9fda00-8e4f-4600-bebd-b3240ab7ea01\",\"create_request_id\":\"O20250115RJHIMYKL030OQR91005755\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:37.486",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:37.486Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a9114f08812ef35349c8ba9dd53",
            "spanId": "ef35349c8ba9dd53",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:18.547",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:18.547Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a7e18ab2b8d6dbbc827e78102bd",
            "spanId": "6dbbc827e78102bd",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.012",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.012Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000568, transactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, tmCreatedAt=2025-01-09T14:32:30.815344Z, amount=2000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.012",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.012Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.012",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.012Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=235cb8dd-b6f2-4617-bb9f-bd56f3d960b2)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.011",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.011Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.011",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.011Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.011",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.011Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.009",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.009Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.005",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.005Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.005",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.005Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:16.005",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:16.005Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.804",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.804Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000568, transactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, tmCreatedAt=2025-01-09T14:32:30.815344Z, amount=2000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.804",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.804Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.803",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.803Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.803",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.803Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.803",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.803Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.802",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.802Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.798",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.798Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.798",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.798Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.798",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.798Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.697",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.697Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1748736000000568, transactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, tmCreatedAt=2025-01-09T14:32:30.815344Z, amount=2000, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.697",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.697Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.696",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.696Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.696",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.696Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(e054ef8e-9523-4a90-b02e-c00807d32c84) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.696",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.696Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.695",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.695Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.691",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.691Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=dcf55de9-0a91-437d-a1e9-6484db7466bf, createRequestId=I20250109MBBEMYKL010ORM07627984, clientId=payments, clientBatchId=I20250109MBBEMYKL010ORM07627984, postingInstructions=[PostingInstruction(id=6b0dc5af-f17f-4e51-82ee-7c892ffa6e29, clientTransactionId=d71bd95d-d433-48d3-ac28-924af7fe746b, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109MBBEMYKL01007627984, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=5}, committedPostings=[Posting(credit=true, amount=26000, denomination=MYR, accountId=f042caee-768a-4ff3-892e-80384984d5ae, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=false, amount=26000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=ExternalPostingInstruction(amount=26000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=f042caee-768a-4ff3-892e-80384984d5ae), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), outboundHardSettlement=null, transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=I20250109MBBEMYKL010ORM07627984}, valueTimestamp=2025-01-09T14:31:47.747600Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:31:47.747600Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "5e163f83198eefd8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.691",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.691Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.691",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.691Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=b58589c5-d397-431a-a0c5-e8d2a6fee249, createRequestId=O20250109RJHIMYKL010ORM91006570, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006570, postingInstructions=[PostingInstruction(id=e8d1ff67-a9eb-4b03-bb99-4f4e913e9cbd, clientTransactionId=e054ef8e-9523-4a90-b02e-c00807d32c84, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006570, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=2000, denomination=MYR, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=2000, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=2000, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006570}, valueTimestamp=2025-01-09T14:32:30.815344Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:32:30.815344Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.691",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.691Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9fa6d9fa-6d71-41b3-9db9-2c92ce37c29f",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0df9f8089f38c3f5",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.690",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.69Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006561' and payload='{\"id\":\"f7022847-4d43-4988-8a63-8240775f7c04\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006561\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.690",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.69Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219814",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:15.690",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:15.69Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219814",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219814\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219814\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:10.617",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:10.616Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1687582547453643]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a763ada14453659b220ad502798",
            "spanId": "3659b220ad502798",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:10.615",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:10.614Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1687582547453643] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a763ada14453659b220ad502798",
            "spanId": "3659b220ad502798",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:10.260",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:10.26Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1714656412157668]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a76110cb97024c0b3dca3fa2e1d",
            "spanId": "24c0b3dca3fa2e1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:53:10.258",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:53:10.258Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1714656412157668] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a76110cb97024c0b3dca3fa2e1d",
            "spanId": "24c0b3dca3fa2e1d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.211",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.211Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=21c874cd-186d-4f4f-8ee7-69955921c4cc)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.211",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.211Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.211",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.211Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707635769657484, transactionId=2d44b898-42d3-497d-8687-85819d680212, tmCreatedAt=2025-01-15T10:10:22.505367Z, amount=8, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.209Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.209Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.209",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.209Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.207",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.207Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/aad1f0df-3e15-4d66-85af-41cafb330f57 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.203",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.202Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: aad1f0df-3e15-4d66-85af-41cafb330f57",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.203",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.202Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.202",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.202Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.002",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.002Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.002",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51.001Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707635769657484, transactionId=2d44b898-42d3-497d-8687-85819d680212, tmCreatedAt=2025-01-15T10:10:22.505367Z, amount=8, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.000",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.000",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:51.000",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:51Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.997",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.997Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/aad1f0df-3e15-4d66-85af-41cafb330f57 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.993Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: aad1f0df-3e15-4d66-85af-41cafb330f57",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.994",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.993Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.993",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.993Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.892Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.893",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.892Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1707635769657484, transactionId=2d44b898-42d3-497d-8687-85819d680212, tmCreatedAt=2025-01-15T10:10:22.505367Z, amount=8, limitType=DUITNOW_QR)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.891",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.891Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.891",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.891Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(2d44b898-42d3-497d-8687-85819d680212) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.891",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.891Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.888",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.888Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/aad1f0df-3e15-4d66-85af-41cafb330f57 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.883Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: aad1f0df-3e15-4d66-85af-41cafb330f57",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.883Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.883Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=de9fda00-8e4f-4600-bebd-b3240ab7ea01, createRequestId=O20250115RJHIMYKL030OQR91005755, clientId=payments, clientBatchId=O20250115RJHIMYKL030OQR91005755, postingInstructions=[PostingInstruction(id=975b9e38-3dde-46be-a66c-755d03b53cff, clientTransactionId=2d44b898-42d3-497d-8687-85819d680212, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL03091005755, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_CTM, transferType=6}, committedPostings=[Posting(credit=false, amount=8, denomination=MYR, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=8, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=8, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=aad1f0df-3e15-4d66-85af-41cafb330f57), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL030OQR91005755}, valueTimestamp=2025-01-15T10:10:22.505367Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:10:22.505367Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "be4d5bc13d84ca9b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.883Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220076",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220076\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220076\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.883",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.882Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220076",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:50.882",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:50.882Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL040OQR91005747' and payload='{\"id\":\"9a1332a8-a598-4af3-b51c-796c2e6c4c26\",\"create_request_id\":\"O20250115RJHIMYKL040OQR91005747\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:44.655",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:44.587Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a5cb50d3b318840aa7048ede407",
            "spanId": "8840aa7048ede407",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:33.426",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:33.426Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1702903510346006]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a51fba6441b77e51720b439abd1",
            "spanId": "77e51720b439abd1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:33.424",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:33.424Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1702903510346006] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a51fba6441b77e51720b439abd1",
            "spanId": "77e51720b439abd1",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:26.205",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:26.205Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a4aa606b6af37a7ee44dc7ddbed",
            "spanId": "37a7ee44dc7ddbed",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.689",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.689Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=02560179-0983-4ecd-8841-ebdcc48b9611)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.689",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.689Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.689",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.689Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725508914203560, transactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, tmCreatedAt=2025-01-09T14:30:08.504376Z, amount=18861, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.689",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.688Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.689",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.688Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.688",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.688Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.687",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.687Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/13e31274-1381-4bc3-8aef-a8b4796794a2 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.684",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.683Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 13e31274-1381-4bc3-8aef-a8b4796794a2",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.684",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.683Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.683",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.683Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.483",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.483Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.483",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.482Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725508914203560, transactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, tmCreatedAt=2025-01-09T14:30:08.504376Z, amount=18861, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.480",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.48Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.480",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.48Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.480",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.48Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.478",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.478Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/13e31274-1381-4bc3-8aef-a8b4796794a2 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.475",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.475Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 13e31274-1381-4bc3-8aef-a8b4796794a2",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.475",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.475Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.475",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.475Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.374",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.374Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.374",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.374Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1725508914203560, transactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, tmCreatedAt=2025-01-09T14:30:08.504376Z, amount=18861, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 2 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.374",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.373Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.373",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.373Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(1d163d8e-f899-4bad-86d0-b07f8a03738e) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.373",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.373Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.372",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.372Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/13e31274-1381-4bc3-8aef-a8b4796794a2 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.368",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.368Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 13e31274-1381-4bc3-8aef-a8b4796794a2",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.368",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.368Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.368",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.368Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=f7022847-4d43-4988-8a63-8240775f7c04, createRequestId=O20250109RJHIMYKL010ORM91006561, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006561, postingInstructions=[PostingInstruction(id=6ec319ad-1315-4e67-836e-13daf8ca89e2, clientTransactionId=1d163d8e-f899-4bad-86d0-b07f8a03738e, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006561, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=18861, denomination=MYR, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=18861, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=18861, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=13e31274-1381-4bc3-8aef-a8b4796794a2), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006561}, valueTimestamp=2025-01-09T14:30:08.504376Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:30:08.504376Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "e3db819ebfe6288b",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.368",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.367Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-2@219813",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219813\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219813\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.367",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.367Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-2@219813",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:15.367",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:15.367Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250109RJHIMYKL010ORM91006549' and payload='{\"id\":\"a367a884-e841-4016-8345-cd2d25529ca7\",\"create_request_id\":\"O20250109RJHIMYKL010ORM91006549\",\"...' to topic integration.postings_api.payments.response.DLT and partition 2:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:14.332",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:14.332Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a3eb58468893cd45ae8418f46c2",
            "spanId": "3cd45ae8418f46c2",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:05.615",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:05.615Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1714656412157668]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a35ce754640b3043384a44a38b8",
            "spanId": "b3043384a44a38b8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:05.613",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:05.613Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1714656412157668] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a35ce754640b3043384a44a38b8",
            "spanId": "b3043384a44a38b8",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:03.037",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:03.036Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1724205931939852]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a3305e80635e399c93b85c633aa",
            "spanId": "e399c93b85c633aa",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:52:03.034",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:52:03.034Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1724205931939852] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a3305e80635e399c93b85c633aa",
            "spanId": "e399c93b85c633aa",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.882",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.882Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=5d7321c7-dd2c-4fe8-bbb5-2fc09e06183b)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.881Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.881Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1701673521348289, transactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, tmCreatedAt=2025-01-15T10:09:10.600756Z, amount=500, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.880",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.88Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.880",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.88Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.880",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.88Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.877",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.877Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9c74b271-834d-4e6e-b5a8-b4427597a535 with method: GET succeeded with status code 200: OK in totalTime: 4 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.873",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.873Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9c74b271-834d-4e6e-b5a8-b4427597a535",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.873",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.873Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.873",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.873Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.672",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.672Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.672",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.668Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1701673521348289, transactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, tmCreatedAt=2025-01-15T10:09:10.600756Z, amount=500, limitType=DUITNOW_QR)]\n totalTime: 3 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.667",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.667Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.667",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.667Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.667",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.667Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.664",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.664Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9c74b271-834d-4e6e-b5a8-b4427597a535 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.661",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.66Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9c74b271-834d-4e6e-b5a8-b4427597a535",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.66Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.660",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.66Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.560",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.559Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.559",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.559Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1701673521348289, transactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, tmCreatedAt=2025-01-15T10:09:10.600756Z, amount=500, limitType=DUITNOW_QR)]\n totalTime: 4 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor178.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor167.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor166.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.558",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.558Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.558",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.558Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(cb9623a9-8864-4b93-bbe5-f8e750990838) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.558",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.558Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.555",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.555Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/9c74b271-834d-4e6e-b5a8-b4427597a535 with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.550",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.55Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: 9c74b271-834d-4e6e-b5a8-b4427597a535",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.550",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.55Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.550",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.55Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=9a1332a8-a598-4af3-b51c-796c2e6c4c26, createRequestId=O20250115RJHIMYKL040OQR91005747, clientId=payments, clientBatchId=O20250115RJHIMYKL040OQR91005747, postingInstructions=[PostingInstruction(id=079a7e05-8619-4dcf-bbff-2c9ed52efbc7, clientTransactionId=cb9623a9-8864-4b93-bbe5-f8e750990838, pics=[], instructionDetails={PAYMENT_TYPE=duitnow_qr, busMsgId=20250115RJHIMYKL04091005747, cdtracctTpPrtry=, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_QR_P2P, transferType=6}, committedPostings=[Posting(credit=false, amount=500, denomination=MYR, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=500, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=500, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=9c74b271-834d-4e6e-b5a8-b4427597a535), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL040OQR91005747}, valueTimestamp=2025-01-15T10:09:10.600756Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-15T10:09:10.600756Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "50495d02f79db172",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.550",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.55Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=1a595a53-f254-48b0-8495-0720e73cfcf5, createRequestId=O20250115RJHIMYKL010ORM91005748, clientId=payments, clientBatchId=O20250115RJHIMYKL010ORM91005748, postingInstructions=[PostingInstruction(id=f46ed2ef-d244-4b2d-9f9b-604a8ea05fa0, clientTransactionId=7d23dff8-9a76-4e0f-9a0f-ec337af738ad, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250115RJHIMYKL01091005748, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[ContractViolation(accountId=33fa1157-0a0d-4e41-82c5-afa7a01c7284, type=CONTRACT_VIOLATION_BREACH_TERMS_AND_CONDITIONS, reason=Transaction would cause the maximum cat_duitnow_acc_proxy payment limit of 10000.00 MYR to be exceeded.)], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=600, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=33fa1157-0a0d-4e41-82c5-afa7a01c7284), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250115RJHIMYKL010ORM91005748}, valueTimestamp=2025-01-15T10:09:04.778197Z, status=POSTING_INSTRUCTION_BATCH_STATUS_REJECTED, error=null, insertionTimestamp=2025-01-15T10:09:04.778197Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "becc2d91ca1d9a86",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.549Z",
            "@version": "1",
            "message": "Error occured while processing: integration.postings_api.payments.response-7@220074",
            "logger_name": "org.springframework.kafka.listener.CommonLoggingErrorHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220074\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2723)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.KafkaException: Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220074\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.verifySendResult(DeadLetterPublishingRecoverer.java:676)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:659)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.549Z",
            "@version": "1",
            "message": "Dead-letter publication to integration.postings_api.payments.response.DLTfailed for: integration.postings_api.payments.response-7@220074",
            "logger_name": "org.springframework.kafka.listener.DeadLetterPublishingRecoverer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Send failed; nested exception is org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n\tat org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:666)\n\tat org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:429)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.publish(DeadLetterPublishingRecoverer.java:647)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.send(DeadLetterPublishingRecoverer.java:555)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.sendOrThrow(DeadLetterPublishingRecoverer.java:520)\n\tat org.springframework.kafka.listener.DeadLetterPublishingRecoverer.accept(DeadLetterPublishingRecoverer.java:492)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:38)\n\tat org.springframework.kafka.listener.ConsumerAwareRecordRecoverer.accept(ConsumerAwareRecordRecoverer.java:32)\n\tat com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration.vaultKafkaListenerContainerFactory$lambda$1$lambda$0(VaultKafkaConsumerConfiguration.kt:65)\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:539)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:387)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d56d84f9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "8f600d4a4a1aa68e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:50.549",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:50.549Z",
            "@version": "1",
            "message": "Exception thrown when sending a message with key='O20250115RJHIMYKL010ORM91005746' and payload='{\"id\":\"236d5be5-65cd-4009-9ee3-18f07237e1c3\",\"create_request_id\":\"O20250115RJHIMYKL010ORM91005746\",\"...' to topic integration.postings_api.payments.response.DLT and partition 7:",
            "logger_name": "org.springframework.kafka.support.LoggingProducerListener",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.apache.kafka.common.errors.TimeoutException: Topic integration.postings_api.payments.response.DLT not present in metadata after 60000 ms.\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789fece915922984f1c2e72df77ccc1",
            "spanId": "8f600d4a4a1aa68e",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:46.347",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:46.347Z",
            "@version": "1",
            "message": "Received request to get transaction thresholds ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a22b17dbef413e66b8bb0d57c16",
            "spanId": "13e66b8bb0d57c16",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:29.881",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:29.881Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1690531460340684]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a118a9733dd8fa496e9e5f2834d",
            "spanId": "8fa496e9e5f2834d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:29.879",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:29.879Z",
            "@version": "1",
            "message": "Received request to get transaction limits for customer [1690531460340684] ...",
            "logger_name": "com.arbm.digibank.controller.limit.CustomerTransactionLimitsController",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a118a9733dd8fa496e9e5f2834d",
            "spanId": "8fa496e9e5f2834d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.598",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.597Z",
            "@version": "1",
            "message": "Saving response under id 7071cf07-8470-4b31-82cf-bf57d60d4e0b",
            "logger_name": "com.arbm.digibank.service.client.asyncresponse.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.597",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.597Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [CustomerLimitsEntity(customerId=1680765143524821, duitnowAccOrProxy=18326.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)]\n totalTime: 3 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.594Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1680765143524821]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.593Z",
            "@version": "1",
            "message": "for request id: 7071cf07-8470-4b31-82cf-bf57d60d4e0band customer id: 1680765143524821updatedLimits: ProperlyUpdatedLimits(duitnowAccOrProxy=18326.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.594",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.593Z",
            "@version": "1",
            "message": "for request id: 7071cf07-8470-4b31-82cf-bf57d60d4e0band customer id: 1680765143524821currentLimits: CustomerLimitsEntity(customerId=1680765143524821, duitnowAccOrProxy=20326.00, duitnowQr=1.00, duitnowAccIntrabank=1.00)",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.593",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.593Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: CustomerLimitsEntity com.arbm.digibank.repository.limits.CustomerLimitsRepository.findByCustomerId(String)\n parameters: [1680765143524821]\n totalTime: 1 ms\n result: SUCCESS",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.592",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.592Z",
            "@version": "1",
            "message": "finding if there is increased limits for request id: 7071cf07-8470-4b31-82cf-bf57d60d4e0band customer id: 1680765143524821SuccessfulCustomerTransactionLimitsUpdate: SuccessfulCustomerTransactionLimitsUpdate(requestId=7071cf07-8470-4b31-82cf-bf57d60d4e0b, customerId=1680765143524821, updateResult=ProperlyUpdatedLimits(duitnowAccOrProxy=18326.00, duitnowQr=1.00, duitnowAccIntrabank=1.00))",
            "logger_name": "com.arbm.digibank.service.limits.CustomerLimitsService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:23.592",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:23.592Z",
            "@version": "1",
            "message": "[7071cf07-8470-4b31-82cf-bf57d60d4e0b] Received CustomerAccountLimitsUpdatedEvent' for customer [1680765143524821] with status [SUCCESS]event: {\"requestId\": \"7071cf07-8470-4b31-82cf-bf57d60d4e0b\", \"customerId\": \"1680765143524821\", \"paymentTypeLimits\": {\"duitnow_acc_intrabank\": \"1.00\", \"duitnow_qr\": \"1.00\"}, \"categoryTypeLimits\": {\"cat_duitnow_acc_proxy\": \"18326.00\"}, \"status\": \"SUCCESS\"}",
            "logger_name": "com.arbm.digibank.consumer.CustomerAccountLimitsUpdatedConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "678a1a0b50ac0b2c169afe5cf2ab51a3",
            "spanId": "041d17e86c35b44d",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.367",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.366Z",
            "@version": "1",
            "message": "Exceeded retry attempts: 3\nwith cause: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public kotlin.Unit com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(com.arbm.digibank.tm.model.coreapi.posting.get.PostingInstructionBatch)' threw exception; nested exception is ValidateMessageException(name=org.springframework.dao.DataIntegrityViolationException, message=could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement, errorId=edcb1d49-6a83-478d-88aa-783a3479bf39)\nSending failed message to DLT",
            "logger_name": "com.arbm.digibank.tm.kafka.configuration.VaultKafkaConsumerConfiguration",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.366",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.363Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(bac47e6d-2822-4ee4-be29-85cf71d21451) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.363",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.363Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1678708272821606, transactionId=bac47e6d-2822-4ee4-be29-85cf71d21451, tmCreatedAt=2025-01-09T14:28:24.992065Z, amount=100, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(bac47e6d-2822-4ee4-be29-85cf71d21451) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.362",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.362Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.362",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.362Z",
            "@version": "1",
            "message": "ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(bac47e6d-2822-4ee4-be29-85cf71d21451) already exists.",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.362",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.362Z",
            "@version": "1",
            "message": "HHH000010: On release of batch it still contained JDBC statements",
            "logger_name": "org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.360",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.36Z",
            "@version": "1",
            "message": "Call to Account Deposit API endpoint: /saving-accounts/c21703d4-0fdf-476a-a648-13cbae77858e with method: GET succeeded with status code 200: OK in totalTime: 3 ms",
            "logger_name": "com.arbm.digibank.filter.consumer.AccountDepositApiFilter",
            "thread_name": "reactor-http-epoll-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.357",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.356Z",
            "@version": "1",
            "message": "Received TM Posting Instruction Batch transaction event: PostingInstructionBatch(id=a367a884-e841-4016-8345-cd2d25529ca7, createRequestId=O20250109RJHIMYKL010ORM91006549, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006549, postingInstructions=[PostingInstruction(id=31f0d5a3-b476-47c3-a9c0-02a7860ecff5, clientTransactionId=bac47e6d-2822-4ee4-be29-85cf71d21451, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006549, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=100, denomination=MYR, accountId=c21703d4-0fdf-476a-a648-13cbae77858e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=100, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=100, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=c21703d4-0fdf-476a-a648-13cbae77858e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006549}, valueTimestamp=2025-01-09T14:28:24.992065Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:28:24.992065Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.357",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.356Z",
            "@version": "1",
            "message": "Storing transaction for postingInstruction PostingInstruction(id=31f0d5a3-b476-47c3-a9c0-02a7860ecff5, clientTransactionId=bac47e6d-2822-4ee4-be29-85cf71d21451, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006549, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=100, denomination=MYR, accountId=c21703d4-0fdf-476a-a648-13cbae77858e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=100, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=100, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=c21703d4-0fdf-476a-a648-13cbae77858e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null) and postingInstructionBatch PostingInstructionBatch(id=a367a884-e841-4016-8345-cd2d25529ca7, createRequestId=O20250109RJHIMYKL010ORM91006549, clientId=payments, clientBatchId=O20250109RJHIMYKL010ORM91006549, postingInstructions=[PostingInstruction(id=31f0d5a3-b476-47c3-a9c0-02a7860ecff5, clientTransactionId=bac47e6d-2822-4ee4-be29-85cf71d21451, pics=[], instructionDetails={PAYMENT_CATEGORY=cat_duitnow_acc_proxy, PAYMENT_TYPE=duitnow_acc_interbank, busMsgId=20250109RJHIMYKL01091006549, cdtracctTpPrtry=SVGS, dbtracctTpPrtry=SVGS, paymentType=DUITNOW_ACC, transferType=4}, committedPostings=[Posting(credit=false, amount=100, denomination=MYR, accountId=c21703d4-0fdf-476a-a648-13cbae77858e, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED), Posting(credit=true, amount=100, denomination=MYR, accountId=PAYNET_RPP_SETTLEMENT, accountAddress=DEFAULT, asset=COMMERCIAL_BANK_MONEY, phase=POSTING_PHASE_COMMITTED)], postingViolations=[], accountViolations=[], restrictionViolations=[], contractViolations=[], override=OverrideObj(restrictions=Restrictions(all=false, restrictionSetIds=[])), transactionCode=null, outboundAuthorisation=null, inboundAuthorisation=null, authorisationAdjustment=null, settlement=null, release=null, inboundHardSettlement=null, outboundHardSettlement=ExternalPostingInstruction(amount=100, denomination=MYR, targetAccount=Account(paymentDeviceToken=null, accountId=c21703d4-0fdf-476a-a648-13cbae77858e), internalAccountId=PAYNET_RPP_SETTLEMENT, advice=false), transfer=null, customInstruction=null)], batchDetails={original_posting_client_batch_id=O20250109RJHIMYKL010ORM91006549}, valueTimestamp=2025-01-09T14:28:24.992065Z, status=POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED, error=null, insertionTimestamp=2025-01-09T14:28:24.992065Z, dryRun=false)",
            "logger_name": "com.arbm.digibank.service.TransactionStorageService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.357",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.356Z",
            "@version": "1",
            "message": "Retrieving account information from saving-account-service. AccountId: c21703d4-0fdf-476a-a648-13cbae77858e",
            "logger_name": "com.arbm.digibank.service.client.DepositAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.156",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.156Z",
            "@version": "1",
            "message": "Repository method intercepted: \n signature: Object org.springframework.data.repository.CrudRepository.save(Object)\n parameters: [RetailTransactionEntity(customerId=1678708272821606, transactionId=bac47e6d-2822-4ee4-be29-85cf71d21451, tmCreatedAt=2025-01-09T14:28:24.992065Z, amount=100, limitType=DUITNOW_ACC_OR_PROXY)]\n totalTime: 1 ms\n result: FAILURE, exception thrown:",
            "logger_name": "com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(bac47e6d-2822-4ee4-be29-85cf71d21451) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.156",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.156Z",
            "@version": "1",
            "message": "Mapped exception with message: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement to ValidateMessageException during TM Kafka Listener execution",
            "logger_name": "com.arbm.digibank.consumer.VaultTransactionPostingConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [retail_transaction_transaction_id_unique_key]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:276)\n\tat org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat jdk.internal.reflect.GeneratedMethodAccessor164.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)\n\tat com.arbm.digibank.aspect.RepositoryPerformanceTrackingAspect.logExecution(RepositoryPerformanceTrackingAspect.kt:19)\n\tat jdk.internal.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)\n\tat org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)\n\tat org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n\tat com.sun.proxy.$Proxy228.save(Unknown Source)\n\tat com.arbm.digibank.service.TransactionStorageService.storeRetailTransaction(TransactionStorageService.kt:72)\n\tat com.arbm.digibank.service.TransactionStorageService.storeTransaction$suspendImpl(TransactionStorageService.kt:37)\n\tat com.arbm.digibank.service.TransactionStorageService$storeTransaction$1.invokeSuspend(TransactionStorageService.kt)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\n\tat com.arbm.digibank.consumer.VaultTransactionPostingConsumer.consumeTMPostingEvent(VaultTransactionPostingConsumer.kt:26)\n\tat jdk.internal.reflect.GeneratedMethodAccessor153.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.lambda$onMessage$0(RetryingMessageListenerAdapter.java:125)\n\tat org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:329)\n\tat org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:255)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:119)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter.onMessage(RetryingMessageListenerAdapter.java:42)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$FastClassBySpringCGLIB$$a98718f8.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RetryingMessageListenerAdapter$$EnhancerBySpringCGLIB$$44973eae.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.hibernate.exception.ConstraintViolationException: could not execute statement\n\tat org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)\n\tat org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)\n\tat org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)\n\tat org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)\n\tat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)\n\tat org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)\n\tat org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)\n\tat org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)\n\tat org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)\n\tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)\n\tat org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)\n\tat org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)\n\tat org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)\n\tat org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3303)\n\tat org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2438)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)\n\tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)\n\tat org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)\n\t... 85 common frames omitted\nCaused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint \"retail_transaction_transaction_id_unique_key\"\n  Detail: Key (transaction_id)=(bac47e6d-2822-4ee4-be29-85cf71d21451) already exists.\n\tat org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)\n\tat org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)\n\tat org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:355)\n\tat org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:490)\n\tat org.postgresql.jdbc.PgStatement.execute(PgStatement.java:408)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:167)\n\tat org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:135)\n\tat com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)\n\tat com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)\n\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)\n\t... 106 common frames omitted\n",
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    },
    {
        "@timestamp": "2025-01-17 08:51:15.155",
        "kubernetes.container_name": "transaction-limit-service",
        "logBody": {
            "@timestamp": "2025-01-17T08:51:15.155Z",
            "@version": "1",
            "message": "SQL Error: 0, SQLState: 23505",
            "logger_name": "org.hibernate.engine.jdbc.spi.SqlExceptionHelper",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "transaction-limit-service",
            "traceId": "6789ec4be57543a1200c69ae763bd0a8",
            "spanId": "0816f35e591a6a18",
            "bc": "payments"
        }
    }
]