[
    {
        "@timestamp": "2025-05-15 02:40:56.088",
        "kubernetes.container_name": "customer-identity-service",
        "logBody": "\\n\\t\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\n\\t\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\n\\t\\tat java.base/java.lang.Thread.run(Thread.java:829)\\nCaused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class com.arbm.digibank.external.jumioV4.model.Authentication] value failed for JSON property data due to missing (therefore NULL) value for creator parameter data which is a non-nullable type\\n at [Source: (io.netty.buffer.ByteBufInputStream); line: 1, column: 2880] (through reference chain: com.arbm.digibank.external.jumioV4.model.JumioV4Response[\\\"capabilities\\\"]->com.arbm.digibank.external.jumioV4.model.Capabilities[\\\"authentication\\\"]->java.util.ArrayList[0]->com.arbm.digibank.external.jumioV4.model.Authentication[\\\"data\\\"])\\n\\tat com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)\\n\\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\\n\\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._deserializeFromArray(CollectionDeserializer.java:355)\\n\\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:244)\\n\\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:28)\\n\\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:542)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:564)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:439)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\\n\\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:542)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:564)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:439)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)\\n\\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\\n\\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)\\n\\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2051)\\n\\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1427)\\n\\tat org.springframework.http.codec.json.AbstractJackson2Decoder.decode(AbstractJackson2Decoder.java:193)\\n\\tat org.springframework.http.codec.json.AbstractJackson2Decoder.lambda$decodeToMono$1(AbstractJackson2Decoder.java:179)\\n\\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:125)\\n\\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\\n\\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\\n\\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\\n\\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\\n\\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\\n\\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\\n\\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\\n\\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\\n\\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\\n\\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\\n\\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\\n\\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\\n\\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\\n\\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:703)\\n\\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:93)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\\n\\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\\n\\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\\n\\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:280)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\\n\\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1373)\\n\\tat io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1236)\\n\\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1285)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:519)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:458)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:280)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\\n\\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe$1.run(AbstractEpollChannel.java:425)\\n\\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\\n\\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\\n\\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:403)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\"springAppName\":\"customer-identity-service\",\"traceId\":\"682554373b29436a3ea7abcf01c9def0\",\"spanId\":\"dbf0e6614386edc1\",\"bc\":\"customers\"}"
    },
    {
        "@timestamp": "2025-05-15 02:40:55.983",
        "kubernetes.container_name": "customer-identity-service",
        "logBody": {
            "@timestamp": "2025-05-15T02:40:55.982Z",
            "@version": "1",
            "message": "Fetch verification details for account ba510bf4-7611-438e-b336-2eb6c4fa6bec and reference 339270a2-4a87-4210-a573-92caf898fa32",
            "logger_name": "com.arbm.digibank.external.jumioV4.RetrievalClient",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "customer-identity-service",
            "traceId": "682554373b29436a3ea7abcf01c9def0",
            "spanId": "dbf0e6614386edc1",
            "bc": "customers"
        }
    },
    {
        "@timestamp": "2025-05-15 02:40:55.941",
        "kubernetes.container_name": "customer-identity-service",
        "logBody": {
            "@timestamp": "2025-05-15T02:40:55.941Z",
            "@version": "1",
            "message": "Jumio V4 callback data: JumioV4Callback(callbackSentAt=2025-05-15T02:40:55.911Z, userReference='1688444909069103', workflowExecution=WorkflowExecution(id='339270a2-4a87-4210-a573-92caf898fa32', href=https://retrieval.apac-1.jumio.ai/api/v1/workflow-executions/339270a2-4a87-4210-a573-92caf898fa32, definitionKey=10014, status=PROCESSED), account=Account(id='ba510bf4-7611-438e-b336-2eb6c4fa6bec', href=https://retrieval.apac-1.jumio.ai/api/v1/accounts/ba510bf4-7611-438e-b336-2eb6c4fa6bec))",
            "logger_name": "com.arbm.digibank.controller.JumioV4CallbackController",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "customer-identity-service",
            "traceId": "682554373b29436a3ea7abcf01c9def0",
            "spanId": "dbf0e6614386edc1",
            "bc": "customers"
        }
    }
]