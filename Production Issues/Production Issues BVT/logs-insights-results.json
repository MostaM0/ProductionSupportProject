[
    {
        "@timestamp": "2025-02-02 22:03:03.298",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:03.298Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:03.298",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:03.298Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Error sending fetch request (sessionId=838618777, epoch=14057) to node 4:",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.apache.kafka.common.errors.DisconnectException: null\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.918",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.917Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.918",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.918Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Connection to node 4 (b-4.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com/172.21.17.124:9098) terminated during authentication. This may happen due to any of the following reasons: (1) Authentication failed due to invalid credentials with brokers older than 1.0.0, (2) Firewall blocking Kafka TLS traffic (eg it may only allow HTTPS traffic), (3) Transient network issue.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.918",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.918Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Error sending fetch request (sessionId=1607910132, epoch=INITIAL) to node 4:",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.apache.kafka.common.errors.DisconnectException: null\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.837Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.836",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Cancelled in-flight FETCH request with correlation id 70850 due to node 4 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 30000ms)",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.836",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Error sending fetch request (sessionId=1607910132, epoch=13861) to node 4:",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.apache.kafka.common.errors.DisconnectException: null\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.836",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.835",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.835",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.834Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:03:02.835",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:03:02.835Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Node 4 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.374",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.374Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.354",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.354Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.351",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.35Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "e250eaa6bcc40a74",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.350",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.349Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:50.348",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:50.348Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82393 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.337Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.331",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.331Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.328",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.328Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5115eaeef98db9b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.327",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.327Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:46.326",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:46.326Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82393 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.316",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.316Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.310",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.309Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:44.306",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:44.306Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb8422b311d2dc05cde128fbec64",
            "spanId": "5471427d0823f28e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.154",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.153Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=8f783721-9a94-49a0-944d-e52a582d57ff)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-9",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b44ef1740d4fe8795265e9d17",
            "spanId": "d4fe8795265e9d17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.063",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.063Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad_801b110c-cba9-4a07-aac1-4a5d1b35ffbb\", \"valueTimestamp\": \"2025-02-02T22:02:34.849Z\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\", \"customerId\": \"1730699089744064\", \"availableBalance\": 35.90, \"settledBalance\": 35.90}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b160572a096d277e0a7136045",
            "spanId": "aee2fb4f7cdc7262",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.062",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.061Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad_801b110c-cba9-4a07-aac1-4a5d1b35ffbb\", \"valueTimestamp\": \"2025-02-02T22:02:34.849Z\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\", \"customerId\": \"1730699089744064\", \"availableBalance\": 35.90, \"settledBalance\": 35.90}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b160572a096d277e0a7136045",
            "spanId": "aee2fb4f7cdc7262",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.053",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.053Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=719c3e0f-e679-449f-94a7-6f0b521ae05a)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-10",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b3560278a8c4c846b399f89b5",
            "spanId": "db255ff5d7300be2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.049",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.049Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5_801b110c-cba9-4a07-aac1-4a5d1b35ffbb\", \"valueTimestamp\": \"2025-02-02T22:02:34.849Z\", \"accountId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5\", \"customerId\": \"1730699089744064\", \"availableBalance\": 0.00, \"settledBalance\": 0.00}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b3560278a8c4c846b399f89b5",
            "spanId": "ad6bf418a86601c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.046",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.045Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5_801b110c-cba9-4a07-aac1-4a5d1b35ffbb\", \"valueTimestamp\": \"2025-02-02T22:02:34.849Z\", \"accountId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5\", \"customerId\": \"1730699089744064\", \"availableBalance\": 0.00, \"settledBalance\": 0.00}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b3560278a8c4c846b399f89b5",
            "spanId": "ad6bf418a86601c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:35.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:35.033Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=91fda550-863b-4806-b6f0-7e37163610eb)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-5",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb7b3560278a8c4c846b399f89b5",
            "spanId": "ba475c9fc88dda06",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:07.408",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:07.408Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=4ea047e8-9068-4b71-9727-973b7d51bc39)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-2",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5e0890991523358b13a0bd9fa5",
            "spanId": "9b9f5ec488821e9d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:07.111",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:07.111Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad_db066f3f-138a-4cd8-9d60-077f6cbf226f\", \"valueTimestamp\": \"2025-02-02T22:02:06.559Z\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\", \"customerId\": \"1730699089744064\", \"availableBalance\": 25.90, \"settledBalance\": 25.90}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5f04e262ece0029e5117e4fd86",
            "spanId": "9fb833174fa0e0de",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:07.109",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:07.109Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad_db066f3f-138a-4cd8-9d60-077f6cbf226f\", \"valueTimestamp\": \"2025-02-02T22:02:06.559Z\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\", \"customerId\": \"1730699089744064\", \"availableBalance\": 25.90, \"settledBalance\": 25.90}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5f04e262ece0029e5117e4fd86",
            "spanId": "9fb833174fa0e0de",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:06.987",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:06.987Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5_db066f3f-138a-4cd8-9d60-077f6cbf226f\", \"valueTimestamp\": \"2025-02-02T22:02:06.559Z\", \"accountId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5\", \"customerId\": \"1730699089744064\", \"availableBalance\": 10.00, \"settledBalance\": 10.00}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5e0890991523358b13a0bd9fa5",
            "spanId": "0ac76cd47284e55e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:06.986",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:06.985Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5_db066f3f-138a-4cd8-9d60-077f6cbf226f\", \"valueTimestamp\": \"2025-02-02T22:02:06.559Z\", \"accountId\": \"61c5040f-6ca4-471b-8c00-7e38bdaa13d5\", \"customerId\": \"1730699089744064\", \"availableBalance\": 10.00, \"settledBalance\": 10.00}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5e0890991523358b13a0bd9fa5",
            "spanId": "0ac76cd47284e55e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:06.954",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:06.954Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=8be0eb99-5202-45aa-bf1c-cbf951735a84)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-8",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5e0890991523358b13a0bd9fa5",
            "spanId": "c540ac237c95f6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:02:06.778",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:02:06.778Z",
            "@version": "1",
            "message": "Handle NotFoundException: NotFoundException(name=There is no saving account with given specification, message=There is no saving account with id: 61c5040f-6ca4-471b-8c00-7e38bdaa13d5 and proper status in saving account table, errorId=ee12c07f-000a-405c-8245-eacddcbbe8ff)",
            "logger_name": "com.arbm.digibank.rest.error.ErrorHandler",
            "thread_name": "http-nio-8080-exec-6",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679feb5e50bf27abc1f2e81a1a310910",
            "spanId": "c1f2e81a1a310910",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.558",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.557Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.558",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.558Z",
            "@version": "1",
            "message": "Saving response under id 90e97238-bdd9-4ec0-90ae-5f447a41dc03",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.557",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.557Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.557",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.557Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.557",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.557Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.557",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.557Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.551",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.551Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.548",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.548Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "af1374396bbee209",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.544",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.543Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:30.542",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:30.542Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82392 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.531Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.531Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.531Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.531Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.532Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.532",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.532Z",
            "@version": "1",
            "message": "Saving response under id 90e97238-bdd9-4ec0-90ae-5f447a41dc03",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.526",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.526Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.522",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.522Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1877ca6f0023d26c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.521",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.521Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82392 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:26.521",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:26.521Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.511Z",
            "@version": "1",
            "message": "Saving response under id 90e97238-bdd9-4ec0-90ae-5f447a41dc03",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.505",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.505Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.502",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.502Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"90e97238-bdd9-4ec0-90ae-5f447a41dc03\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "5bc51294e297fd09",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.499Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82392 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:24.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:24.003Z",
            "@version": "1",
            "message": "Saving response under id 6a1c1cc2-1dca-4969-b38a-a33258686d9c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:23.997",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:23.997Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:23.994",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:23.994Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "690468b11dc820eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:23.993",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:23.993Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:23.992",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:23.992Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82391 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.98Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.98Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.98Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.981Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.981Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.981",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.981Z",
            "@version": "1",
            "message": "Saving response under id 6a1c1cc2-1dca-4969-b38a-a33258686d9c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.974",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.974Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.970",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.97Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "9c0a2edfdf271127",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.968Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82391 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:19.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:19.969Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.959Z",
            "@version": "1",
            "message": "Saving response under id 6a1c1cc2-1dca-4969-b38a-a33258686d9c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.953Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.949",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.949Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"6a1c1cc2-1dca-4969-b38a-a33258686d9c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "c1263af25b7cf16a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.946",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.945Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82391 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.45Z",
            "@version": "1",
            "message": "Saving response under id 46edb274-c9f3-402c-a17d-d88855b8cb49",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.444",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.444Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.440",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.44Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "13287cb9339543fb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.439",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.439Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:17.438",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:17.438Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82390 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.427",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.427Z",
            "@version": "1",
            "message": "Saving response under id 46edb274-c9f3-402c-a17d-d88855b8cb49",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.420",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.42Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.417",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.417Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "39baca35db64e7d7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.416",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.415Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:13.415",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:13.415Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82390 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.404Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.404Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.404Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.404Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.405Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.405Z",
            "@version": "1",
            "message": "Saving response under id 46edb274-c9f3-402c-a17d-d88855b8cb49",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.384Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:01:11.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:01:11.38Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"46edb274-c9f3-402c-a17d-d88855b8cb49\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "3474182c0a62577a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.523",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.523Z",
            "@version": "1",
            "message": "Saving response under id 629ae079-797a-4b68-ae42-658eafbdec66",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.517",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.517Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.513Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "a9d85c93e25f7f9b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.512",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.512Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:21.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:21.51Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82389 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.498Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.499Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.499Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.499Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.499Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.499Z",
            "@version": "1",
            "message": "Saving response under id 629ae079-797a-4b68-ae42-658eafbdec66",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.493",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.492Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.489",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.489Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "feb6c8357aad1322",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.488",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.487Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:17.487",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:17.487Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82389 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.477",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.477Z",
            "@version": "1",
            "message": "Saving response under id 629ae079-797a-4b68-ae42-658eafbdec66",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.471",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.471Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.468",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.468Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"629ae079-797a-4b68-ae42-658eafbdec66\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "4553ec1a8c8a4785",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:15.465",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:15.464Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82389 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.970",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.970",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.969",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.969Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.963",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.963Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.959",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.959Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "691c66bae972eae3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.958",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.957Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82388 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:14.958",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:14.958Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.947Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.941",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.941Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.937",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.937Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "fcda6c402a86f4bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.936",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.936Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82388 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:10.936",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:10.936Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.927",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.926Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.927",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.926Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.927",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.926Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.927",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.927Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.927",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.927Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.926",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.926Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.921",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.921Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.917",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.917Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "19e8a282ede04cea",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.908",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.908Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82388 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.413Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.413Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.414Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.414Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.414Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.414Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.408",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.407Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.404",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.404Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1e03b26205bde3b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.403",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.403Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:08.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:08.401Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82387 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.39Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.39Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.39Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.39Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.391Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.391Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.370",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.37Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.366",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.366Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "aaafed64da68e3c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.365",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.364Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82387 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:04.365",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:04.365Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.355Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.346",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.346Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 22:00:02.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T22:00:02.342Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "58cb7b3e0498db1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.756",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.756Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.38Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.3Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.3Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.3Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.3Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483645",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.277",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.277Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.277",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.277Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.277",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.277Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.274",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.274Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.274",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.274Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.274",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.274Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:33.274",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:33.274Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483645",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.983",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.983Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.954",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.954Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.851",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.851Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.851",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.851Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.851",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.851Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.849",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.848Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.849",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.848Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.849",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.848Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483645",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.848",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.848Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.780",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.78Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.780",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.78Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.780",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.78Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.780",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.78Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483646",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.513Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.475",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.475Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2 was unable to process the fetch request with (sessionId=580914581, epoch=12913): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.467",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.467Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.398",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.398Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.398",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.398Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.398",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.398Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.395",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.394Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.395",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.394Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.395",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.394Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.395",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.395Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483645",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.36Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.36Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.36Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.357",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.356Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.357",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.357Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.357",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.357Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.357",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.357Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483646",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.243",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.242Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Node 2 was unable to process the fetch request with (sessionId=1018574568, epoch=12572): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.082",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.081Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.077",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.076Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.077",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.076Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483646",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.076",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.076Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.076",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.076Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:32.036",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:32.036Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.933",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.933Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.933",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.933Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.933",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.933Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.919",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.919Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Attempt to heartbeat failed since coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is either not started or not valid",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.919",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.919Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null) is unavailable or invalid due to cause: error response NOT_COORDINATOR.isDisconnected: false. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.919",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.919Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Requesting disconnect from last known coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.919",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.919Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Client requested disconnect from node 2147483646",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:31.264",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:31.264Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2 was unable to process the fetch request with (sessionId=785126297, epoch=13051): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:30.416",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:30.416Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 2 was unable to process the fetch request with (sessionId=1048559697, epoch=12837): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:30.075",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:30.075Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 2 was unable to process the fetch request with (sessionId=1479523045, epoch=13131): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.482Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.476",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.476Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.473",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.473Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "7b6643eef491ed7e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.472",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.471Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:12.471",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:12.471Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82386 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.460",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.460",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.459",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.459",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.459",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.459",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.459Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.449",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.449Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.445",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.445Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e971294f4c95a1b4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.444",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.443Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82386 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:08.444",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:08.444Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.433",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.433Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.426Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.423",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.422Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "483417d104efe112",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:06.419",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:06.418Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82386 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.921Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.922Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.922Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.922Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.922Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.922",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.922Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.916",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.916Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.912",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.912Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "f899f7638463cb4e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.911Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82385 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:05.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:05.911Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.898Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.899Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.899Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.899Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.899Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.899Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.893",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.892Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.889",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.889Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "e6004ede1c5025c3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.888",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.887Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:59:01.887",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:59:01.887Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82385 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.877Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.871Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.868",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.868Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "ef41db5cf916fe08",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.865",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.864Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82385 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.370",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.370",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.369",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.369",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.369",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.369",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.369Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.363",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.363Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.36Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "401251c902466bc0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.359",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.358Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:59.358",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:59.358Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82384 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.346Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.346Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.346Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.346Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.347Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.347Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.341",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.341Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.337Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "1d0fb56a60676e47",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.336",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.335Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:55.335",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:55.335Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82384 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.325",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.324Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.319",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.319Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:53.315",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:53.315Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea584d9d5bc62d2ace0ee1c4c24e",
            "spanId": "636611e75b961457",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.424Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.418",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.418Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.414Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "907bfbdfa5f35c67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.413",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.412Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82383 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:36.413",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:36.413Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.401Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.395",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.395Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.39Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.391Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "16eb4c700f11df32",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:32.390",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:32.39Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82383 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.379Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.38Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.38Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.38Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.38Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.380",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.38Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.36Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:58:30.356",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:58:30.356Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bcdcc9266aeb860f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:20.348",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:20.348Z",
            "@version": "1",
            "message": "[Producer clientId=producer-1] Resetting the last seen epoch of partition deposit-account-service.saving-pot.snapshot.v1-0 to 158 since the associated topicId changed from null to ul8d2j0IQrCNuhvWUDAsVA",
            "logger_name": "org.apache.kafka.clients.Metadata",
            "thread_name": "kafka-producer-network-thread | producer-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:05.171",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:05.17Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea30940895300d375ed5fb3a2a4e",
            "spanId": "42cfa25bb31b6328",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:05.171",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:05.17Z",
            "@version": "1",
            "message": "Account: 13b7df83-cade-4afb-ace0-7c089cb3893c set to status AWAITING_LINK_CREATION",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea30940895300d375ed5fb3a2a4e",
            "spanId": "42cfa25bb31b6328",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:05.170",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:05.17Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea30940895300d375ed5fb3a2a4e",
            "spanId": "42cfa25bb31b6328",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:04.965",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:04.965Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea30940895300d375ed5fb3a2a4e",
            "spanId": "42cfa25bb31b6328",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:04.965",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:04.965Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea30940895300d375ed5fb3a2a4e",
            "spanId": "42cfa25bb31b6328",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.824",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.824Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.824",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.824Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.824",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.824Z",
            "@version": "1",
            "message": "Account: 13b7df83-cade-4afb-ace0-7c089cb3893c set to status INITIATED",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.675",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.675Z",
            "@version": "1",
            "message": "productVersionId [135] exists, productId [murabahah_saving_pot_0_0_17] is overwritten to null.",
            "logger_name": "com.arbm.digibank.tm.rest.coreapi.account.AccountService",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.675",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.675Z",
            "@version": "1",
            "message": "Details of account to be created: CreateAccountRequest(requestId=06c09886-f0d3-4925-b2e8-59aa73c88525, account=Account(id=13b7df83-cade-4afb-ace0-7c089cb3893c, productId=null, stakeholderIds=[1730699089744064], status=ACCOUNT_STATUS_OPEN, openingTimestamp=null, instanceParamVals={main_account=aeb15156-1a75-422a-81df-011a2b82f9ad, profit_application_day=1, account_tier_names=[\"standard\"], tiered_profit_rates={\"standard\": { \"tier1\": \"0.033\"} }, balance_tier_ranges={\"tier1\": { \"min\": \"0\" } }, tiered_minimum_balance_threshold={\"standard\": \"0\" }, minimum_deposit=0.01, maximum_deposit=1e+08, maximum_daily_deposit=1e+08, maximum_withdrawal=250000, maximum_daily_withdrawal=500000, maximum_balance=1e+08}, derivedInstanceParamVals={}, details={}, accounting=null, productVersionId=135))",
            "logger_name": "com.arbm.digibank.tm.rest.coreapi.account.AccountService",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.593",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.593Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.593",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.593Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:57:03.588",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:57:03.587Z",
            "@version": "1",
            "message": "Received SavingPotCreationRequest(customerId=1730699089744064, category=Education, name=Kids edu, targetedSavingsGoal=10, targetedContribution=null, autoContribution=null, imageId=education1)",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.SavingPotControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fea2f17a61c4150fd225f628ca7f2",
            "spanId": "50fd225f628ca7f2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.486",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.486Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.486",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.486Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.485",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.485Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.485",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.485Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.485",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.485Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.485",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.485Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.479",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.479Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.475",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.475Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "f6913fcb9120daac",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.474Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:21.473",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:21.472Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82382 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.461",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.461Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.455",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.455Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.452",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.452Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "bbb9822badaeb4c8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.451",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.451Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:17.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:17.45Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82382 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.441",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.44Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.441",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.441Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.440",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.44Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.440",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.44Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.440",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.44Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.440",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.44Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.435",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.435Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.432",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.432Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "ca4404587855ebbb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:15.429",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:15.429Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82382 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.938",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.937Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.938",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.938Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.937",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.937Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.937",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.937Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.937",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.937Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.937",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.937Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.932",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.932Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.928",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.925Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "1ecabb6014006f89",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.924",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.924Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:14.923",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:14.923Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82381 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.911",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.911Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.892Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.889",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.889Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "41ba012283bab300",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.888",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.888Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:10.887",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:10.887Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82381 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.876Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.877",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.877Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.876Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.876Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.876Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.876Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.867",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.867Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.863",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.863Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "868d375a005d2d02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.854",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.854Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82381 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.353Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "49758edcad19d261",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.351",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.351Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "49758edcad19d261",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.351",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.351Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "49758edcad19d261",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.348",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.348Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "49758edcad19d261",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.347Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82380 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:08.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:08.347Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.344",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.344Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3ac5e875554e0d16",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.341",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.341Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3ac5e875554e0d16",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.341",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.341Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3ac5e875554e0d16",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.339",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.339Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3ac5e875554e0d16",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.338",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.337Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:04.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:04.337Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82380 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:02.335",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:02.335Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "a7a865fd006fa649",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:02.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:02.332Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "a7a865fd006fa649",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:02.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:02.332Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "a7a865fd006fa649",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:55:02.330",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:55:02.329Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "a7a865fd006fa649",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:54:38.786",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:54:38.785Z",
            "@version": "1",
            "message": "Received request to fetch no of saving pots",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.NoOfSavingPotController",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe99e3808b6006209fb1a285a9afc",
            "spanId": "70188f8265ce8865",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.565Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.565Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.566Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.566Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.566Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.566Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.559",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.559Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.555",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.555Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "53313cd32cd98d8a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.554",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.554Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:16.553",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:16.553Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82379 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.542",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.542",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.541",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.541",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.541",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.541",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.541Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.535",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.535Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.531",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.531Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "3dae5d3cf78fcedc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.530",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.529Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82379 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:12.530",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:12.53Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.52Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.514",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.514Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.511",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.511Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "053880e6137c7339",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.508",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.508Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82379 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.013Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.007",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.007Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.003Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "066297ee3b755ed2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.002",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.002Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:10.001",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:10.001Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82378 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.991",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.99Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.991",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.991Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.99Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.99Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.99Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.99Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.971",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.971Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.968Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "b4c98ef57ef365e9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.967",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.966Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:05.966",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:05.966Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82378 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.955Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.955Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.955Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.955Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.956Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.956",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.956Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.950",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.95Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.947Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "0b5ecfd65b39568f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.944",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.943Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82378 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.449",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.449Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.449",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.449Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.448Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.448Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.448Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.448Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.443",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.443Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.439",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.439Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "80ed021c59e83fa4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.438",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.438Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:53:03.437",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:53:03.437Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82377 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.426",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.426Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.420",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.42Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.416",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.416Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "6fb41446e02ff122",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.415",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.415Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:59.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:59.414Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82377 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.405",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.405Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.399",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.399Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.396",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.396Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d4036ed65c2f06fd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:57.393",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:57.393Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82377 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.898Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.899Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.899",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.899Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.898",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.898Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.898",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.898Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.898",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.898Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.892Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.889",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.889Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "8bd643bc8cbeb998",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.888",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.888Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:56.887",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:56.887Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82376 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.876",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.876Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.870",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.87Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.867",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.867Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "5c029a27eea99f33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.866",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.866Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:52.865",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:52.865Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82376 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.336Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.286",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.286Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2147483645 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.286",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.286Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Connection to node 2147483645 (b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com/172.21.17.89:9098) terminated during authentication. This may happen due to any of the following reasons: (1) Authentication failed due to invalid credentials with brokers older than 1.0.0, (2) Firewall blocking Kafka TLS traffic (eg it may only allow HTTPS traffic), (3) Transient network issue.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.286",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.286Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: true. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.281",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.281Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:51.133",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:51.133Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Discovered group coordinator b-1.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483646 rack: null)",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.855Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.855Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.855Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.855Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.856Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.856Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.850",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.85Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.846",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.846Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c67037601c593abf",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.838",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.838Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82376 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.836",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.836Z",
            "@version": "1",
            "message": "[Producer clientId=producer-2] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "kafka-producer-network-thread | producer-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.835",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.834",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.831Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.834",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.834",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2147483645 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.834",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: true. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.833",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2147483645 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.833",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.833Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.833",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.833Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Group coordinator b-2.tm-kafka-cluster.6lr247.c3.kafka.ap-southeast-1.amazonaws.com:9098 (id: 2147483645 rack: null) is unavailable or invalid due to cause: coordinator unavailable.isDisconnected: true. Rediscovery will be attempted.",
            "logger_name": "org.apache.kafka.clients.consumer.internals.ConsumerCoordinator",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.833",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.833Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Cancelled in-flight FETCH request with correlation id 67901 due to node 2 being disconnected (elapsed time since creation: 6ms, elapsed time since send: 6ms, request timeout: 30000ms)",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.833",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.833Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-10, groupId=deposit_account_service_consumer] Error sending fetch request (sessionId=1701220852, epoch=13189) to node 2:",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "stack_trace": "org.apache.kafka.common.errors.DisconnectException: null\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.832",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.832",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.832Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 2 disconnected.",
            "logger_name": "org.apache.kafka.clients.NetworkClient",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.343",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.343",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.342Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.337Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.333Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c6f8d1e4ff80a3bc",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.332Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:50.331",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:50.331Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82375 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.320",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.319Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.320",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.319Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.320",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.32Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.319",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.319Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.319",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.319Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.319",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.319Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.298",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.298Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.294",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.294Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "d45e2db7e2fd30a2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.293",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.292Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82375 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:46.293",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:46.293Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.282",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.282Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.272Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:52:44.269",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:52:44.269Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe92c8a89fe95ddfcfd0b1cd991d7",
            "spanId": "c7d2b56f3ab6f394",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.260",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.26Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.254Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.250",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.25Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "518e95a2aff0ff62",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.249",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.249Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:37.248",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:37.248Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82374 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.237",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.236Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.237",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.237Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.237",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.237Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.236",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.236Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.236",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.236Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.236",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.236Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.231",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.231Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.227Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "58079f0d8c4c1fd0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.226",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.226Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82374 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:33.226",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:33.226Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.216Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.209",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.209Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.206",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.206Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "204a1a214999fd1f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:31.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:31.202Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82374 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.706Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.700",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.7Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.697",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.697Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "66b66af7453d814d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.696",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.695Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:30.695",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:30.695Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82373 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.683Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.683Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.683Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.683Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.684Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.684Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.677",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.677Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.674",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.674Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "4a00435e365b513a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.673",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.673Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:26.672",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:26.672Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82373 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.663",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.663",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.663",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.663",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.662Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.656Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:24.652",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:24.652Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "baf716474e18dc6c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.071",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.071Z",
            "@version": "1",
            "message": "Exception occurred during saving pot creation: com.arbm.digibank.accounts.common.exception.AccountCreationException: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.savingpot.SavingPotService",
            "thread_name": "http-nio-8080-exec-3",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc72731c72433142a06f54c64e",
            "spanId": "433142a06f54c64e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.071",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.071Z",
            "@version": "1",
            "message": "An error occurred during account creation: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.common.exception.AccountExceptionHandler",
            "thread_name": "http-nio-8080-exec-3",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc72731c72433142a06f54c64e",
            "spanId": "433142a06f54c64e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.069",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.069Z",
            "@version": "1",
            "message": "Received SavingPotCreationRequest(customerId=1730699089744064, category=House, name=Reno, targetedSavingsGoal=10, targetedContribution=null, autoContribution=null, imageId=house3)",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.SavingPotControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc72731c72433142a06f54c64e",
            "spanId": "433142a06f54c64e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.058",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.058Z",
            "@version": "1",
            "message": "Exception occurred during saving pot creation: com.arbm.digibank.accounts.common.exception.AccountCreationException: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.savingpot.SavingPotService",
            "thread_name": "http-nio-8080-exec-2",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc3f73fcb652abd2fb361167fe",
            "spanId": "52abd2fb361167fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.058",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.058Z",
            "@version": "1",
            "message": "An error occurred during account creation: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.common.exception.AccountExceptionHandler",
            "thread_name": "http-nio-8080-exec-2",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc3f73fcb652abd2fb361167fe",
            "spanId": "52abd2fb361167fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.057",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.057Z",
            "@version": "1",
            "message": "Received SavingPotCreationRequest(customerId=1730699089744064, category=House, name=Reno, targetedSavingsGoal=10, targetedContribution=null, autoContribution=null, imageId=house3)",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.SavingPotControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cc3f73fcb652abd2fb361167fe",
            "spanId": "52abd2fb361167fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.048",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.048Z",
            "@version": "1",
            "message": "Exception occurred during saving pot creation: com.arbm.digibank.accounts.common.exception.AccountCreationException: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.savingpot.SavingPotService",
            "thread_name": "http-nio-8080-exec-4",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cca1d49c993bb841fbd3cdf6d3",
            "spanId": "3bb841fbd3cdf6d3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.048",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.048Z",
            "@version": "1",
            "message": "An error occurred during account creation: Unable to create saving pot. Saving pot with name Reno already exists for customer 1730699089744064.",
            "logger_name": "com.arbm.digibank.accounts.common.exception.AccountExceptionHandler",
            "thread_name": "http-nio-8080-exec-4",
            "level": "WARN",
            "level_value": 30000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cca1d49c993bb841fbd3cdf6d3",
            "spanId": "3bb841fbd3cdf6d3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:51:08.046",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:51:08.045Z",
            "@version": "1",
            "message": "Received SavingPotCreationRequest(customerId=1730699089744064, category=House, name=Reno, targetedSavingsGoal=10, targetedContribution=null, autoContribution=null, imageId=house3)",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.SavingPotControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8cca1d49c993bb841fbd3cdf6d3",
            "spanId": "3bb841fbd3cdf6d3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.684",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.684Z",
            "@version": "1",
            "message": "Saving response under id 6a9b25ca-a4e9-49e3-8360-1809a942c7e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.678",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.678Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.674",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.674Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "fa6540a4b6bae5dd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.673",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.673Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:21.672",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:21.672Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82372 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.661Z",
            "@version": "1",
            "message": "Saving response under id 6a9b25ca-a4e9-49e3-8360-1809a942c7e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.654",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.654Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.651",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.65Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "2181ccfdb612fc03",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.650",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.649Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:17.649",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:17.649Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82372 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.639",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.639Z",
            "@version": "1",
            "message": "Saving response under id 6a9b25ca-a4e9-49e3-8360-1809a942c7e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.630",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.63Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:50:15.627",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:50:15.627Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6a9b25ca-a4e9-49e3-8360-1809a942c7e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe00d5fe6bcc92b759183c0c9b9c6",
            "spanId": "bdedc283930876b3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:49:30.712",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:49:30.712Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_prod[-9, groupId=deposit_account_service_prod[] Node 6 was unable to process the fetch request with (sessionId=1682818582, epoch=11171): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:49:30.047",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:49:30.047Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 6 was unable to process the fetch request with (sessionId=223933405, epoch=11367): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:49:30.035",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:49:30.035Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_account_service_consumer-2, groupId=deposit_account_service_consumer] Node 6 was unable to process the fetch request with (sessionId=1336545727, epoch=11594): FETCH_SESSION_ID_NOT_FOUND.",
            "logger_name": "org.apache.kafka.clients.FetchSessionHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#7-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:48:33.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:48:33.724Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"44e82307-14ed-4569-9636-38b7184fe75c_3a1ab4b4-0489-4c11-98ef-2d601e1400f3\", \"valueTimestamp\": \"2025-02-02T21:48:33.316Z\", \"accountId\": \"44e82307-14ed-4569-9636-38b7184fe75c\", \"customerId\": \"1695619478642220\", \"availableBalance\": 3412.64, \"settledBalance\": 3412.64}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe831727767d4eb28e8da8955517f",
            "spanId": "35651c1d13d96bd6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:48:33.721",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:48:33.721Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"44e82307-14ed-4569-9636-38b7184fe75c_3a1ab4b4-0489-4c11-98ef-2d601e1400f3\", \"valueTimestamp\": \"2025-02-02T21:48:33.316Z\", \"accountId\": \"44e82307-14ed-4569-9636-38b7184fe75c\", \"customerId\": \"1695619478642220\", \"availableBalance\": 3412.64, \"settledBalance\": 3412.64}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe831727767d4eb28e8da8955517f",
            "spanId": "35651c1d13d96bd6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-02 21:48:32.555",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-02T21:48:32.555Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110186349",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "679fe8305f9846fd21c3f6a888c39333",
            "spanId": "21c3f6a888c39333",
            "bc": "deposits"
        }
    }
]